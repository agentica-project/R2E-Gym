diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py
index efa34dd078..8983f3112e 100644
--- a/lib/matplotlib/offsetbox.py
+++ b/lib/matplotlib/offsetbox.py
@@ -1453,12 +1453,17 @@ or callable, default: value of *xycoords*
         if not self.get_visible() or not self._check_xy(renderer):
             return
         self.update_positions(renderer)
+        gid = self.get_gid()
+        if gid is not None and hasattr(renderer, 'open_group'):
+            renderer.open_group('annotationbbox', gid=gid)
         if self.arrow_patch is not None:
             if self.arrow_patch.figure is None and self.figure is not None:
                 self.arrow_patch.figure = self.figure
             self.arrow_patch.draw(renderer)
         self.patch.draw(renderer)
         self.offsetbox.draw(renderer)
+        if gid is not None and hasattr(renderer, 'open_group'):
+            renderer.close_group('annotationbbox')
         self.stale = False
 
 
diff --git a/test_annotation_bbox_gid.py b/test_annotation_bbox_gid.py
new file mode 100644
index 0000000000..59da63c80e
--- /dev/null
+++ b/test_annotation_bbox_gid.py
@@ -0,0 +1,54 @@
+import matplotlib.pyplot as plt
+import numpy as np
+from matplotlib.offsetbox import (OffsetImage, AnnotationBbox)
+import os
+
+# Create a simple test image
+img_size = (10, 10)
+img = np.zeros((img_size[0], img_size[1], 4))
+img[:, :, 0] = np.linspace(0, 1, img_size[1])
+img[:, :, 1] = np.linspace(0, 1, img_size[0])[:, np.newaxis]
+img[:, :, 3] = 1  # Fully opaque
+
+# Create figure
+fig, ax = plt.subplots()
+
+# Create annotation with image
+xy = [0.3, 0.55]
+imagebox = OffsetImage(img, zoom=0.5)
+imagebox.image.axes = ax
+ab = AnnotationBbox(imagebox, xy,
+                    xybox=(50., -50.),
+                    xycoords='data',
+                    boxcoords="offset points",
+                    pad=0.5,
+                    arrowprops=dict(
+                        arrowstyle="->",
+                        connectionstyle="angle,angleA=0,angleB=90,rad=3")
+                    )
+ab.set_gid('My_label')
+ax.add_artist(ab)
+
+print(f"GID = {ab.get_gid()}")
+
+# Save to SVG
+output_file = "test_output.svg"
+fig.savefig(output_file, format="svg")
+print(f"Saved to {output_file}")
+
+# Check if the gid is in the SVG file
+with open(output_file, 'r') as f:
+    content = f.read()
+    if 'id="My_label"' in content:
+        print("SUCCESS: GID found in SVG file")
+    else:
+        print("FAILURE: GID not found in SVG file")
+        # Print a snippet of the file to see what's there
+        print("\nSVG content snippet:")
+        lines = content.split('\n')
+        for i, line in enumerate(lines):
+            if 'annotationbbox' in line.lower() or 'image' in line.lower():
+                start = max(0, i-2)
+                end = min(len(lines), i+3)
+                print('\n'.join(lines[start:end]))
+                break
\ No newline at end of file
diff --git a/test_output.svg b/test_output.svg
new file mode 100644
index 0000000000..2a7ecee902
Binary files /dev/null and b/test_output.svg differ
