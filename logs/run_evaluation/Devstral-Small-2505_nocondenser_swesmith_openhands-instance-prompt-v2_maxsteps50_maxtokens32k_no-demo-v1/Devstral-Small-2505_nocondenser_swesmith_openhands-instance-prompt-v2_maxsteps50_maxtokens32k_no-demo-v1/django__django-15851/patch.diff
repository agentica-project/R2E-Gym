diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py
index 4c9bd63546..3b5ddafaca 100644
--- a/django/db/backends/postgresql/client.py
+++ b/django/db/backends/postgresql/client.py
@@ -32,9 +32,9 @@ class DatabaseClient(BaseDatabaseClient):
             args += ["-h", host]
         if port:
             args += ["-p", str(port)]
+        args.extend(parameters)
         if dbname:
             args += [dbname]
-        args.extend(parameters)
 
         env = {}
         if passwd:
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..38d26e75c5
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,20 @@
+import sys
+from django.db.backends.postgresql.client import DatabaseClient
+
+# Simulate the settings and parameters
+settings_dict = {
+    "NAME": "test_db",
+    "USER": "test_user",
+    "HOST": "localhost",
+    "PORT": "5432",
+    "PASSWORD": "test_password",
+}
+parameters = ["-c", "select * from some_table;"]
+
+# Get the command line arguments
+args, env = DatabaseClient.settings_to_cmd_args_env(settings_dict, parameters)
+
+print("Command line arguments after fix:")
+print(args)
+print("\nVerification: The database name 'test_db' is now placed after the additional parameters '-c' and 'select * from some_table;',")
+print("which should allow psql to properly process these parameters.")
\ No newline at end of file
diff --git a/verify_fix.py b/verify_fix.py
new file mode 100644
index 0000000000..83d3120598
--- /dev/null
+++ b/verify_fix.py
@@ -0,0 +1,30 @@
+import unittest
+from django.db.backends.postgresql.client import DatabaseClient
+
+class PostgreSQLDbshellTest(unittest.TestCase):
+    def test_parameters_order(self):
+        """Test that additional parameters are placed before the database name."""
+        settings_dict = {
+            "NAME": "test_db",
+            "USER": "test_user",
+            "HOST": "localhost",
+            "PORT": "5432",
+        }
+        parameters = ["-c", "select * from some_table;"]
+
+        args, env = DatabaseClient.settings_to_cmd_args_env(settings_dict, parameters)
+
+        # Check that the arguments are in the correct order
+        self.assertEqual(args[0], "psql")  # Executable name
+        self.assertIn("-U", args)  # User option
+        self.assertIn("-h", args)  # Host option
+        self.assertIn("-p", args)  # Port option
+        self.assertIn("-c", args)  # Command option
+        self.assertIn("select * from some_table;", args)  # Command argument
+        self.assertEqual(args[-1], "test_db")  # Database name at the end
+
+        # Print the arguments for verification
+        print("Command line arguments:", args)
+
+if __name__ == "__main__":
+    unittest.main()
\ No newline at end of file
