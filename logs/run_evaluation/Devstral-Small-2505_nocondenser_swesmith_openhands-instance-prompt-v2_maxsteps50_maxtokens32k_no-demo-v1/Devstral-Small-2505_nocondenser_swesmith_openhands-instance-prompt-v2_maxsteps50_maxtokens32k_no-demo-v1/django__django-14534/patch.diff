diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py
index 2ff8b0ee26..c93959b1e3 100644
--- a/django/forms/boundfield.py
+++ b/django/forms/boundfield.py
@@ -277,7 +277,7 @@ class BoundWidget:
 
     @property
     def id_for_label(self):
-        return 'id_%s_%s' % (self.data['name'], self.data['index'])
+        return self.data['attrs']['id']
 
     @property
     def choice_label(self):
diff --git a/test_bound_widget_id.py b/test_bound_widget_id.py
new file mode 100644
index 0000000000..14d567ef17
--- /dev/null
+++ b/test_bound_widget_id.py
@@ -0,0 +1,33 @@
+import os
+import unittest
+from django import forms
+import django
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+django.setup()
+
+class TestBoundWidgetIdForLabel(unittest.TestCase):
+    def test_id_for_label_uses_attrs_id(self):
+        """Test that BoundWidget.id_for_label uses the ID from attrs."""
+        class TestForm(forms.Form):
+            CHOICES = [
+                ('option1', 'Option 1'),
+                ('option2', 'Option 2'),
+            ]
+            checkboxes = forms.MultipleChoiceField(
+                choices=CHOICES,
+                widget=forms.CheckboxSelectMultiple(attrs={'class': 'custom-class'})
+            )
+
+        # Create a form instance with custom auto_id
+        form = TestForm(auto_id='custom_%s')
+
+        # Check that the ID from id_for_label matches the ID from attrs
+        for widget in form['checkboxes']:
+            input_id = widget.data.get('attrs', {}).get('id')
+            label_for = widget.id_for_label
+            self.assertEqual(label_for, input_id,
+                            f"ID mismatch: {label_for} != {input_id}")
+
+if __name__ == '__main__':
+    unittest.main()
\ No newline at end of file
diff --git a/test_checkbox_id.py b/test_checkbox_id.py
new file mode 100644
index 0000000000..9f487d9d82
--- /dev/null
+++ b/test_checkbox_id.py
@@ -0,0 +1,45 @@
+import django
+from django import forms
+import os
+import sys
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+django.setup()
+
+class TestForm(forms.Form):
+    CHOICES = [
+        ('option1', 'Option 1'),
+        ('option2', 'Option 2'),
+        ('option3', 'Option 3'),
+    ]
+    checkboxes = forms.MultipleChoiceField(
+        choices=CHOICES,
+        widget=forms.CheckboxSelectMultiple(attrs={'class': 'custom-class'})
+    )
+
+# Create a form instance with custom auto_id
+form = TestForm(auto_id='custom_%s')
+
+# Print the rendered form to see the IDs
+print("Rendering form with custom auto_id:")
+print(form['checkboxes'])
+
+# Now let's inspect the subwidgets and their IDs
+print("\nInspecting subwidgets:")
+for i, widget in enumerate(form['checkboxes']):
+    print(f"Subwidget {i}:")
+    print(f"  ID from attrs: {widget.data.get('attrs', {}).get('id', 'None')}")
+    print(f"  ID from id_for_label: {widget.id_for_label}")
+    print(f"  Name: {widget.data.get('name')}")
+    print(f"  Index: {widget.data.get('index')}")
+
+# Let's also check if the label's 'for' attribute matches the input's 'id'
+print("\nChecking label 'for' attribute vs input 'id':")
+for i, widget in enumerate(form['checkboxes']):
+    input_id = widget.data.get('attrs', {}).get('id')
+    label_for = widget.id_for_label
+    print(f"Subwidget {i}:")
+    print(f"  Input ID: {input_id}")
+    print(f"  Label 'for': {label_for}")
+    print(f"  Match: {input_id == label_for}")
\ No newline at end of file
