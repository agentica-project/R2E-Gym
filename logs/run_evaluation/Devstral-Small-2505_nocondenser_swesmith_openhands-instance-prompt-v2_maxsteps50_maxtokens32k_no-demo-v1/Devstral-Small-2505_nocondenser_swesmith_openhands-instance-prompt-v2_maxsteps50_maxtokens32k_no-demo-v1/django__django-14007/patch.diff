diff --git a/django/db/models/base.py b/django/db/models/base.py
index 55b1691166..85e16f2ad9 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -872,6 +872,10 @@ class Model(metaclass=ModelBase):
             results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)
             if results:
                 for value, field in zip(results[0], returning_fields):
+                    # Apply database converters including from_db_value
+                    converters = field.get_db_converters(self._state.db)
+                    for converter in converters:
+                        value = converter(value, None, self._state.db)
                     setattr(self, field.attname, value)
         return updated
 
diff --git a/django/db/models/query.py b/django/db/models/query.py
index 387deca527..08f1d07146 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -505,6 +505,10 @@ class QuerySet:
                 for obj_with_pk, results in zip(objs_with_pk, returned_columns):
                     for result, field in zip(results, opts.db_returning_fields):
                         if field != opts.pk:
+                            # Apply database converters including from_db_value
+                            converters = field.get_db_converters(obj_with_pk._state.db)
+                            for converter in converters:
+                                result = converter(result, None, obj_with_pk._state.db)
                             setattr(obj_with_pk, field.attname, result)
                 for obj_with_pk in objs_with_pk:
                     obj_with_pk._state.adding = False
@@ -518,6 +522,10 @@ class QuerySet:
                     assert len(returned_columns) == len(objs_without_pk)
                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
                     for result, field in zip(results, opts.db_returning_fields):
+                        # Apply database converters including from_db_value
+                        converters = field.get_db_converters(obj_without_pk._state.db)
+                        for converter in converters:
+                            result = converter(result, field, obj_without_pk._state.db, obj_without_pk.__class__)
                         setattr(obj_without_pk, field.attname, result)
                     obj_without_pk._state.adding = False
                     obj_without_pk._state.db = self.db
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..dfb0b0532e
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,84 @@
+import os
+import sys
+import django
+from django.db import models
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+        ],
+    )
+    django.setup()
+
+# Define a wrapper class for the test
+class MyIntWrapper:
+    def __init__(self, value):
+        self.value = value
+
+    def __str__(self):
+        return f"<MyIntWrapper: {self.value}>"
+
+    def __int__(self):
+        return self.value
+
+# Define a custom field
+class MyAutoField(models.BigAutoField):
+    def from_db_value(self, value, expression, connection):
+        if value is None:
+            return None
+        return MyIntWrapper(value)
+
+    def get_prep_value(self, value):
+        if value is None:
+            return None
+        return int(value)
+
+# Define a model that uses the custom field
+class AutoModel(models.Model):
+    id = MyAutoField(primary_key=True)
+
+    class Meta:
+        app_label = 'reproduce_issue'
+
+# Create the tables
+from django.db import connection
+connection.cursor().execute("""
+    CREATE TABLE IF NOT EXISTS reproduce_issue_automodel (
+        id INTEGER PRIMARY KEY AUTOINCREMENT
+    )
+""")
+
+# Test the issue
+def test_autofield_conversion():
+    # Create an instance
+    am = AutoModel.objects.create()
+
+    # Print the type and value of the id
+    print("After create():")
+    print(f"  Type of id: {type(am.id)}")
+    print(f"  Value of id: {am.id}")
+
+    # Get the same instance via query
+    am2 = AutoModel.objects.get(id=am.id)
+    print("\nAfter query:")
+    print(f"  Type of id: {type(am2.id)}")
+    print(f"  Value of id: {am2.id}")
+
+    # Test bulk_create
+    ams = [AutoModel()]
+    AutoModel.objects.bulk_create(ams)
+    print("\nAfter bulk_create:")
+    print(f"  Type of id: {type(ams[0].id)}")
+    print(f"  Value of id: {ams[0].id}")
+
+if __name__ == "__main__":
+    test_autofield_conversion()
\ No newline at end of file
