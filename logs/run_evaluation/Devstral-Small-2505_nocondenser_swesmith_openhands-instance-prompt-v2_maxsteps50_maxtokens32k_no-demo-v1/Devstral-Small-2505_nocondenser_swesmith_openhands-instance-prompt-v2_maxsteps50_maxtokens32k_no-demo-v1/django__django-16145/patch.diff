diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py
index 3c39f57e4d..c26d8a1ada 100644
--- a/django/core/management/commands/runserver.py
+++ b/django/core/management/commands/runserver.py
@@ -147,7 +147,8 @@ class Command(BaseCommand):
                 "version": self.get_version(),
                 "settings": settings.SETTINGS_MODULE,
                 "protocol": self.protocol,
-                "addr": "[%s]" % self.addr if self._raw_ipv6 else self.addr,
+                # Convert '0' to '0.0.0.0' for display purposes
+                "addr": "[%s]" % self.addr if self._raw_ipv6 else ('0.0.0.0' if self.addr == '0' else self.addr),
                 "port": self.port,
                 "quit_command": quit_command,
             }
diff --git a/test_runserver_address.py b/test_runserver_address.py
new file mode 100644
index 0000000000..4f4ebb0559
--- /dev/null
+++ b/test_runserver_address.py
@@ -0,0 +1,50 @@
+#!/usr/bin/env python
+import sys
+import os
+from io import StringIO
+from django.conf import settings
+
+# Configure settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        ALLOWED_HOSTS=['*'],
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+    )
+
+def test_display_address():
+    # Current display logic from runserver.py
+    def get_display_addr_current(addr, raw_ipv6):
+        return "[%s]" % addr if raw_ipv6 else addr
+
+    # Fixed display logic
+    def get_display_addr_fixed(addr, raw_ipv6):
+        # Convert '0' to '0.0.0.0' for display
+        if addr == '0':
+            addr = '0.0.0.0'
+        return "[%s]" % addr if raw_ipv6 else addr
+
+    # Test cases
+    test_cases = [
+        ("", False, "Default (empty) address"),
+        ("127.0.0.1", False, "Default IPv4 address"),
+        ("0", False, "Address '0'"),
+        ("0.0.0.0", False, "Address '0.0.0.0'"),
+        ("::1", True, "IPv6 address"),
+    ]
+
+    print("CURRENT IMPLEMENTATION:")
+    for addr, raw_ipv6, desc in test_cases:
+        display_addr = get_display_addr_current(addr, raw_ipv6)
+        print(f"{desc}: {display_addr}")
+
+    print("\nFIXED IMPLEMENTATION:")
+    for addr, raw_ipv6, desc in test_cases:
+        display_addr = get_display_addr_fixed(addr, raw_ipv6)
+        print(f"{desc}: {display_addr}")
+
+if __name__ == "__main__":
+    test_display_address()
\ No newline at end of file
diff --git a/test_runserver_fix.py b/test_runserver_fix.py
new file mode 100644
index 0000000000..11341993b1
--- /dev/null
+++ b/test_runserver_fix.py
@@ -0,0 +1,54 @@
+#!/usr/bin/env python
+import sys
+import os
+from io import StringIO
+from django.conf import settings
+
+# Configure settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        ALLOWED_HOSTS=['*'],
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+    )
+
+def test_runserver_display():
+    # Test the display logic directly
+    def get_display_addr(addr, raw_ipv6):
+        # Convert '0' to '0.0.0.0' for display purposes
+        if addr == '0':
+            addr = '0.0.0.0'
+        return "[%s]" % addr if raw_ipv6 else addr
+
+    # Test cases
+    test_cases = [
+        # Empty address
+        ("", "", "Empty address"),
+        # Address '0' should display as '0.0.0.0'
+        ("0", "0.0.0.0", "Address '0'"),
+        # Address '0.0.0.0' should remain '0.0.0.0'
+        ("0.0.0.0", "0.0.0.0", "Address '0.0.0.0'"),
+        # Regular address should remain unchanged
+        ("127.0.0.1", "127.0.0.1", "Address '127.0.0.1'"),
+        # IPv6 address
+        ("::1", "[::1]", "IPv6 address (raw_ipv6=True)"),
+    ]
+
+    # Test the display logic directly
+    for addr, expected_display, desc in test_cases:
+        is_ipv6 = desc.endswith("(raw_ipv6=True)")
+        raw_ipv6 = is_ipv6
+
+        # Get the display address using the same logic as in runserver.py
+        display_addr = get_display_addr(addr, raw_ipv6)
+
+        print(f"{desc}: Expected: {expected_display}, Actual: {display_addr}")
+        assert display_addr == expected_display, f"Expected {expected_display}, got {display_addr}"
+
+    print("All tests passed!")
+
+if __name__ == "__main__":
+    test_runserver_display()
\ No newline at end of file
diff --git a/test_runserver_integration.py b/test_runserver_integration.py
new file mode 100644
index 0000000000..49c4f2fa29
--- /dev/null
+++ b/test_runserver_integration.py
@@ -0,0 +1,132 @@
+#!/usr/bin/env python
+import os
+import sys
+import re
+import subprocess
+import time
+from django.conf import settings
+
+# Configure settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        ALLOWED_HOSTS=['*'],
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+    )
+
+def test_runserver_integration():
+    """
+    Test the runserver command with different address configurations.
+    This test runs the actual runserver command in a subprocess and checks the output.
+    """
+    # Create a simple Django project
+    os.makedirs("test_project", exist_ok=True)
+    with open("test_project/__init__.py", "w") as f:
+        f.write("")
+    with open("test_project/settings.py", "w") as f:
+        f.write("""
+import os
+DEBUG = True
+ALLOWED_HOSTS = ['*']
+INSTALLED_APPS = [
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+]
+SECRET_KEY = 'dummy'
+""")
+    with open("test_project/urls.py", "w") as f:
+        f.write("""
+from django.urls import path
+from django.http import HttpResponse
+
+def index(request):
+    return HttpResponse("Hello, world!")
+
+urlpatterns = [
+    path('', index),
+]
+""")
+    with open("test_project/wsgi.py", "w") as f:
+        f.write("""
+import os
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')
+application = get_wsgi_application()
+""")
+
+    # Test cases
+    test_cases = [
+        ("", "127.0.0.1", "Default address"),
+        ("0:8001", "0.0.0.0", "Address '0'"),
+        ("0.0.0.0:8002", "0.0.0.0", "Address '0.0.0.0'"),
+        ("127.0.0.1:8003", "127.0.0.1", "Address '127.0.0.1'"),
+    ]
+
+    for addrport, expected_addr, desc in test_cases:
+        # Start the server in a subprocess
+        cmd = [sys.executable, "manage.py", "runserver", addrport]
+        port = addrport.split(':')[1] if ':' in addrport else "8000"
+
+        # Run the server in a subprocess and capture the output
+        proc = subprocess.Popen(
+            cmd,
+            stdout=subprocess.PIPE,
+            stderr=subprocess.PIPE,
+            cwd="test_project"
+        )
+
+        # Give the server time to start
+        time.sleep(1)
+
+        # Kill the server
+        proc.terminate()
+        proc.wait(timeout=5)
+
+        # Get the output
+        stdout = proc.stdout.read().decode('utf-8')
+        stderr = proc.stderr.read().decode('utf-8')
+
+        # Extract the address from the output
+        match = re.search(r'Starting development server at http://([^:]+):\d+/', stdout)
+        if match:
+            actual_addr = match.group(1)
+            print(f"{desc}: Expected: {expected_addr}, Actual: {actual_addr}")
+            assert actual_addr == expected_addr, f"Expected {expected_addr}, got {actual_addr}"
+        else:
+            print(f"{desc}: Could not find address in output")
+            print(f"Output: {stdout}")
+            assert False, "Could not find address in output"
+
+    print("All tests passed!")
+
+if __name__ == "__main__":
+    # Create manage.py
+    with open("test_project/manage.py", "w") as f:
+        f.write("""
+#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == "__main__":
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_project.settings")
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+""")
+
+    # Create __init__.py in the current directory
+    with open("__init__.py", "w") as f:
+        f.write("")
+
+    # Run the tests
+    test_runserver_integration()
\ No newline at end of file
diff --git a/test_runserver_output.py b/test_runserver_output.py
new file mode 100644
index 0000000000..760e860c92
--- /dev/null
+++ b/test_runserver_output.py
@@ -0,0 +1,73 @@
+#!/usr/bin/env python
+import sys
+import os
+import re
+from io import StringIO
+from django.conf import settings
+from django.core.management.commands.runserver import Command
+
+# Configure settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        ALLOWED_HOSTS=['*'],
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+    )
+
+def test_runserver_output():
+    # Test the display logic directly
+    test_cases = [
+        ("", "127.0.0.1", "Default address"),
+        ("0:8000", "0.0.0.0", "Address '0'"),
+        ("0.0.0.0:8000", "0.0.0.0", "Address '0.0.0.0'"),
+        ("127.0.0.1:8000", "127.0.0.1", "Address '127.0.0.1'"),
+    ]
+
+    for addrport, expected_addr, desc in test_cases:
+        # Create a command instance
+        cmd = Command(stdout=StringIO())
+
+        # Manually set up the command as if handle() was called
+        if addrport:
+            # Parse the address and port
+            if ':' in addrport:
+                addr, port = addrport.split(':', 1)
+            else:
+                addr, port = '', addrport
+
+            cmd.addr = addr
+            cmd.port = port
+            cmd.use_ipv6 = False
+            cmd._raw_ipv6 = False
+
+            # If addr is empty, it will be set to default_addr
+            if not addr:
+                cmd.addr = cmd.default_addr
+        else:
+            # Default case
+            cmd.addr = cmd.default_addr
+            cmd.port = cmd.default_port
+            cmd.use_ipv6 = False
+            cmd._raw_ipv6 = False
+
+        # Run the command's run method to generate output
+        cmd.run(use_reloader=False, use_threading=False, skip_checks=True)
+
+        # Get the output
+        output = cmd.stdout.getvalue()
+
+        # Extract the address from the output
+        match = re.search(r'Starting development server at http://([^:]+):\d+/', output)
+        if match:
+            actual_addr = match.group(1)
+            print(f"{desc}: Expected: {expected_addr}, Actual: {actual_addr}")
+            assert actual_addr == expected_addr, f"Expected {expected_addr}, got {actual_addr}"
+        else:
+            print(f"{desc}: Could not find address in output")
+            print(f"Output: {output}")
+
+if __name__ == "__main__":
+    test_runserver_output()
\ No newline at end of file
