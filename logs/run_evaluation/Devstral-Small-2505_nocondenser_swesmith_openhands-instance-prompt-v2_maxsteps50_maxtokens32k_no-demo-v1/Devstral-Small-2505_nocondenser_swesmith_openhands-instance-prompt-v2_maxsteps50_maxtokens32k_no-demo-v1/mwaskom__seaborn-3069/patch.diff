diff --git a/before_fix.png b/before_fix.png
new file mode 100644
index 00000000..902daca6
Binary files /dev/null and b/before_fix.png differ
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..e00ea3e3
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,38 @@
+import matplotlib.pyplot as plt
+import seaborn as sns
+import pandas as pd
+import numpy as np
+
+# Create sample data
+np.random.seed(42)
+data = pd.DataFrame({
+    'category': ['A', 'B', 'C', 'D'],
+    'value': np.random.rand(4)
+})
+
+# Create a figure with 3 subplots
+fig, axes = plt.subplots(3, 1, figsize=(8, 12))
+
+# Plot 1: Categorical scale (should have the desired behavior)
+sns.barplot(x='category', y='value', data=data, ax=axes[0])
+axes[0].set_title('Categorical Scale')
+
+# Plot 2: Nominal scale (current behavior)
+sns.barplot(x='category', y='value', data=data, ax=axes[1])
+# Explicitly set scale to Nominal (this is normally inferred)
+axes[1].set_title('Nominal Scale (current)')
+
+# Plot 3: We'll modify this later to test our fix
+sns.barplot(x='category', y='value', data=data, ax=axes[2])
+axes[2].set_title('Nominal Scale (fixed)')
+
+# Adjust layout
+plt.tight_layout()
+plt.savefig('before_fix.png')
+plt.close()
+
+# Print observations about the differences
+print("Observations:")
+print("1. Check if the x-axis limits extend ±0.5 from the first/last tick")
+print("2. Check if grids are shown (they shouldn't be for categorical axes)")
+print("3. Check if the y-axis is inverted when on the y-axis")
\ No newline at end of file
diff --git a/seaborn/_core/plot.py b/seaborn/_core/plot.py
index 4f0290a4..ea2ca1c9 100644
--- a/seaborn/_core/plot.py
+++ b/seaborn/_core/plot.py
@@ -1644,6 +1644,24 @@ class Plotter:
                         hi = cast(float, hi) + 0.5
                     ax.set(**{f"{axis}lim": (lo, hi)})
 
+                # Handle Nominal scale adjustments (similar to categorical)
+                scale_obj = p._scales.get(axis_key)
+                if scale_obj is not None and scale_obj.__class__.__name__ == "Nominal" and hasattr(scale_obj, "_axis_info"):
+                    axis_info = scale_obj._axis_info
+                    axis_obj = axis_info["axis"]
+
+                    # Only apply if it's a real matplotlib axis (not PseudoAxis)
+                    if hasattr(ax, f"{axis}axis"):
+                        # Disable grid for Nominal scales (like categorical)
+                        getattr(ax, f"{axis}axis").grid(False)
+
+                        # Set limits with ±0.5 extension (like categorical)
+                        if axis == "x":
+                            ax.set_xlim(-0.5, axis_info["n"] - 0.5, auto=None)
+                        else:
+                            # Invert y-axis for Nominal scales (like categorical)
+                            ax.set_ylim(axis_info["n"] - 0.5, -0.5, auto=None)
+
         engine_default = None if p._target is not None else "tight"
         layout_engine = p._layout_spec.get("engine", engine_default)
         set_layout_engine(self._figure, layout_engine)
diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py
index bbd71ec1..c774ca3f 100644
--- a/seaborn/_core/scales.py
+++ b/seaborn/_core/scales.py
@@ -199,6 +199,13 @@ class Nominal(Scale):
         # (i.e. if we have [1, 2.5], do we want [1.0, 2.5]? Unclear)
         axis.update_units(stringify(np.array(units_seed)))
 
+        # Store the axis information for later use in adjusting the axis
+        new._axis_info = {
+            "axis": axis,
+            "n": len(units_seed),
+            "is_y_axis": prop.name == "y"
+        }
+
         # TODO define this more centrally
         def convert_units(x):
             # TODO only do this with explicit order?
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 00000000..b2a041da
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,50 @@
+import matplotlib.pyplot as plt
+import seaborn as sns
+import pandas as pd
+import numpy as np
+from seaborn._core.scales import Nominal
+from seaborn._core.properties import Coordinate
+
+# Create sample data
+np.random.seed(42)
+data = pd.DataFrame({
+    'category': ['A', 'B', 'C', 'D'],
+    'value': np.random.rand(4)
+})
+
+# Create a figure with 3 subplots
+fig, axes = plt.subplots(3, 1, figsize=(8, 12))
+
+# Plot 1: Categorical scale (should have the desired behavior)
+sns.barplot(x='category', y='value', data=data, ax=axes[0])
+axes[0].set_title('Categorical Scale')
+
+# Plot 2: Nominal scale (current behavior)
+plot2 = sns.barplot(x='category', y='value', data=data, ax=axes[1])
+# Explicitly set scale to Nominal (this is normally inferred)
+axes[1].set_title('Nominal Scale (current)')
+
+# Plot 3: Nominal scale with our fix
+plot3 = sns.barplot(x='category', y='value', data=data, ax=axes[2])
+# Force using Nominal scale
+plot3._scales['x'] = Nominal()._setup(data['category'], Coordinate())
+axes[2].set_title('Nominal Scale (fixed)')
+
+# Adjust layout
+plt.tight_layout()
+plt.savefig('after_fix.png')
+plt.close()
+
+# Print observations about the differences
+print("Observations:")
+print("1. Check if the x-axis limits extend ±0.5 from the first/last tick")
+print("2. Check if grids are shown (they shouldn't be for categorical axes)")
+print("3. Check if the y-axis is inverted when on the y-axis")
+
+# Now create a plot with y-axis as categorical to test y-axis inversion
+fig, ax = plt.subplots(figsize=(8, 6))
+sns.barplot(x='value', y='category', data=data, ax=ax)
+ax.set_title('Y-axis as Nominal Scale')
+plt.tight_layout()
+plt.savefig('y_axis_fix.png')
+plt.close()
\ No newline at end of file
