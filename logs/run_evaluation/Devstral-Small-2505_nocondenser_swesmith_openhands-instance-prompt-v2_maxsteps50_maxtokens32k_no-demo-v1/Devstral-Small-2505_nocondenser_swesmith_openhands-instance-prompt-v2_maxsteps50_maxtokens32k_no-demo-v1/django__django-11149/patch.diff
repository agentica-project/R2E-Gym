diff --git a/test_m2m_inline_permissions.py b/test_m2m_inline_permissions.py
new file mode 100644
index 0000000000..c4a8dff555
--- /dev/null
+++ b/test_m2m_inline_permissions.py
@@ -0,0 +1,124 @@
+import unittest
+from django.contrib.auth.models import User, Permission
+from django.contrib.contenttypes.models import ContentType
+from django.test import TestCase, override_settings
+from django.urls import path, reverse
+from django.db import models
+from django.contrib.admin import site as admin_site
+from django.contrib import admin
+from django.http import HttpRequest
+
+# Create a simple URLconf for admin
+def get_admin_urls():
+    return [
+        path('admin/', admin.site.urls),
+    ]
+
+# Define test models
+class Photo(models.Model):
+    name = models.CharField(max_length=100)
+
+    def __str__(self):
+        return self.name
+
+    class Meta:
+        app_label = 'test_app'
+        verbose_name = 'photo'
+        verbose_name_plural = 'photos'
+
+class Report(models.Model):
+    title = models.CharField(max_length=100)
+    photos = models.ManyToManyField(Photo)
+
+    def __str__(self):
+        return self.title
+
+    class Meta:
+        app_label = 'test_app'
+        verbose_name = 'report'
+        verbose_name_plural = 'reports'
+
+# Define admin classes
+class ReportPhotoInlineModelAdmin(admin.TabularInline):
+    model = Report.photos.through
+    show_change_link = True
+
+class PhotoAdmin(admin.ModelAdmin):
+    inlines = [ReportPhotoInlineModelAdmin]
+
+class ReportAdmin(admin.ModelAdmin):
+    pass
+
+# Register models with admin
+admin_site.unregister(Photo)
+admin_site.register(Photo, PhotoAdmin)
+admin_site.unregister(Report)
+admin_site.register(Report, ReportAdmin)
+
+class ManyToManyInlinePermissionsTest(TestCase):
+    """Test that users with only view permissions can't modify m2m inlines."""
+
+    def setUp(self):
+        # Create a photo and report
+        self.photo = Photo.objects.create(name="Test Photo")
+        self.report = Report.objects.create(title="Test Report")
+        self.report.photos.add(self.photo)
+
+        # Create a user with only view permissions
+        self.user = User.objects.create_user('view_user', 'view@example.com', 'password')
+        photo_perm = Permission.objects.get(
+            codename='view_photo',
+            content_type=ContentType.objects.get_for_model(Photo)
+        )
+        report_perm = Permission.objects.get(
+            codename='view_report',
+            content_type=ContentType.objects.get_for_model(Report)
+        )
+        self.user.user_permissions.add(photo_perm, report_perm)
+
+        # Create a user with change permissions
+        self.change_user = User.objects.create_user('change_user', 'change@example.com', 'password')
+        photo_change_perm = Permission.objects.get(
+            codename='change_photo',
+            content_type=ContentType.objects.get_for_model(Photo)
+        )
+        report_change_perm = Permission.objects.get(
+            codename='change_report',
+            content_type=ContentType.objects.get_for_model(Report)
+        )
+        self.change_user.user_permissions.add(photo_change_perm, report_change_perm)
+
+    def test_view_user_cannot_add_m2m(self):
+        """Test that a user with only view permissions cannot add m2m relationships."""
+        self.client.login(username='view_user', password='password')
+        response = self.client.get(reverse('admin:app_label_photo_change', args=[self.photo.id]))
+        # Check that the user can view the page
+        self.assertEqual(response.status_code, 200)
+
+        # Check that the form doesn't have add/delete functionality
+        self.assertNotContains(response, 'name="_save"')
+        self.assertNotContains(response, 'name="_continue"')
+        self.assertNotContains(response, 'name="_addanother"')
+
+    def test_change_user_can_add_m2m(self):
+        """Test that a user with change permissions can add m2m relationships."""
+        self.client.login(username='change_user', password='password')
+        response = self.client.get(reverse('admin:app_label_photo_change', args=[self.photo.id]))
+        # Check that the user can view the page
+        self.assertEqual(response.status_code, 200)
+
+        # Check that the form has add/delete functionality
+        self.assertContains(response, 'name="_save"')
+        self.assertContains(response, 'name="_continue"')
+        self.assertContains(response, 'name="_addanother"')
+
+@override_settings(
+    ROOT_URLCONF='test_m2m_inline_permissions',
+    INSTALLED_APPS=[
+        'django.contrib.admin',
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+        'django.contrib.sessions',
+        'django.contrib.messages',
+    ],
+)
\ No newline at end of file
