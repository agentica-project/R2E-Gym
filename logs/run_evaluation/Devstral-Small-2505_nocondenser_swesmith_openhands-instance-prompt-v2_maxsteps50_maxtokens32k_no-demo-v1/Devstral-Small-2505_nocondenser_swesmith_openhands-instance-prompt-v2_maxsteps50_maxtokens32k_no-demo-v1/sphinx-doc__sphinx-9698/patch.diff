diff --git a/setup.py b/setup.py
index 3dbc8746b..31bd48c0a 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 6):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp>=2.0.0',
-    'sphinxcontrib-serializinghtml>=1.1.5',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp>=2.0.0,<=2.0.4',
+    'sphinxcontrib-serializinghtml>=1.1.5,<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.14,<0.18',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/test_property_index.py b/test_property_index.py
new file mode 100755
index 000000000..5641feacd
--- /dev/null
+++ b/test_property_index.py
@@ -0,0 +1,105 @@
+#!/usr/bin/env python3
+"""
+Test script to reproduce the issue with py:method directive with :property: option.
+"""
+
+import os
+import tempfile
+import shutil
+import subprocess
+
+# Create a temporary directory for the test
+temp_dir = tempfile.mkdtemp()
+try:
+    # Create a simple Sphinx project
+    os.makedirs(os.path.join(temp_dir, 'doc'))
+
+    # Create conf.py
+    with open(os.path.join(temp_dir, 'doc', 'conf.py'), 'w') as f:
+        f.write("""
+import os
+import sys
+sys.path.insert(0, os.path.abspath('..'))
+
+extensions = ['sphinx.ext.autodoc']
+""")
+
+    # Create index.rst
+    with open(os.path.join(temp_dir, 'doc', 'index.rst'), 'w') as f:
+        f.write("""
+.. toctree::
+   :maxdepth: 2
+   :caption: Contents:
+
+.. py:method:: Foo.bar
+   :property:
+
+.. py:property:: Foo.baz
+
+.. py:method:: Foo.qux
+""")
+
+    # Run sphinx-build to generate the documentation
+    os.chdir(os.path.join(temp_dir, 'doc'))
+    subprocess.run(['sphinx-build', '-M', 'html', '.', '_build'], check=True)
+
+    # Check the generated index entries
+    index_file = os.path.join(temp_dir, 'doc', '_build', 'html', 'genindex.html')
+    if os.path.exists(index_file):
+        with open(index_file, 'r') as f:
+            content = f.read()
+            print("Generated index file content:")
+            print("=" * 50)
+            print(content)
+            print("=" * 50)
+
+            # Check for the issue in the HTML content
+            # Look for the index entries in the content
+            import re
+
+            # Extract all dt elements which contain the index entries
+            dt_elements = re.findall(r'<dt>(.*?)</dt>', content, re.DOTALL)
+
+            print("Found index entries:")
+            print("-" * 50)
+            for dt in dt_elements:
+                if "Foo" in dt:
+                    print(dt.strip())
+            print("-" * 50)
+
+            # Check for specific entries
+            if any("Foo.bar()" in dt for dt in dt_elements):
+                print("ISSUE CONFIRMED: py:method with :property: option has parentheses in index entry")
+            elif any("Foo.bar" in dt and "Foo.bar()" not in dt for dt in dt_elements):
+                print("No issue: Foo.bar doesn't have parentheses")
+            else:
+                print("Could not determine Foo.bar format")
+
+            if any("Foo.baz" in dt for dt in dt_elements):
+                print(f"Found Foo.baz entry")
+            else:
+                print("Foo.baz entry not found")
+
+            if any("Foo.qux()" in dt for dt in dt_elements):
+                print(f"Found Foo.qux() entry (with parentheses as expected)")
+            else:
+                print("Foo.qux entry not found or unexpected format")
+
+            # Also check the generated HTML files for the entries
+            html_file = os.path.join(temp_dir, 'doc', '_build', 'html', 'index.html')
+            if os.path.exists(html_file):
+                with open(html_file, 'r') as f:
+                    html_content = f.read()
+                    print("\nChecking index.html for entries:")
+                    if "Foo.bar()" in html_content:
+                        print("ISSUE CONFIRMED in index.html: py:method with :property: option has parentheses")
+                    elif "Foo.bar" in html_content and "Foo.bar()" not in html_content:
+                        print("No issue in index.html: Foo.bar doesn't have parentheses")
+                    else:
+                        print("Could not determine Foo.bar format in index.html")
+    else:
+        print(f"Error: Index file not found at {index_file}")
+
+finally:
+    # Clean up
+    shutil.rmtree(temp_dir)
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index 00c8e13bd..11d3352df 100644
--- a/tox.ini
+++ b/tox.ini
@@ -22,14 +22,14 @@ deps =
     du15: docutils==0.15.*
     du16: docutils==0.16.*
     du17: docutils==0.17.*
-    py311: git+https://github.com/pytest-dev/py
+    py311: git+https://github.com/pytest -rA-dev/py
 extras =
     test
 setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:du-latest]
 commands =
