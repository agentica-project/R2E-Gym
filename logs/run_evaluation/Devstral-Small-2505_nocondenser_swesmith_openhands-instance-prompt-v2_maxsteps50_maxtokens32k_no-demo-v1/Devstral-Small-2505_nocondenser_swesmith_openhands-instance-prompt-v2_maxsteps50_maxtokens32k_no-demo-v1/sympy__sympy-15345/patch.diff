diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..3a04184075
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,6 @@
+from sympy import symbols, Max, mathematica_code
+
+x = symbols('x')
+result = mathematica_code(Max(x, 2))
+print(f"Output: {result}")
+print(f"Expected: 'Max[x, 2]'")
\ No newline at end of file
diff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py
index ea7e3a2d94..3c24363405 100644
--- a/sympy/printing/mathematica.py
+++ b/sympy/printing/mathematica.py
@@ -65,6 +65,8 @@ def __init__(self, settings={}):
 
     doprint = StrPrinter.doprint
 
+    
+
     def _print_Pow(self, expr):
         PREC = precedence(expr)
         return '%s^%s' % (self.parenthesize(expr.base, PREC),
@@ -93,7 +95,21 @@ def _print_list(self, expr):
     _print_tuple = _print_list
     _print_Tuple = _print_list
 
+    def _print_Max(self, expr):
+        """Special handling for Max function to preserve argument order."""
+        return "Max[%s]" % self.stringify(expr.args, ", ")
+
+    def _print_Min(self, expr):
+        """Special handling for Min function to preserve argument order."""
+        return "Min[%s]" % self.stringify(expr.args, ", ")
+
     def _print_Function(self, expr):
+        # Special handling for Max and Min functions
+        if expr.func.__name__ == 'Max':
+            return self._print_Max(expr)
+        elif expr.func.__name__ == 'Min':
+            return self._print_Min(expr)
+
         if expr.func.__name__ in self.known_functions:
             cond_mfunc = self.known_functions[expr.func.__name__]
             for cond, mfunc in cond_mfunc:
diff --git a/test_mathematica_max.py b/test_mathematica_max.py
new file mode 100644
index 0000000000..533ae016be
--- /dev/null
+++ b/test_mathematica_max.py
@@ -0,0 +1,26 @@
+from sympy import symbols, Max, Min, mathematica_code
+
+def test_max_function():
+    x = symbols('x')
+    result = mathematica_code(Max(x, 2))
+    expected = 'Max[x, 2]'
+    print(f"Max(x, 2) -> {result}")
+    print(f"Expected: {expected}")
+    print(f"Test passed: {result == expected}")
+
+    # Test with multiple arguments
+    result2 = mathematica_code(Max(x, 2, 5))
+    expected2 = 'Max[x, 2, 5]'
+    print(f"Max(x, 2, 5) -> {result2}")
+    print(f"Expected: {expected2}")
+    print(f"Test passed: {result2 == expected2}")
+
+    # Test Min function as well
+    result3 = mathematica_code(Min(x, 2))
+    expected3 = 'Min[x, 2]'
+    print(f"Min(x, 2) -> {result3}")
+    print(f"Expected: {expected3}")
+    print(f"Test passed: {result3 == expected3}")
+
+if __name__ == "__main__":
+    test_max_function()
\ No newline at end of file
