diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 90fc31bee5..8a5c04393b 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -170,6 +170,19 @@ class CreateModel(ModelOperation):
                     managers=self.managers,
                 ),
             ]
+        elif (
+            isinstance(operation, AlterModelManagers)
+            and self.name_lower == operation.name_lower
+        ):
+            return [
+                CreateModel(
+                    self.name,
+                    fields=self.fields,
+                    options=self.options,
+                    bases=self.bases,
+                    managers=operation.managers,
+                ),
+            ]
         elif (
             isinstance(operation, AlterTogetherOptionOperation)
             and self.name_lower == operation.name_lower
diff --git a/test_alter_model_managers.py b/test_alter_model_managers.py
new file mode 100644
index 0000000000..dc7ab910ba
--- /dev/null
+++ b/test_alter_model_managers.py
@@ -0,0 +1,66 @@
+import unittest
+from django.db import models
+from django.db.migrations.operations.models import CreateModel, AlterModelManagers, AlterModelOptions
+from django.db.migrations.optimizer import MigrationOptimizer
+
+# Mock CustomManager for testing
+class CustomManager(models.Manager):
+    pass
+
+class TestMigrationOptimizer(unittest.TestCase):
+    def test_create_model_plus_alter_model_managers(self):
+        """Test that CreateModel + AlterModelManagers is optimized to a single CreateModel."""
+        # Create a CreateModel operation
+        create_model = CreateModel(
+            name='TestModel',
+            fields=[
+                ('id', models.AutoField(primary_key=True)),
+                ('name', models.CharField(max_length=100)),
+            ],
+            options={'verbose_name': 'Test Model'},
+        )
+
+        # Create an AlterModelManagers operation
+        alter_managers = AlterModelManagers(
+            name='TestModel',
+            managers=[('objects', models.Manager()), ('custom', CustomManager())],
+        )
+
+        # Optimize the operations
+        optimizer = MigrationOptimizer()
+        optimized_operations = optimizer.optimize([create_model, alter_managers], 'test_app')
+
+        # Check that we got a single CreateModel operation
+        self.assertEqual(len(optimized_operations), 1)
+        self.assertIsInstance(optimized_operations[0], CreateModel)
+        self.assertEqual(optimized_operations[0].managers, alter_managers.managers)
+
+    def test_create_model_plus_alter_model_options(self):
+        """Test that CreateModel + AlterModelOptions is already optimized correctly."""
+        # Create a CreateModel operation
+        create_model = CreateModel(
+            name='TestModel',
+            fields=[
+                ('id', models.AutoField(primary_key=True)),
+                ('name', models.CharField(max_length=100)),
+            ],
+            options={'verbose_name': 'Test Model'},
+        )
+
+        # Create an AlterModelOptions operation
+        alter_options = AlterModelOptions(
+            name='TestModel',
+            options={'ordering': ['name']},
+        )
+
+        # Optimize the operations
+        optimizer = MigrationOptimizer()
+        optimized_operations = optimizer.optimize([create_model, alter_options], 'test_app')
+
+        # Check that we got a single CreateModel operation
+        self.assertEqual(len(optimized_operations), 1)
+        self.assertIsInstance(optimized_operations[0], CreateModel)
+        self.assertEqual(optimized_operations[0].options['ordering'], ['name'])
+
+if __name__ == '__main__':
+    unittest.main()
\ No newline at end of file
diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py
index 59dd401a3c..84007613a4 100644
--- a/tests/migrations/test_optimizer.py
+++ b/tests/migrations/test_optimizer.py
@@ -129,6 +129,21 @@ class OptimizerTests(SimpleTestCase):
             ],
         )
 
+    def test_create_alter_model_managers(self):
+        self.assertOptimizesTo(
+            [
+                migrations.CreateModel("Foo", fields=[]),
+                migrations.AlterModelManagers(
+                    name="Foo", managers=[("objects", models.Manager())]
+                ),
+            ],
+            [
+                migrations.CreateModel(
+                    "Foo", fields=[], managers=[("objects", models.Manager())]
+                ),
+            ],
+        )
+
     def test_create_model_and_remove_model_options(self):
         self.assertOptimizesTo(
             [
