diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..a03f4d60e5
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,17 @@
+from sympy import Symbol, Reals, Contains, Piecewise
+
+# Create a symbol
+x = Symbol('x')
+
+# Create a Contains object
+contains = Contains(x, Reals)
+
+# Try to call as_set() on it
+print("Contains.as_set() result:", contains.as_set())
+
+# Try to use it in Piecewise
+try:
+    p = Piecewise((6, Contains(x, Reals)), (7, True))
+    print("Piecewise result:", p)
+except Exception as e:
+    print("Error:", type(e).__name__, e)
\ No newline at end of file
diff --git a/sympy/sets/contains.py b/sympy/sets/contains.py
index b2d4268d12..5e3985988c 100644
--- a/sympy/sets/contains.py
+++ b/sympy/sets/contains.py
@@ -45,4 +45,17 @@ def binary_symbols(self):
             isinstance(i, (Eq, Ne))])
 
     def as_set(self):
-        raise NotImplementedError()
+        """
+        Return the set of elements that satisfy the condition.
+
+        Examples
+        ========
+
+        >>> from sympy import Symbol, Reals, Contains
+        >>> x = Symbol('x')
+        >>> Contains(x, Reals).as_set()
+        Reals
+        """
+        # Since Contains(x, S) means "x in S", the set of elements that satisfy
+        # this condition is simply S itself
+        return self.args[1]
diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py
index 1973fed19c..a792469b33 100644
--- a/sympy/sets/tests/test_contains.py
+++ b/sympy/sets/tests/test_contains.py
@@ -41,10 +41,9 @@ def test_binary_symbols():
 def test_as_set():
     x = Symbol('x')
     y = Symbol('y')
-    # Contains is a BooleanFunction whose value depends on an arg's
-    # containment in a Set -- rewriting as a Set is not yet implemented
-    raises(NotImplementedError, lambda:
-           Contains(x, FiniteSet(y)).as_set())
+    # Contains(x, S) should return S as the set of elements that satisfy the condition
+    assert Contains(x, FiniteSet(y)).as_set() == FiniteSet(y)
+    assert Contains(x, Reals).as_set() == Reals
 
 def test_type_error():
     # Pass in a parameter not of type "set"
