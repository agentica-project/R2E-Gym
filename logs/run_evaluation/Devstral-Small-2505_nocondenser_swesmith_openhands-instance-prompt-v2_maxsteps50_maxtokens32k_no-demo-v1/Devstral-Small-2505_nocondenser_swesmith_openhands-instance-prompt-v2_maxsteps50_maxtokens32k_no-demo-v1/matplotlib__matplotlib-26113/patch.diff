diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py
index 5369eadbde..46fb698522 100644
--- a/lib/matplotlib/axes/_axes.py
+++ b/lib/matplotlib/axes/_axes.py
@@ -5014,7 +5014,7 @@ default: :rc:`scatter.edgecolors`
             if mincnt is None:
                 mincnt = 0
             accum = np.array(
-                [reduce_C_function(acc) if len(acc) > mincnt else np.nan
+                [reduce_C_function(acc) if len(acc) >= mincnt else np.nan
                  for Cs_at_i in [Cs_at_i1, Cs_at_i2]
                  for acc in Cs_at_i[1:]],  # [1:] drops out-of-range points.
                 float)
diff --git a/output/mincnt0_with_C.png b/output/mincnt0_with_C.png
new file mode 100644
index 0000000000..fd4cc4fda9
Binary files /dev/null and b/output/mincnt0_with_C.png differ
diff --git a/output/mincnt1_no_C.png b/output/mincnt1_no_C.png
new file mode 100644
index 0000000000..d8f8170ed5
Binary files /dev/null and b/output/mincnt1_no_C.png differ
diff --git a/output/mincnt1_with_C.png b/output/mincnt1_with_C.png
new file mode 100644
index 0000000000..6117ac3333
Binary files /dev/null and b/output/mincnt1_with_C.png differ
diff --git a/output/no_mincnt_no_C.png b/output/no_mincnt_no_C.png
new file mode 100644
index 0000000000..1a2c8d200d
Binary files /dev/null and b/output/no_mincnt_no_C.png differ
diff --git a/output/no_mincnt_with_C.png b/output/no_mincnt_with_C.png
new file mode 100644
index 0000000000..f3ea9d9877
Binary files /dev/null and b/output/no_mincnt_with_C.png differ
diff --git a/reproduce_hexbin_issue.py b/reproduce_hexbin_issue.py
new file mode 100644
index 0000000000..eb7005dc71
--- /dev/null
+++ b/reproduce_hexbin_issue.py
@@ -0,0 +1,97 @@
+import numpy as np
+from matplotlib import pyplot as plt
+import os
+
+# Set random seed for reproducibility
+np.random.seed(42)
+
+# Create sample data
+X, Y = np.random.multivariate_normal([0.0, 0.0], [[1.0, 0.1], [0.1, 1.0]], size=250).T
+Z = np.ones_like(X)
+
+extent = [-3., 3., -3., 3.]  # doc: "Order of scalars is (left, right, bottom, top)"
+gridsize = (7, 7)  # doc: "int or (int, int), optional, default is 100"
+
+# Create output directory
+os.makedirs("output", exist_ok=True)
+
+# #### no mincnt specified, no C argument
+fig, ax = plt.subplots(1, 1, figsize=(4, 4))
+ax.hexbin(
+    X, Y,
+    extent=extent,
+    gridsize=gridsize,
+    linewidth=0.0,
+    cmap='Blues',
+)
+ax.set_facecolor("green")  # for contrast
+plt.title("No mincnt, no C")
+plt.savefig("output/no_mincnt_no_C.png")
+plt.close()
+
+# #### mincnt=1 specified, no C argument
+fig, ax = plt.subplots(1, 1, figsize=(4, 4))
+ax.hexbin(
+    X, Y,
+    mincnt=1,
+    extent=extent,
+    gridsize=gridsize,
+    linewidth=0.0,
+    cmap='Blues',
+)
+ax.set_facecolor("green")
+plt.title("mincnt=1, no C")
+plt.savefig("output/mincnt1_no_C.png")
+plt.close()
+
+# #### no mincnt specified, C argument specified
+fig, ax = plt.subplots(1, 1, figsize=(4, 4))
+ax.hexbin(
+    X, Y,
+    C=Z,
+    reduce_C_function=np.sum,
+    extent=extent,
+    gridsize=gridsize,
+    linewidth=0.0,
+    cmap='Blues',
+)
+ax.set_facecolor("green")
+plt.title("No mincnt, with C")
+plt.savefig("output/no_mincnt_with_C.png")
+plt.close()
+
+# #### mincnt=1 specified, C argument specified
+fig, ax = plt.subplots(1, 1, figsize=(4, 4))
+ax.hexbin(
+    X, Y,
+    C=Z,
+    reduce_C_function=np.sum,
+    mincnt=1,
+    extent=extent,
+    gridsize=gridsize,
+    linewidth=0.0,
+    cmap='Blues',
+)
+ax.set_facecolor("green")
+plt.title("mincnt=1, with C")
+plt.savefig("output/mincnt1_with_C.png")
+plt.close()
+
+# #### mincnt=0 specified, C argument specified
+fig, ax = plt.subplots(1, 1, figsize=(4, 4))
+ax.hexbin(
+    X, Y,
+    C=Z,
+    reduce_C_function=np.sum,
+    mincnt=0,
+    extent=extent,
+    gridsize=gridsize,
+    linewidth=0.0,
+    cmap='Blues',
+)
+ax.set_facecolor("green")
+plt.title("mincnt=0, with C")
+plt.savefig("output/mincnt0_with_C.png")
+plt.close()
+
+print("Images saved to output/ directory. Compare mincnt1_no_C.png and mincnt1_with_C.png to see the issue.")
\ No newline at end of file
diff --git a/verify_hexbin_fix.py b/verify_hexbin_fix.py
new file mode 100644
index 0000000000..9361bc655b
--- /dev/null
+++ b/verify_hexbin_fix.py
@@ -0,0 +1,42 @@
+import numpy as np
+from matplotlib import pyplot as plt
+import os
+
+# Set random seed for reproducibility
+np.random.seed(42)
+
+# Create sample data
+X, Y = np.random.multivariate_normal([0.0, 0.0], [[1.0, 0.1], [0.1, 1.0]], size=250).T
+Z = np.ones_like(X)
+
+extent = [-3., 3., -3., 3.]  # doc: "Order of scalars is (left, right, bottom, top)"
+gridsize = (7, 7)  # doc: "int or (int, int), optional, default is 100"
+
+# Create output directory
+os.makedirs("output", exist_ok=True)
+
+# Function to count hexagons in a plot
+def count_hexagons(X, Y, C=None, mincnt=None, **kwargs):
+    fig, ax = plt.subplots(1, 1, figsize=(4, 4))
+    h = ax.hexbin(X, Y, C=C, mincnt=mincnt, **kwargs)
+    count = np.sum(~np.isnan(h.get_array()))
+    plt.close()
+    return count
+
+# Count hexagons with different parameter combinations
+count_no_mincnt_no_C = count_hexagons(X, Y, extent=extent, gridsize=gridsize, cmap='Blues')
+count_mincnt1_no_C = count_hexagons(X, Y, mincnt=1, extent=extent, gridsize=gridsize, cmap='Blues')
+count_no_mincnt_with_C = count_hexagons(X, Y, C=Z, reduce_C_function=np.sum, extent=extent, gridsize=gridsize, cmap='Blues')
+count_mincnt1_with_C = count_hexagons(X, Y, C=Z, reduce_C_function=np.sum, mincnt=1, extent=extent, gridsize=gridsize, cmap='Blues')
+count_mincnt0_with_C = count_hexagons(X, Y, C=Z, reduce_C_function=np.sum, mincnt=0, extent=extent, gridsize=gridsize, cmap='Blues')
+
+# Print results
+print(f"Count with no mincnt, no C: {count_no_mincnt_no_C}")
+print(f"Count with mincnt=1, no C: {count_mincnt1_no_C}")
+print(f"Count with no mincnt, with C: {count_no_mincnt_with_C}")
+print(f"Count with mincnt=1, with C: {count_mincnt1_with_C}")
+print(f"Count with mincnt=0, with C: {count_mincnt0_with_C}")
+
+# After the fix, count_mincnt1_no_C should be equal to count_mincnt1_with_C
+print("\nVerification:")
+print(f"mincnt=1, no C == mincnt=1, with C: {count_mincnt1_no_C == count_mincnt1_with_C}")
\ No newline at end of file
