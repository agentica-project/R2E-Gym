diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..0876c8610e
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,49 @@
+import sympy as sp
+from sympy.polys.orderings import monomial_key
+
+def test_total_degree_min_max():
+    """Test itermonomials with total degree and min/max degrees."""
+    x1, x2, x3 = sp.symbols('x1, x2, x3')
+    states = [x1, x2, x3]
+
+    # Test case 1: min_degrees=0, max_degrees=2
+    min_degrees = 0
+    max_degrees = 2
+    monomials = sorted(sp.itermonomials(states, max_degrees, min_degrees=min_degrees),
+                       key=monomial_key('grlex', states))
+    expected = [1, x3, x2, x1, x3**2, x2*x3, x2**2, x1*x3, x1*x2, x1**2]
+    assert monomials == expected, f"Test case 1 failed: {monomials} != {expected}"
+
+    # Test case 2: min_degrees=1, max_degrees=2
+    min_degrees = 1
+    max_degrees = 2
+    monomials = sorted(sp.itermonomials(states, max_degrees, min_degrees=min_degrees),
+                       key=monomial_key('grlex', states))
+    expected = [x3, x2, x1, x3**2, x2*x3, x2**2, x1*x3, x1*x2, x1**2]
+    assert monomials == expected, f"Test case 2 failed: {monomials} != {expected}"
+
+    # Test case 3: min_degrees=2, max_degrees=2
+    min_degrees = 2
+    max_degrees = 2
+    monomials = sorted(sp.itermonomials(states, max_degrees, min_degrees=min_degrees),
+                       key=monomial_key('grlex', states))
+    expected = [x3**2, x2*x3, x2**2, x1*x3, x1*x2, x1**2]
+    assert monomials == expected, f"Test case 3 failed: {monomials} != {expected}"
+
+    # Test case 4: min_degrees=3, max_degrees=3
+    min_degrees = 3
+    max_degrees = 3
+    monomials = sorted(sp.itermonomials(states, max_degrees, min_degrees=min_degrees),
+                       key=monomial_key('grlex', states))
+    expected = [x3**3, x2*x3**2, x2**2*x3, x2**3, x1*x3**2, x1*x2*x3, x1*x2**2, x1**2*x3, x1**2*x2, x1**3]
+    assert monomials == expected, f"Test case 4 failed: {monomials} != {expected}"
+
+    print("All test cases passed!")
+
+# We're not testing degree list min/max cases as they're not part of the issue description
+# and would require additional changes that are beyond the scope of this fix.
+
+if __name__ == "__main__":
+    print("Testing total degree min/max cases:")
+    test_total_degree_min_max()
+    print("\nNote: We're not testing degree list min/max cases as they're not part of the issue description.")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..607412c6b7
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,33 @@
+import sympy as sp
+from sympy.polys.orderings import monomial_key
+
+# Reproduce the issue
+x1, x2, x3 = sp.symbols('x1, x2, x3')
+states = [x1, x2, x3]
+max_degrees = 3
+min_degrees = 3
+monomials = sorted(sp.itermonomials(states, max_degrees, min_degrees=min_degrees),
+                   key=monomial_key('grlex', states))
+print("Current output with min_degrees=3, max_degrees=3:")
+print(monomials)
+print(f"Number of monomials: {len(monomials)}")
+
+# Expected output should include all monomials of total degree 3
+expected_monomials = [
+    x1**3, x2**3, x3**3,  # Degree 3 in one variable
+    x1**2*x2, x1**2*x3, x2**2*x1, x2**2*x3, x3**2*x1, x3**2*x2,  # Degree 2 in one variable, 1 in another
+    x1*x2**2, x1*x3**2, x2*x1**2, x2*x3**2, x3*x1**2, x3*x2**2,  # Degree 2 in one variable, 1 in another
+    x1*x2*x3  # Degree 1 in each variable
+]
+
+# Remove duplicates from expected monomials
+expected_monomials = sorted(set(expected_monomials), key=monomial_key('grlex', states))
+print("\nExpected output should include all monomials of total degree 3:")
+print(expected_monomials)
+print(f"Number of expected monomials: {len(expected_monomials)}")
+
+# Check if all expected monomials are in the current output
+missing_monomials = [m for m in expected_monomials if m not in monomials]
+print("\nMissing monomials:")
+for m in missing_monomials:
+    print(m)
\ No newline at end of file
diff --git a/sympy/polys/monomials.py b/sympy/polys/monomials.py
index 0e84403307..d2cd3451e5 100644
--- a/sympy/polys/monomials.py
+++ b/sympy/polys/monomials.py
@@ -127,7 +127,7 @@ def itermonomials(variables, max_degrees, min_degrees=None):
                 for variable in item:
                     if variable != 1:
                         powers[variable] += 1
-                if max(powers.values()) >= min_degree:
+                if sum(powers.values()) >= min_degree:
                     monomials_list_comm.append(Mul(*item))
             yield from set(monomials_list_comm)
         else:
@@ -139,7 +139,7 @@ def itermonomials(variables, max_degrees, min_degrees=None):
                 for variable in item:
                     if variable != 1:
                         powers[variable] += 1
-                if max(powers.values()) >= min_degree:
+                if sum(powers.values()) >= min_degree:
                     monomials_list_non_comm.append(Mul(*item))
             yield from set(monomials_list_non_comm)
     else:
diff --git a/test_various_degrees.py b/test_various_degrees.py
new file mode 100644
index 0000000000..371d2d5d38
--- /dev/null
+++ b/test_various_degrees.py
@@ -0,0 +1,45 @@
+import sympy as sp
+from sympy.polys.orderings import monomial_key
+
+# Test with different combinations of min_degrees and max_degrees
+x1, x2, x3 = sp.symbols('x1, x2, x3')
+states = [x1, x2, x3]
+
+# Test case 1: min_degrees=1, max_degrees=3
+print("Test case 1: min_degrees=1, max_degrees=3")
+min_degrees = 1
+max_degrees = 3
+monomials = sorted(sp.itermonomials(states, max_degrees, min_degrees=min_degrees),
+                   key=monomial_key('grlex', states))
+print(f"Number of monomials: {len(monomials)}")
+print("First 10 monomials:", monomials[:10])
+print()
+
+# Test case 2: min_degrees=2, max_degrees=4
+print("Test case 2: min_degrees=2, max_degrees=4")
+min_degrees = 2
+max_degrees = 4
+monomials = sorted(sp.itermonomials(states, max_degrees, min_degrees=min_degrees),
+                   key=monomial_key('grlex', states))
+print(f"Number of monomials: {len(monomials)}")
+print("First 10 monomials:", monomials[:10])
+print()
+
+# Test case 3: min_degrees=0, max_degrees=2
+print("Test case 3: min_degrees=0, max_degrees=2")
+min_degrees = 0
+max_degrees = 2
+monomials = sorted(sp.itermonomials(states, max_degrees, min_degrees=min_degrees),
+                   key=monomial_key('grlex', states))
+print(f"Number of monomials: {len(monomials)}")
+print("All monomials:", monomials)
+print()
+
+# Test case 4: min_degrees=3, max_degrees=3 (original test case)
+print("Test case 4: min_degrees=3, max_degrees=3")
+min_degrees = 3
+max_degrees = 3
+monomials = sorted(sp.itermonomials(states, max_degrees, min_degrees=min_degrees),
+                   key=monomial_key('grlex', states))
+print(f"Number of monomials: {len(monomials)}")
+print("All monomials:", monomials)
\ No newline at end of file
