diff --git a/comprehensive_quaternion_test.py b/comprehensive_quaternion_test.py
new file mode 100644
index 0000000000..c6b7146ac7
--- /dev/null
+++ b/comprehensive_quaternion_test.py
@@ -0,0 +1,54 @@
+from sympy import symbols, cos, sin, trigsimp, simplify
+from sympy.algebras.quaternion import Quaternion
+import sympy
+
+def test_rotation(q, axis_name, expected_matrix):
+    """Test a quaternion rotation and compare with expected matrix"""
+    x = symbols('x')
+    R = trigsimp(q.to_rotation_matrix())
+    print(f"{axis_name}-axis rotation matrix:")
+    print(R)
+
+    # Check determinant
+    det = simplify(R.det())
+    print(f"Determinant: {det}")
+
+    # Compare with expected matrix
+    for i in range(3):
+        for j in range(3):
+            if R[i, j] != expected_matrix[i][j]:
+                print(f"Mismatch at position ({i},{j}): Got {R[i, j]}, expected {expected_matrix[i][j]}")
+
+    print("")
+
+if __name__ == "__main__":
+    print(f"Sympy version: {sympy.__version__}")
+
+    x = symbols('x')
+
+    # Test X-axis rotation
+    q_x = Quaternion(cos(x/2), sin(x/2), 0, 0)
+    expected_x = [
+        [1, 0, 0],
+        [0, cos(x), -sin(x)],
+        [0, sin(x), cos(x)]
+    ]
+    test_rotation(q_x, "X", expected_x)
+
+    # Test Y-axis rotation
+    q_y = Quaternion(cos(x/2), 0, sin(x/2), 0)
+    expected_y = [
+        [cos(x), 0, sin(x)],
+        [0, 1, 0],
+        [-sin(x), 0, cos(x)]
+    ]
+    test_rotation(q_y, "Y", expected_y)
+
+    # Test Z-axis rotation
+    q_z = Quaternion(cos(x/2), 0, 0, sin(x/2))
+    expected_z = [
+        [cos(x), -sin(x), 0],
+        [sin(x), cos(x), 0],
+        [0, 0, 1]
+    ]
+    test_rotation(q_z, "Z", expected_z)
\ No newline at end of file
diff --git a/reproduce_quaternion_issue.py b/reproduce_quaternion_issue.py
new file mode 100644
index 0000000000..0b0db795bd
--- /dev/null
+++ b/reproduce_quaternion_issue.py
@@ -0,0 +1,12 @@
+from sympy import symbols, cos, sin, trigsimp
+from sympy.algebras.quaternion import Quaternion
+
+# Reproduce the issue
+x = symbols('x')
+q = Quaternion(cos(x/2), sin(x/2), 0, 0)
+result = trigsimp(q.to_rotation_matrix())
+print("Current result:")
+print(result)
+
+# Expected result should have one negative sin(x)
+print("\nExpected result should have one negative sin(x) in the 2nd row, 1st column")
\ No newline at end of file
diff --git a/sympy/algebras/quaternion.py b/sympy/algebras/quaternion.py
index b84e7cb95a..ba10d254fc 100644
--- a/sympy/algebras/quaternion.py
+++ b/sympy/algebras/quaternion.py
@@ -525,14 +525,14 @@ def to_rotation_matrix(self, v=None):
         s = q.norm()**-2
         m00 = 1 - 2*s*(q.c**2 + q.d**2)
         m01 = 2*s*(q.b*q.c - q.d*q.a)
-        m02 = 2*s*(q.b*q.d + q.c*q.a)
+        m02 = 2*s*(q.d*q.a + q.b*q.c)
 
         m10 = 2*s*(q.b*q.c + q.d*q.a)
         m11 = 1 - 2*s*(q.b**2 + q.d**2)
-        m12 = 2*s*(q.c*q.d + q.b*q.a)
+        m12 = 2*s*(q.c*q.d - q.a*q.b)
 
         m20 = 2*s*(q.b*q.d - q.c*q.a)
-        m21 = 2*s*(q.c*q.d + q.b*q.a)
+        m21 = 2*s*(q.c*q.d + q.a*q.b)
         m22 = 1 - 2*s*(q.b**2 + q.c**2)
 
         if not v:
diff --git a/test_quaternion_rotation.py b/test_quaternion_rotation.py
new file mode 100644
index 0000000000..cdadb1bfc7
--- /dev/null
+++ b/test_quaternion_rotation.py
@@ -0,0 +1,37 @@
+from sympy import symbols, cos, sin, trigsimp
+from sympy.algebras.quaternion import Quaternion
+
+def test_x_rotation():
+    """Test rotation around x-axis"""
+    x = symbols('x')
+    q = Quaternion(cos(x/2), sin(x/2), 0, 0)
+    R = trigsimp(q.to_rotation_matrix())
+    print("X-axis rotation matrix:")
+    print(R)
+    print("\nExpected (one sin(x) should be negative):")
+    print("Matrix([")
+    print("[1,      0,      0],")
+    print("[0, cos(x), sin(x)],")
+    print("[0, sin(x), cos(x)]])")
+
+def test_y_rotation():
+    """Test rotation around y-axis"""
+    x = symbols('x')
+    q = Quaternion(cos(x/2), 0, sin(x/2), 0)
+    R = trigsimp(q.to_rotation_matrix())
+    print("\nY-axis rotation matrix:")
+    print(R)
+
+def test_z_rotation():
+    """Test rotation around z-axis"""
+    x = symbols('x')
+    q = Quaternion(cos(x/2), 0, 0, sin(x/2))
+    R = trigsimp(q.to_rotation_matrix())
+    print("\nZ-axis rotation matrix:")
+    print(R)
+
+if __name__ == "__main__":
+    print("Testing Quaternion.to_rotation_matrix()")
+    test_x_rotation()
+    test_y_rotation()
+    test_z_rotation()
\ No newline at end of file
diff --git a/verify_quaternion_fix.py b/verify_quaternion_fix.py
new file mode 100644
index 0000000000..50dd7585ff
--- /dev/null
+++ b/verify_quaternion_fix.py
@@ -0,0 +1,24 @@
+from sympy import symbols, cos, sin, trigsimp
+from sympy.algebras.quaternion import Quaternion
+import sympy
+
+def test_x_rotation():
+    """Test rotation around x-axis"""
+    x = symbols('x')
+    q = Quaternion(cos(x/2), sin(x/2), 0, 0)
+    R = trigsimp(q.to_rotation_matrix())
+    print("Current X-axis rotation matrix:")
+    print(R)
+    print("\nExpected X-axis rotation matrix (one sin(x) should be negative):")
+    print("Matrix([")
+    print("[1,      0,      0],")
+    print("[0, cos(x), -sin(x)],")  # Note the negative sin(x) here
+    print("[0, sin(x), cos(x)]])")
+
+    # Verify the determinant is 1 (property of rotation matrices)
+    det = sympy.simplify(R.det())
+    print(f"\nDeterminant of rotation matrix: {det}")
+
+if __name__ == "__main__":
+    print(f"Sympy version: {sympy.__version__}")
+    test_x_rotation()
\ No newline at end of file
