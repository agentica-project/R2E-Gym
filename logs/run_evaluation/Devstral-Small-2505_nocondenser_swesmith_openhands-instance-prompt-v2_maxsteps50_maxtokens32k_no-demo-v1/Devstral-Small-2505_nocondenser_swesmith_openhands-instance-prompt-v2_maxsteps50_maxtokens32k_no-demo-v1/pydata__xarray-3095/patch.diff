diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..4a8bf9ff
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,39 @@
+import xarray as xr
+import numpy as np
+
+# Create a dataset with unicode indices
+ds = xr.Dataset(
+    coords={'x': ['foo'], 'y': ('x', ['bar'])},
+    data_vars={'z': ('x', ['baz'])}
+)
+
+print("Original dataset:")
+print(ds)
+print("\nOriginal dataset 'x' coordinate dtype:", ds['x'].dtype)
+
+# Test shallow copy
+ds_shallow = ds.copy(deep=False)
+print("\nShallow copy (deep=False):")
+print(ds_shallow)
+print("'x' coordinate dtype after shallow copy:", ds_shallow['x'].dtype)
+
+# Test deep copy
+ds_deep = ds.copy(deep=True)
+print("\nDeep copy (deep=True):")
+print(ds_deep)
+print("'x' coordinate dtype after deep copy:", ds_deep['x'].dtype)
+
+# Test DataArray copy
+print("\nOriginal DataArray 'z':")
+print(ds.z)
+print("'z' coordinates 'x' dtype:", ds.z.coords['x'].dtype)
+
+da_shallow = ds.z.copy(deep=False)
+print("\nDataArray shallow copy (deep=False):")
+print(da_shallow)
+print("'x' coordinate dtype after shallow copy:", da_shallow.coords['x'].dtype)
+
+da_deep = ds.z.copy(deep=True)
+print("\nDataArray deep copy (deep=True):")
+print(da_deep)
+print("'x' coordinate dtype after deep copy:", da_deep.coords['x'].dtype)
\ No newline at end of file
diff --git a/xarray/core/indexing.py b/xarray/core/indexing.py
index e262d9ee..f7e2f04c 100644
--- a/xarray/core/indexing.py
+++ b/xarray/core/indexing.py
@@ -1240,6 +1240,7 @@ class PandasIndexAdapter(ExplicitlyIndexedNDArrayMixin):
             elif not utils.is_valid_numpy_dtype(array.dtype):
                 dtype = np.dtype('O')
             else:
+                # Preserve the original dtype, especially for unicode strings
                 dtype = array.dtype
         self._dtype = dtype
 
@@ -1255,6 +1256,9 @@ class PandasIndexAdapter(ExplicitlyIndexedNDArrayMixin):
             with suppress(AttributeError):
                 # this might not be public API
                 array = array.astype('object')
+        # If the original array has a unicode dtype, preserve it
+        elif dtype is None and hasattr(array, 'dtype') and np.issubdtype(array.dtype, np.unicode_):
+            dtype = array.dtype
         return np.asarray(array.values, dtype=dtype)
 
     @property
diff --git a/xarray/core/variable.py b/xarray/core/variable.py
index 379be8f5..25836aca 100644
--- a/xarray/core/variable.py
+++ b/xarray/core/variable.py
@@ -809,7 +809,11 @@ class Variable(common.AbstractArray, arithmetic.SupportsArithmetic,
                     data = data.copy()
                 elif not isinstance(data, PandasIndexAdapter):
                     # pandas.Index is immutable
-                    data = np.array(data)
+                    # Preserve the original dtype for unicode strings
+                    if hasattr(data, 'dtype') and np.issubdtype(data.dtype, np.unicode_):
+                        data = np.array(data, dtype=data.dtype)
+                    else:
+                        data = np.array(data)
         else:
             data = as_compatible_data(data)
             if self.shape != data.shape:
@@ -1947,7 +1951,13 @@ class IndexVariable(Variable):
                 # point, which doesn't have a copy method, so make a deep copy
                 # of the underlying `pandas.MultiIndex` and create a new
                 # `PandasIndexAdapter` instance with it.
-                data = PandasIndexAdapter(self._data.array.copy(deep=True))
+                # Preserve the original dtype for unicode strings
+                array = self._data.array
+                if hasattr(array, 'dtype') and np.issubdtype(array.dtype, np.unicode_):
+                    # Create a new PandasIndexAdapter with the same dtype
+                    data = PandasIndexAdapter(array.copy(deep=True), dtype=array.dtype)
+                else:
+                    data = PandasIndexAdapter(array.copy(deep=True))
             else:
                 data = self._data
         else:
