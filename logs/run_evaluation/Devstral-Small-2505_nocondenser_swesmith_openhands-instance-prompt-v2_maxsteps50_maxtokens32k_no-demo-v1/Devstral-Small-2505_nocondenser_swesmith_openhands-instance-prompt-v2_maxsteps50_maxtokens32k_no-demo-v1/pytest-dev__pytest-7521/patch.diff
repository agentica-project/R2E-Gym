diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..8890f57fe
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,70 @@
+import io
+import sys
+import tempfile
+import os
+
+def simulate_pytest_5():
+    """Simulate pytest 5 behavior with direct BytesIO access"""
+    captured = io.BytesIO()
+    captured.write(b"Greetings from DOS\r")
+    captured.seek(0)
+    content = captured.read()
+    return content.decode('utf-8')
+
+def simulate_pytest_6_before_fix():
+    """Simulate pytest 6 behavior before fix with TextIOWrapper"""
+    captured = io.BytesIO()
+    captured.write(b"Greetings from DOS\r")
+    captured.seek(0)
+
+    # This is how pytest 6 used to use TextIOWrapper without newline=""
+    text_io = io.TextIOWrapper(captured, encoding="utf-8")
+    content = text_io.read()
+    return content
+
+def simulate_pytest_6_after_fix():
+    """Simulate pytest 6 behavior after fix with TextIOWrapper"""
+    captured = io.BytesIO()
+    captured.write(b"Greetings from DOS\r")
+    captured.seek(0)
+
+    # This is how pytest 6 uses TextIOWrapper after the fix
+    text_io = io.TextIOWrapper(captured, encoding="utf-8", newline="")
+    content = text_io.read()
+    return content
+
+def simulate_pytest_6_with_tempfile_before_fix():
+    """Simulate pytest 6 behavior before fix with temporary file"""
+    tmpfile = tempfile.TemporaryFile(buffering=0)
+    # Write directly to the file
+    tmpfile.write(b"Greetings from DOS\r")
+    tmpfile.seek(0)
+
+    # Wrap with TextIOWrapper (like EncodedFile did before the fix)
+    text_io = io.TextIOWrapper(tmpfile, encoding="utf-8")
+    content = text_io.read()
+    tmpfile.close()
+    return content
+
+def simulate_pytest_6_with_tempfile_after_fix():
+    """Simulate pytest 6 behavior after fix with temporary file"""
+    tmpfile = tempfile.TemporaryFile(buffering=0)
+    # Write directly to the file
+    tmpfile.write(b"Greetings from DOS\r")
+    tmpfile.seek(0)
+
+    # Wrap with TextIOWrapper (like EncodedFile does after the fix)
+    text_io = io.TextIOWrapper(tmpfile, encoding="utf-8", newline="")
+    content = text_io.read()
+    tmpfile.close()
+    return content
+
+def main():
+    print(f"Pytest 5 behavior (direct BytesIO): {repr(simulate_pytest_5())}")
+    print(f"Pytest 6 before fix (TextIOWrapper): {repr(simulate_pytest_6_before_fix())}")
+    print(f"Pytest 6 after fix (TextIOWrapper): {repr(simulate_pytest_6_after_fix())}")
+    print(f"Pytest 6 before fix with tempfile: {repr(simulate_pytest_6_with_tempfile_before_fix())}")
+    print(f"Pytest 6 after fix with tempfile: {repr(simulate_pytest_6_with_tempfile_after_fix())}")
+
+if __name__ == "__main__":
+    main()
\ No newline at end of file
diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py
index 3f9c60fb9..9edca63f5 100644
--- a/src/_pytest/capture.py
+++ b/src/_pytest/capture.py
@@ -389,6 +389,7 @@ class FDCaptureBinary:
                 encoding="utf-8",
                 errors="replace",
                 write_through=True,
+                newline="",  # Disable newline translation to preserve carriage returns
             )
             if targetfd in patchsysdict:
                 self.syscapture = SysCapture(targetfd, self.tmpfile)
diff --git a/test_capfd.py b/test_capfd.py
new file mode 100644
index 000000000..d85dd0fa8
--- /dev/null
+++ b/test_capfd.py
@@ -0,0 +1,4 @@
+def test_cafd_includes_carriage_return(capfd):
+    print('Greetings from DOS', end='\r')
+    out, err = capfd.readouterr()
+    assert out.endswith('\r')
\ No newline at end of file
