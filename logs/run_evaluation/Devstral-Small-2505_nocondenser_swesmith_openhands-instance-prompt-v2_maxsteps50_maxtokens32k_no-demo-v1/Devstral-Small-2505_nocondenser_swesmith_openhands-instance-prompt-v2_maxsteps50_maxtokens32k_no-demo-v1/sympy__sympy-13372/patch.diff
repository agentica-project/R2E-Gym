diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..b8d180033e
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,26 @@
+from sympy import Mul, Max, Min, Add, Pow, Symbol
+from sympy.abc import x, y, z
+
+def test_case(description, expr):
+    print(f"\nTesting {description}:")
+    try:
+        result = expr.evalf()
+        print(f"Result: {result}")
+        return True
+    except Exception as e:
+        print(f"Error: {type(e).__name__}: {e}")
+        return False
+
+# Test cases
+test_case("Mul(x, Max(0, y), evaluate=False)", Mul(x, Max(0, y), evaluate=False))
+test_case("Mul(Max(0, y), x, evaluate=False)", Mul(Max(0, y), x, evaluate=False))
+test_case("Mul(x, Min(0, y), evaluate=False)", Mul(x, Min(0, y), evaluate=False))
+test_case("Mul(Min(0, y), x, evaluate=False)", Mul(Min(0, y), x, evaluate=False))
+test_case("Mul(Max(0, y), Min(0, z), evaluate=False)", Mul(Max(0, y), Min(0, z), evaluate=False))
+test_case("Mul(Add(x, y), Max(0, z), evaluate=False)", Mul(Add(x, y), Max(0, z), evaluate=False))
+test_case("Mul(Max(0, y), Add(x, z), evaluate=False)", Mul(Max(0, y), Add(x, z), evaluate=False))
+test_case("Mul(Pow(x, 2), Max(0, y), evaluate=False)", Mul(Pow(x, 2), Max(0, y), evaluate=False))
+test_case("Mul(Max(0, y), Pow(x, 2), evaluate=False)", Mul(Max(0, y), Pow(x, 2), evaluate=False))
+
+# Count successful tests
+print("\nAll tests completed!")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..bd5cbcc85b
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,18 @@
+from sympy import Mul, Max, Symbol
+from sympy.abc import x, y
+
+# This works fine
+print("Testing Mul(x, Max(0, y), evaluate=False).evalf():")
+try:
+    result = Mul(x, Max(0, y), evaluate=False).evalf()
+    print(f"Result: {result}")
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {e}")
+
+# This causes the error
+print("\nTesting Mul(Max(0, y), x, evaluate=False).evalf():")
+try:
+    result = Mul(Max(0, y), x, evaluate=False).evalf()
+    print(f"Result: {result}")
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {e}")
\ No newline at end of file
diff --git a/sympy/core/evalf.py b/sympy/core/evalf.py
index 72a5fbae52..f34908710a 100644
--- a/sympy/core/evalf.py
+++ b/sympy/core/evalf.py
@@ -1301,12 +1301,16 @@ def evalf(x, prec, options):
             elif re.is_number:
                 re = re._to_mpmath(prec, allow_ints=False)._mpf_
                 reprec = prec
+            else:
+                raise NotImplementedError
             if im == 0:
                 im = None
                 imprec = None
             elif im.is_number:
                 im = im._to_mpmath(prec, allow_ints=False)._mpf_
                 imprec = prec
+            else:
+                raise NotImplementedError
             r = re, im, reprec, imprec
         except AttributeError:
             raise NotImplementedError
