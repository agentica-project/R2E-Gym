diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..225bab3f4c
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,42 @@
+from sympy.combinatorics import DihedralGroup, PermutationGroup, Permutation
+from sympy.combinatorics.named_groups import SymmetricGroup, AlternatingGroup
+
+def test_sylow_subgroup(group, p):
+    try:
+        sylow = group.sylow_subgroup(p)
+        order = sylow.order()
+        print(f"Success! Sylow {p}-subgroup of {group.__class__.__name__}({group.order()}) has order {order}")
+        return True
+    except Exception as e:
+        print(f"Error with {group.__class__.__name__}({group.order()}): {type(e).__name__}: {e}")
+        return False
+
+# Test with various dihedral groups
+print("Testing Dihedral Groups:")
+for n in [6, 8, 10, 12, 14, 16, 18, 20, 25, 30, 36, 50]:
+    if n % 2 == 0:  # Only even n make sense for dihedral groups
+        G = DihedralGroup(n)
+        test_sylow_subgroup(G, 2)
+        if n % 3 == 0 or n % 5 == 0:
+            p = 3 if n % 3 == 0 else 5
+            test_sylow_subgroup(G, p)
+
+# Test with symmetric and alternating groups
+print("\nTesting Symmetric and Alternating Groups:")
+for n in [3, 4, 5, 6]:
+    G_sym = SymmetricGroup(n)
+    G_alt = AlternatingGroup(n)
+
+    for p in [2, 3, 5]:
+        if p < n:
+            test_sylow_subgroup(G_sym, p)
+            test_sylow_subgroup(G_alt, p)
+
+# Test with a custom permutation group
+print("\nTesting Custom Permutation Group:")
+gens = [
+    Permutation([0, 1, 2, 3, 4, 5, 6, 7]),
+    Permutation([0, 2, 4, 6, 1, 3, 5, 7])
+]
+G_custom = PermutationGroup(*gens)
+test_sylow_subgroup(G_custom, 2)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..3b1ea1bbb7
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,18 @@
+from sympy.combinatorics import DihedralGroup
+
+# Test with the problematic group sizes mentioned in the issue
+print("Testing with DihedralGroup(18):")
+try:
+    G18 = DihedralGroup(18)
+    S2_18 = G18.sylow_subgroup(p=2)
+    print("Success! Sylow subgroup for G18:", S2_18)
+except Exception as e:
+    print(f"Error with G18: {type(e).__name__}: {e}")
+
+print("\nTesting with DihedralGroup(50):")
+try:
+    G50 = DihedralGroup(50)
+    S2_50 = G50.sylow_subgroup(p=2)
+    print("Success! Sylow subgroup for G50:", S2_50)
+except Exception as e:
+    print(f"Error with G50: {type(e).__name__}: {e}")
\ No newline at end of file
diff --git a/sympy/combinatorics/perm_groups.py b/sympy/combinatorics/perm_groups.py
index de94ddabb4..2f8767ccb8 100644
--- a/sympy/combinatorics/perm_groups.py
+++ b/sympy/combinatorics/perm_groups.py
@@ -2195,17 +2195,20 @@ def _number_blocks(blocks):
                 # respect to the already discovere ones
                 minimal = True
                 to_remove = []
+                to_remove_indices = []
                 for i, r in enumerate(rep_blocks):
                     if len(r) > len(rep) and rep.issubset(r):
                         # i-th block system is not minimal
-                        del num_blocks[i], blocks[i]
                         to_remove.append(rep_blocks[i])
+                        to_remove_indices.append(i)
                     elif len(r) < len(rep) and r.issubset(rep):
                         # the system being checked is not minimal
                         minimal = False
                         break
-                # remove non-minimal representative blocks
+                # remove non-minimal representative blocks and corresponding elements
                 rep_blocks = [r for r in rep_blocks if r not in to_remove]
+                for i in sorted(to_remove_indices, reverse=True):
+                    del num_blocks[i], blocks[i]
 
                 if minimal and num_block not in num_blocks:
                     blocks.append(block)
