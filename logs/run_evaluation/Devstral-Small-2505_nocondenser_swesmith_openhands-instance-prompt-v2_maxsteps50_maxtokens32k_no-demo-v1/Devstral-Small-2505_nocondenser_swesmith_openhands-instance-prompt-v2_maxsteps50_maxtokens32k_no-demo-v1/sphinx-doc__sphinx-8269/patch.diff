diff --git a/setup.py b/setup.py
index a404f1fa5..2c6848797 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py
index 9b54afc7c..b47202d19 100644
--- a/sphinx/builders/linkcheck.py
+++ b/sphinx/builders/linkcheck.py
@@ -163,13 +163,35 @@ class CheckExternalLinksBuilder(Builder):
 
             try:
                 if anchor and self.app.config.linkcheck_anchors:
-                    # Read the whole document and see if #anchor exists
-                    response = requests.get(req_url, stream=True, config=self.app.config,
-                                            auth=auth_info, **kwargs)
-                    found = check_anchor(response, unquote(anchor))
-
-                    if not found:
-                        raise Exception(__("Anchor '%s' not found") % anchor)
+                    try:
+                        # try a HEAD request first, which should be easier on
+                        # the server and the network
+                        head_response = requests.head(req_url, config=self.app.config,
+                                                auth=auth_info, **kwargs)
+                        head_response.raise_for_status()
+
+                        # If HEAD request succeeds, try GET to check for anchor
+                        get_response = requests.get(req_url, stream=True, config=self.app.config,
+                                                   auth=auth_info, **kwargs)
+                        get_response.raise_for_status()
+
+                        # Check if the anchor exists in the response
+                        found = check_anchor(get_response, unquote(anchor))
+                        if not found:
+                            raise Exception(__("Anchor '%s' not found") % anchor)
+
+                        # Use the GET response for further processing
+                        response = get_response
+                    except HTTPError as err:
+                        # If there's an HTTP error, return it instead of checking for anchor
+                        if err.response.status_code == 401:
+                            # We'll take "Unauthorized" as working.
+                            return 'working', ' - unauthorized', 0
+                        elif err.response.status_code == 503:
+                            # We'll take "Service Unavailable" as ignored.
+                            return 'ignored', str(err), 0
+                        else:
+                            return 'broken', str(err), err.response.status_code
                 else:
                     try:
                         # try a HEAD request first, which should be easier on
@@ -191,7 +213,7 @@ class CheckExternalLinksBuilder(Builder):
                     # We'll take "Service Unavailable" as ignored.
                     return 'ignored', str(err), 0
                 else:
-                    return 'broken', str(err), 0
+                    return 'broken', str(err), err.response.status_code
             except Exception as err:
                 if is_ssl_error(err):
                     return 'ignored', str(err), 0
diff --git a/test_linkcheck_issue.py b/test_linkcheck_issue.py
new file mode 100755
index 000000000..ad66bbd26
--- /dev/null
+++ b/test_linkcheck_issue.py
@@ -0,0 +1,58 @@
+#!/usr/bin/env python3
+"""
+Test script to reproduce the linkcheck anchor issue.
+"""
+import os
+import sys
+import tempfile
+import shutil
+import subprocess
+from pathlib import Path
+
+# Create a test directory
+test_dir = tempfile.mkdtemp()
+print(f"Created test directory: {test_dir}")
+
+# Create a simple Sphinx project
+os.chdir(test_dir)
+
+# Run sphinx-quickstart
+subprocess.run([
+    "sphinx-quickstart",
+    "--quiet",
+    "--project", "testproj",
+    "--sep",
+    "--author", "test author",
+    "--release", "1.0",
+    "--language", "en"
+], check=True)
+
+# Add a link with an anchor to the index.rst file
+with open(os.path.join(test_dir, "source", "index.rst"), "a") as f:
+    f.write("\n\n`Test link with anchor <https://www.sphinx-doc.org/en/master/usage/configuration.html#nonexistent_anchor>`_\n")
+
+# Set linkcheck_anchors to True in conf.py
+with open(os.path.join(test_dir, "source", "conf.py"), "a") as f:
+    f.write("\n# Enable anchor checking\nlinkcheck_anchors = True\n")
+
+# Run linkcheck
+print("Running linkcheck...")
+result = subprocess.run(
+    ["sphinx-build", "-b", "linkcheck", "source", "build/linkcheck"],
+    capture_output=True,
+    text=True
+)
+
+print("\nLinkcheck output:")
+print(result.stdout)
+print(result.stderr)
+
+# Check if the output contains the expected error message
+if "Anchor 'test' not found" in result.stdout + result.stderr:
+    print("\nIssue reproduced: The linkchecker reports 'Anchor not found' instead of the HTTP error.")
+else:
+    print("\nIssue not reproduced. The output doesn't contain the expected error message.")
+
+# Clean up
+shutil.rmtree(test_dir)
+print(f"Cleaned up test directory: {test_dir}")
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index a61299979..e2baccc07 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
     PYTEST_ADDOPTS = --color yes
 commands=
-    pytest --durations 25 {posargs}
+    pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
