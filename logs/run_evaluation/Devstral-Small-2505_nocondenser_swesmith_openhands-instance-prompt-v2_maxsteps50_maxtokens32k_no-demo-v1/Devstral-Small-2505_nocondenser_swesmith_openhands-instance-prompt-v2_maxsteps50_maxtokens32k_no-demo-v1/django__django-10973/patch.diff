diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py
index 7fca6eff30..ad4d2927f3 100644
--- a/django/db/backends/postgresql/client.py
+++ b/django/db/backends/postgresql/client.py
@@ -2,17 +2,8 @@ import os
 import signal
 import subprocess
 
-from django.core.files.temp import NamedTemporaryFile
 from django.db.backends.base.client import BaseDatabaseClient
 
-
-def _escape_pgpass(txt):
-    """
-    Escape a fragment of a PostgreSQL .pgpass file.
-    """
-    return txt.replace('\\', '\\\\').replace(':', '\\:')
-
-
 class DatabaseClient(BaseDatabaseClient):
     executable_name = 'psql'
 
@@ -34,38 +25,18 @@ class DatabaseClient(BaseDatabaseClient):
             args += ['-p', str(port)]
         args += [dbname]
 
-        temp_pgpass = None
+        env = os.environ.copy()
         sigint_handler = signal.getsignal(signal.SIGINT)
         try:
             if passwd:
-                # Create temporary .pgpass file.
-                temp_pgpass = NamedTemporaryFile(mode='w+')
-                try:
-                    print(
-                        _escape_pgpass(host) or '*',
-                        str(port) or '*',
-                        _escape_pgpass(dbname) or '*',
-                        _escape_pgpass(user) or '*',
-                        _escape_pgpass(passwd),
-                        file=temp_pgpass,
-                        sep=':',
-                        flush=True,
-                    )
-                    os.environ['PGPASSFILE'] = temp_pgpass.name
-                except UnicodeEncodeError:
-                    # If the current locale can't encode the data, let the
-                    # user input the password manually.
-                    pass
+                # Set PGPASSWORD in the environment for the subprocess
+                env['PGPASSWORD'] = passwd
             # Allow SIGINT to pass to psql to abort queries.
             signal.signal(signal.SIGINT, signal.SIG_IGN)
-            subprocess.check_call(args)
+            subprocess.run(args, env=env, check=True)
         finally:
             # Restore the original SIGINT handler.
             signal.signal(signal.SIGINT, sigint_handler)
-            if temp_pgpass:
-                temp_pgpass.close()
-                if 'PGPASSFILE' in os.environ:  # unit tests need cleanup
-                    del os.environ['PGPASSFILE']
 
     def runshell(self):
-        DatabaseClient.runshell_db(self.connection.get_connection_params())
+        DatabaseClient.runshell_db(self.connection.get_connection_params())
\ No newline at end of file
diff --git a/test_postgres_client.py b/test_postgres_client.py
new file mode 100644
index 0000000000..dbc524422d
--- /dev/null
+++ b/test_postgres_client.py
@@ -0,0 +1,61 @@
+import os
+import sys
+from django.db.backends.postgresql.client import DatabaseClient
+
+class MockConnection:
+    def get_connection_params(self):
+        return {
+            'host': 'localhost',
+            'port': '5432',
+            'database': 'testdb',
+            'user': 'testuser',
+            'password': 'testpassword'
+        }
+
+def test_client():
+    client = DatabaseClient(None)
+    client.connection = MockConnection()
+
+    # Store original environment
+    original_env = os.environ.copy()
+
+    try:
+        # Test the runshell method
+        print("Testing DatabaseClient.runshell...")
+        # We don't actually want to run psql, so we'll mock subprocess.run
+        import subprocess
+        original_run = subprocess.run
+
+        # Create a mock that just verifies the environment and arguments
+        def mock_run(args, env=None, check=False, **kwargs):
+            env = env or os.environ
+            print(f"Args: {args}")
+            print(f"Environment: {env}")
+            # Check if PGPASSWORD is in the environment
+            if 'PGPASSWORD' in env:
+                print("PGPASSWORD found in environment!")
+                print(f"Value: {env['PGPASSWORD']}")
+            # Check if PGPASSFILE is in the environment
+            if 'PGPASSFILE' in env:
+                print("PGPASSFILE found in environment!")
+                print(f"Value: {env['PGPASSFILE']}")
+            return type('MockCompletedProcess', (), {
+                'returncode': 0,
+                '__str__': lambda self: 'Command succeeded',
+            })
+
+        subprocess.run = mock_run
+
+        try:
+            client.runshell()
+        finally:
+            # Restore original function
+            subprocess.run = original_run
+
+    finally:
+        # Restore original environment
+        os.environ.clear()
+        os.environ.update(original_env)
+
+if __name__ == "__main__":
+    test_client()
\ No newline at end of file
diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py
index 0d4f28554d..f8ccc3c50d 100644
--- a/tests/dbshell/test_postgresql.py
+++ b/tests/dbshell/test_postgresql.py
@@ -11,21 +11,21 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):
     def _run_it(self, dbinfo):
         """
         That function invokes the runshell command, while mocking
-        subprocess.call. It returns a 2-tuple with:
+        subprocess.run. It returns a 2-tuple with:
         - The command line list
-        - The content of the file pointed by environment PGPASSFILE, or None.
+        - The PGPASSWORD environment variable value, or None.
         """
-        def _mock_subprocess_call(*args):
-            self.subprocess_args = list(*args)
-            if 'PGPASSFILE' in os.environ:
-                with open(os.environ['PGPASSFILE']) as f:
-                    self.pgpass = f.read().strip()  # ignore line endings
-            else:
-                self.pgpass = None
-            return 0
+        def _mock_subprocess_run(args, env=None, check=False, **kwargs):
+            self.subprocess_args = args
+            self.pgpass = env.get('PGPASSWORD', None) if env else None
+            return type('MockCompletedProcess', (), {
+                'returncode': 0,
+                '__str__': lambda self: 'Command succeeded',
+            })
+
         self.subprocess_args = None
         self.pgpass = None
-        with mock.patch('subprocess.call', new=_mock_subprocess_call):
+        with mock.patch('subprocess.run', new=_mock_subprocess_run):
             DatabaseClient.runshell_db(dbinfo)
         return self.subprocess_args, self.pgpass
 
@@ -39,7 +39,7 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):
                 'port': '444',
             }), (
                 ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],
-                'somehost:444:dbname:someuser:somepassword',
+                'somepassword',
             )
         )
 
@@ -66,7 +66,7 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):
                 'port': '444',
             }), (
                 ['psql', '-U', 'some:user', '-h', '::1', '-p', '444', 'dbname'],
-                '\\:\\:1:444:dbname:some\\:user:some\\:password',
+                'some:password',
             )
         )
 
@@ -80,14 +80,14 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):
                 'port': '444',
             }), (
                 ['psql', '-U', 'some\\user', '-h', 'somehost', '-p', '444', 'dbname'],
-                'somehost:444:dbname:some\\\\user:some\\\\password',
+                'some\\password',
             )
         )
 
     def test_accent(self):
         username = 'rôle'
         password = 'sésame'
-        pgpass_string = 'somehost:444:dbname:%s:%s' % (username, password)
+        pgpass_string = password
         self.assertEqual(
             self._run_it({
                 'database': 'dbname',
@@ -103,14 +103,14 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):
 
     def test_sigint_handler(self):
         """SIGINT is ignored in Python and passed to psql to abort quries."""
-        def _mock_subprocess_call(*args):
+        def _mock_subprocess.run(*args):
             handler = signal.getsignal(signal.SIGINT)
             self.assertEqual(handler, signal.SIG_IGN)
 
         sigint_handler = signal.getsignal(signal.SIGINT)
         # The default handler isn't SIG_IGN.
         self.assertNotEqual(sigint_handler, signal.SIG_IGN)
-        with mock.patch('subprocess.check_call', new=_mock_subprocess_call):
+        with mock.patch('subprocess.check_call', new=_mock_subprocess.run):
             DatabaseClient.runshell_db({})
         # dbshell restores the original handler.
         self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))
diff --git a/tests/dbshell/test_postgresql.py.bak b/tests/dbshell/test_postgresql.py.bak
new file mode 100644
index 0000000000..19135eade0
--- /dev/null
+++ b/tests/dbshell/test_postgresql.py.bak
@@ -0,0 +1,116 @@
+import os
+import signal
+from unittest import mock
+
+from django.db.backends.postgresql.client import DatabaseClient
+from django.test import SimpleTestCase
+
+
+class PostgreSqlDbshellCommandTestCase(SimpleTestCase):
+
+    def _run_it(self, dbinfo):
+        """
+        That function invokes the runshell command, while mocking
+        subprocess.run. It returns a 2-tuple with:
+        - The command line list
+        - The PGPASSWORD environment variable value, or None.
+        """
+        def _mock_subprocess_run(args, env=None, check=False, **kwargs):
+            self.subprocess_args = args
+            self.pgpass = env.get('PGPASSWORD', None) if env else None
+            return type('MockCompletedProcess', (), {
+                'returncode': 0,
+                '__str__': lambda self: 'Command succeeded',
+            })
+
+        self.subprocess_args = None
+        self.pgpass = None
+        with mock.patch('subprocess.run', new=_mock_subprocess_run):
+            DatabaseClient.runshell_db(dbinfo)
+        return self.subprocess_args, self.pgpass
+
+    def test_basic(self):
+        self.assertEqual(
+            self._run_it({
+                'database': 'dbname',
+                'user': 'someuser',
+                'password': 'somepassword',
+                'host': 'somehost',
+                'port': '444',
+            }), (
+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],
+                'somepassword',
+            )
+        )
+
+    def test_nopass(self):
+        self.assertEqual(
+            self._run_it({
+                'database': 'dbname',
+                'user': 'someuser',
+                'host': 'somehost',
+                'port': '444',
+            }), (
+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],
+                None,
+            )
+        )
+
+    def test_column(self):
+        self.assertEqual(
+            self._run_it({
+                'database': 'dbname',
+                'user': 'some:user',
+                'password': 'some:password',
+                'host': '::1',
+                'port': '444',
+            }), (
+                ['psql', '-U', 'some:user', '-h', '::1', '-p', '444', 'dbname'],
+                'some:password',
+            )
+        )
+
+    def test_escape_characters(self):
+        self.assertEqual(
+            self._run_it({
+                'database': 'dbname',
+                'user': 'some\\user',
+                'password': 'some\\password',
+                'host': 'somehost',
+                'port': '444',
+            }), (
+                ['psql', '-U', 'some\\user', '-h', 'somehost', '-p', '444', 'dbname'],
+                'some\\password',
+            )
+        )
+
+    def test_accent(self):
+        username = 'rôle'
+        password = 'sésame'
+        pgpass_string = 'somehost:444:dbname:%s:%s' % (username, password)
+        self.assertEqual(
+            self._run_it({
+                'database': 'dbname',
+                'user': username,
+                'password': password,
+                'host': 'somehost',
+                'port': '444',
+            }), (
+                ['psql', '-U', username, '-h', 'somehost', '-p', '444', 'dbname'],
+                pgpass_string,
+            )
+        )
+
+    def test_sigint_handler(self):
+        """SIGINT is ignored in Python and passed to psql to abort quries."""
+        def _mock_subprocess_call(*args):
+            handler = signal.getsignal(signal.SIGINT)
+            self.assertEqual(handler, signal.SIG_IGN)
+
+        sigint_handler = signal.getsignal(signal.SIGINT)
+        # The default handler isn't SIG_IGN.
+        self.assertNotEqual(sigint_handler, signal.SIG_IGN)
+        with mock.patch('subprocess.check_call', new=_mock_subprocess_call):
+            DatabaseClient.runshell_db({})
+        # dbshell restores the original handler.
+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))
diff --git a/tests/dbshell/test_postgresql.py.new b/tests/dbshell/test_postgresql.py.new
new file mode 100644
index 0000000000..e69de29bb2
