diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py
index 95a5062ec9..bcc27cbfc6 100644
--- a/django/db/migrations/loader.py
+++ b/django/db/migrations/loader.py
@@ -91,8 +91,17 @@ class MigrationLoader:
                 # Empty directories are namespaces.
                 # getattr() needed on PY36 and older (replace w/attribute access).
                 if getattr(module, '__file__', None) is None:
-                    self.unmigrated_apps.add(app_config.label)
-                    continue
+                    # Check if it's a namespace package (which has a special __path__ type in CPython,
+                    # but we can't rely on that as it's an implementation detail)
+                    # Namespace packages don't use an ordinary list for their __path__ attribute
+                    if hasattr(module, '__path__') and isinstance(module.__path__, list):
+                        # This is a regular package with no __file__, not a namespace package
+                        # Proceed with loading migrations
+                        pass
+                    else:
+                        # No __file__ and not a package with __path__, must be a namespace package
+                        self.unmigrated_apps.add(app_config.label)
+                        continue
                 # Module is not a package (e.g. migrations.py).
                 if not hasattr(module, '__path__'):
                     self.unmigrated_apps.add(app_config.label)
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..2e480bac79
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,54 @@
+import sys
+import types
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+    django.setup()
+
+from django.db.migrations.loader import MigrationLoader
+from django.db import connection
+from unittest.mock import MagicMock, patch
+
+# Create a mock module that has no __file__ but has a __path__ that is a list
+# (not a namespace package)
+mock_module = types.ModuleType('mock_migrations')
+mock_module.__path__ = ['/fake/path']  # This is a list, not a namespace package's __path__
+
+# Mock the import_module function to return our mock module
+with patch('django.db.migrations.loader.import_module', return_value=mock_module):
+    # Mock apps.get_app_configs to return a single app config
+    with patch('django.apps.apps.get_app_configs', return_value=[MagicMock(label='test_app')]):
+        # Mock the migrations_module method to return our module name
+        with patch.object(MigrationLoader, 'migrations_module', return_value=('test_app.migrations', False)):
+            # Mock pkgutil.iter_modules to return a migration
+            with patch('pkgutil.iter_modules', return_value=[(None, '0001_initial', False)]):
+                # Mock importing the migration module
+                mock_migration_module = types.ModuleType('test_app.migrations.0001_initial')
+                mock_migration_module.Migration = MagicMock()
+
+                with patch('django.db.migrations.loader.import_module', side_effect=lambda x: mock_migration_module if x == 'test_app.migrations.0001_initial' else mock_module):
+                    # Create a migration loader and try to load migrations
+                    loader = MigrationLoader(connection)
+                    loader.load_disk()
+
+                    # Check if our app was marked as migrated or unmigrated
+                    print(f"Migrated apps: {loader.migrated_apps}")
+                    print(f"Unmigrated apps: {loader.unmigrated_apps}")
+
+            # In the current implementation, our app would be in unmigrated_apps
+            # After our fix, it should be in migrated_apps
\ No newline at end of file
