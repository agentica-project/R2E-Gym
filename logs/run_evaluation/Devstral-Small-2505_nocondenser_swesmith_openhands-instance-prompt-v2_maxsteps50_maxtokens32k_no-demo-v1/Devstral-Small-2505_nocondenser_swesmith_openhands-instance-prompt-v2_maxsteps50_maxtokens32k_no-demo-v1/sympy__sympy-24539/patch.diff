diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..853d78fa07
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,56 @@
+from sympy import ring, ZZ, symbols
+
+def test_as_expr_with_custom_symbols():
+    # Create a polynomial ring with symbols x, y, z
+    R, x, y, z = ring("x,y,z", ZZ)
+
+    # Create a polynomial expression
+    f = 3*x**2*y - x*y*z + 7*z**3 + 1
+
+    # Test 1: Default behavior (no symbols provided)
+    result1 = f.as_expr()
+    expected1 = 3*x**2*y - x*y*z + 7*z**3 + 1
+    print("Test 1 (no symbols):")
+    print(f"Result: {result1}")
+    print(f"Expected: {expected1}")
+    # For Test 1, we just check if the result is not None and has the expected type
+    print(f"Test passed: {result1 is not None}\n")
+
+    # Test 2: Same symbols
+    X, Y, Z = symbols("x,y,z")
+    result2 = f.as_expr(X, Y, Z)
+    expected2 = 3*X**2*Y - X*Y*Z + 7*Z**3 + 1
+    print("Test 2 (same symbols):")
+    print(f"Result: {result2}")
+    print(f"Expected: {expected2}")
+    print(f"Test passed: {result2 == expected2}\n")
+
+    # Test 3: Different symbols
+    U, V, W = symbols("u,v,w")
+    result3 = f.as_expr(U, V, W)
+    expected3 = 3*U**2*V - U*V*W + 7*W**3 + 1
+    print("Test 3 (different symbols):")
+    print(f"Result: {result3}")
+    print(f"Expected: {expected3}")
+    print(f"Test passed: {result3 == expected3}\n")
+
+    # Test 4: Error case (wrong number of symbols)
+    try:
+        f.as_expr(U, V)
+        print("Test 4 (wrong number of symbols) FAILED: Should have raised ValueError")
+    except ValueError as e:
+        print(f"Test 4 (wrong number of symbols):")
+        print(f"Correctly raised ValueError: {e}\n")
+
+    # Test 5: Empty ring
+    R_empty, = ring("", ZZ)
+    constant = R_empty(3)
+    result5 = constant.as_expr()
+    expected5 = 3
+    print("Test 5 (empty ring):")
+    print(f"Result: {result5}")
+    print(f"Expected: {expected5}")
+    print(f"Test passed: {result5 == expected5}\n")
+
+if __name__ == "__main__":
+    test_as_expr_with_custom_symbols()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..67cd780ef2
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,27 @@
+from sympy import ring, ZZ, symbols
+
+# Create a polynomial ring with symbols x, y, z
+R, x, y, z = ring("x,y,z", ZZ)
+
+# Create a polynomial expression
+f = 3*x**2*y - x*y*z + 7*z**3 + 1
+
+# Define new symbols U, V, W
+U, V, W = symbols("u,v,w")
+
+# Try to convert the polynomial to an expression with the new symbols
+result = f.as_expr(U, V, W)
+
+# Print the result to see if it uses U, V, W or x, y, z
+print("Result using U, V, W:")
+print(result)
+
+# For comparison, print the original polynomial
+print("\nOriginal polynomial:")
+print(f)
+
+# Check if the symbols were actually replaced
+if str(result) == str(f):
+    print("\nISSUE CONFIRMED: Symbols were not replaced!")
+else:
+    print("\nSymbols were replaced correctly.")
\ No newline at end of file
diff --git a/sympy/polys/rings.py b/sympy/polys/rings.py
index 12bd2fc920..be6e35d06d 100644
--- a/sympy/polys/rings.py
+++ b/sympy/polys/rings.py
@@ -618,7 +618,7 @@ def set_ring(self, new_ring):
     def as_expr(self, *symbols):
         if symbols and len(symbols) != self.ring.ngens:
             raise ValueError("not enough symbols, expected %s got %s" % (self.ring.ngens, len(symbols)))
-        else:
+        elif not symbols:
             symbols = self.ring.symbols
 
         return expr_from_dict(self.as_expr_dict(), *symbols)
