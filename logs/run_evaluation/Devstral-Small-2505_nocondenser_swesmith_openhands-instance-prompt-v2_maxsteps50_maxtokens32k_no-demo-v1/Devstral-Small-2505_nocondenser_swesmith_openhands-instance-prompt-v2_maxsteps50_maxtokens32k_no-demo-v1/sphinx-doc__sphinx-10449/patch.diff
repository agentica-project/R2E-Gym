diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py
index 06768168e..da25bf9a0 100644
--- a/sphinx/ext/autodoc/typehints.py
+++ b/sphinx/ext/autodoc/typehints.py
@@ -28,7 +28,8 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,
             for param in sig.parameters.values():
                 if param.annotation is not param.empty:
                     annotation[param.name] = typing.stringify(param.annotation, mode)
-            if sig.return_annotation is not sig.empty:
+            # Only add return type for non-class callables
+            if sig.return_annotation is not sig.empty and not inspect.isclass(obj):
                 annotation['return'] = typing.stringify(sig.return_annotation, mode)
     except (TypeError, ValueError):
         pass
diff --git a/test_class_return_type.py b/test_class_return_type.py
new file mode 100644
index 000000000..7d3878bba
--- /dev/null
+++ b/test_class_return_type.py
@@ -0,0 +1,149 @@
+"""Test script to reproduce the issue with class return types."""
+
+import os
+import sys
+import tempfile
+import shutil
+from pathlib import Path
+
+# Create a temporary directory for the test
+temp_dir = Path(tempfile.mkdtemp())
+try:
+    # Create the sample package
+    sample_package_dir = temp_dir / "sample_package"
+    sample_package_dir.mkdir()
+
+    # Create __init__.py with the Square class
+    with open(sample_package_dir / "__init__.py", "w") as f:
+        f.write("""
+class Square:
+    \"\"\"A class representing a square figure.\"\"\"
+
+    def __init__(self, width: int, height: int) -> None:
+        self.width = width
+        self.height = height
+""")
+
+    # Create docs directory
+    docs_dir = temp_dir / "docs"
+    docs_dir.mkdir()
+    docs_build_dir = docs_dir / "_build"
+    docs_build_dir.mkdir()
+
+    # Create conf.py
+    with open(docs_dir / "conf.py", "w") as f:
+        f.write("""
+# Configuration file for the Sphinx documentation builder.
+#
+# This file only contains a selection of the most common options. For a full
+# list see the documentation:
+# https://www.sphinx-doc.org/en/master/usage/configuration.html
+
+# -- Path setup --------------------------------------------------------------
+
+# If extensions (or modules to document with autodoc) are in another directory,
+# add these directories to sys.path here. If the directory is relative to the
+# documentation root, use os.path.abspath to make it absolute.
+#
+
+import os
+import sys
+sys.path.insert(0, os.path.abspath('..'))
+
+# -- Project information -----------------------------------------------------
+
+project = 'test_project'
+copyright = '2023, Test Author'
+author = 'Test Author'
+
+# -- General configuration ---------------------------------------------------
+
+# Add any Sphinx extension module names here, as strings. They can be
+# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
+# ones.
+extensions = [
+    'sphinx.ext.autodoc',
+]
+
+# Add any paths that contain templates here, relative to this directory.
+templates_path = ['_templates']
+
+# List of patterns, relative to source directory, that match files and
+# directories to ignore when looking for source files.
+# This pattern also affects html_static_path and html_extra_path.
+exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']
+
+# -- Options for HTML output -------------------------------------------------
+
+# The theme to use for HTML and HTML Help pages.  See the documentation for
+# a list of builtin themes.
+#
+html_theme = 'alabaster'
+
+# Add any paths that contain custom static files (such as style sheets) here,
+# relative to this directory. They are copied after the builtin static files,
+# so a file named "default.css" will overwrite the builtin "default.css".
+html_static_path = ['_static']
+
+# -- Extension configuration -------------------------------------------------
+
+autodoc_typehints = "description"
+""")
+
+    # Create index.rst
+    with open(docs_dir / "index.rst", "w") as f:
+        f.write("""
+.. test_project documentation master file, created by
+   sphinx-quickstart on Tue Aug 24 14:09:36 2021.
+   You can adapt this file completely to your liking, but it should at least
+   contain the root `toctree` directive.
+
+Welcome to test_project's documentation!
+=======================================
+
+.. autoclass:: sample_package.Square
+   :members:
+
+.. toctree::
+   :maxdepth: 2
+   :caption: Contents:
+
+Indices and tables
+==================
+
+* :ref:`genindex`
+* :ref:`modindex`
+* :ref:`search`
+""")
+
+    # Build the documentation using subprocess
+    os.chdir(docs_dir)
+    import subprocess
+    subprocess.run(["sphinx-build", ".", "_build"], check=True)
+
+    # Check the output
+    html_file = docs_dir / "_build" / "index.html"
+    if html_file.exists():
+        with open(html_file, "r") as f:
+            content = f.read()
+            print("Documentation generated successfully.")
+            # Check if "Return type" appears in the class documentation
+            if "Return type" in content:
+                print("ISSUE DETECTED: Class documentation includes a 'Return type' section.")
+                # Print the relevant part of the file
+                lines = content.split('\n')
+                for i, line in enumerate(lines):
+                    if "Return type" in line:
+                        print(f"Found at line {i}: {line}")
+                        # Print the next few lines to see the context
+                        for j in range(1, 6):
+                            if i + j < len(lines):
+                                print(f"Line {i+j}: {lines[i+j]}")
+            else:
+                print("No 'Return type' section found in class documentation.")
+    else:
+        print(f"Error: {html_file} was not generated.")
+
+finally:
+    # Clean up
+    shutil.rmtree(temp_dir)
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index 105a02597..90ada0821 100644
--- a/tox.ini
+++ b/tox.ini
@@ -29,7 +29,7 @@ setenv =
     PYTHONWARNINGS = all
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -X warn_default_encoding -m pytest --durations 25 {posargs}
+    python -X dev -X warn_default_encoding -m pytest -rA --durations 25 {posargs}
 
 [testenv:du-latest]
 commands =
