diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py
index 2e283a3193..2491512231 100644
--- a/django/db/backends/base/operations.py
+++ b/django/db/backends/base/operations.py
@@ -580,6 +580,14 @@ class BaseDatabaseOperations:
 
     def convert_durationfield_value(self, value, expression, connection):
         if value is not None:
+            # Handle string and decimal values by converting to integer first
+            if isinstance(value, (str, decimal.Decimal)):
+                try:
+                    microseconds = int(value)
+                    return datetime.timedelta(0, 0, microseconds)
+                except (ValueError, TypeError, decimal.InvalidOperation):
+                    # If conversion fails, return None or raise appropriate error
+                    return None
             return datetime.timedelta(0, 0, value)
 
     def check_expression_support(self, expression):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..e1b2b14964
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,75 @@
+import datetime
+import decimal
+from decimal import Decimal
+import sys
+import os
+
+# Add the testbed directory to the path so we can import Django modules
+sys.path.insert(0, '/testbed')
+from django.db.backends.base.operations import BaseDatabaseOperations
+
+# Create a mock connection class
+class MockConnection:
+    def __init__(self):
+        pass
+
+# Create an instance of the operations class with a mock connection
+connection = MockConnection()
+ops = BaseDatabaseOperations(connection)
+
+def test_string_conversion():
+    # Test with a string value
+    value = "1000000"  # 1 second in microseconds
+    try:
+        result = ops.convert_durationfield_value(value, None, None)
+        print(f"Success with string: {result}")
+        return result == datetime.timedelta(0, 0, 1000000)
+    except Exception as e:
+        print(f"Error with string: {type(e).__name__}: {e}")
+        return False
+
+def test_decimal_conversion():
+    # Test with a decimal value
+    value = Decimal("1000000")  # 1 second in microseconds
+    try:
+        result = ops.convert_durationfield_value(value, None, None)
+        print(f"Success with decimal: {result}")
+        return result == datetime.timedelta(0, 0, 1000000)
+    except Exception as e:
+        print(f"Error with decimal: {type(e).__name__}: {e}")
+        return False
+
+def test_invalid_decimal():
+    # Test with a decimal that can't be converted to an integer
+    value = decimal.Decimal('NaN')  # Not a Number
+    try:
+        result = ops.convert_durationfield_value(value, None, None)
+        print(f"Result with NaN decimal: {result}")
+        return result is None
+    except Exception as e:
+        print(f"Error with NaN decimal: {type(e).__name__}: {e}")
+        return False
+
+def test_original_behavior():
+    # Test that the original behavior for integer values still works
+    value = 1000000  # 1 second in microseconds
+    try:
+        result = ops.convert_durationfield_value(value, None, None)
+        print(f"Success with integer: {result}")
+        return result == datetime.timedelta(0, 0, 1000000)
+    except Exception as e:
+        print(f"Error with integer: {type(e).__name__}: {e}")
+        return False
+
+if __name__ == "__main__":
+    print("Testing string conversion:")
+    test_string_conversion()
+
+    print("\nTesting decimal conversion:")
+    test_decimal_conversion()
+
+    print("\nTesting invalid decimal handling:")
+    test_invalid_decimal()
+
+    print("\nTesting original integer behavior:")
+    test_original_behavior()
\ No newline at end of file
