diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..dbd2dd96c
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,44 @@
+import os
+import sys
+import tempfile
+import shutil
+import subprocess
+
+# Create a temporary directory
+temp_dir = tempfile.mkdtemp()
+try:
+    # Create a test file
+    test_file = os.path.join(temp_dir, "test_foo.py")
+    with open(test_file, "w") as f:
+        f.write("def test_foo():\n    pass\n")
+
+    # Create a problematic __init__.py file
+    init_file = os.path.join(temp_dir, "foobar", "__init__.py")
+    os.makedirs(os.path.dirname(init_file), exist_ok=True)
+    with open(init_file, "w") as f:
+        f.write("assert False\n")  # This will fail when imported
+
+    # Run pytest with the current directory
+    print("Running pytest in directory with problematic __init__.py file...")
+    result = subprocess.run(
+        [sys.executable, "-m", "pytest", temp_dir],
+        capture_output=True,
+        text=True
+    )
+
+    # Print the output
+    print("STDOUT:")
+    print(result.stdout)
+    print("STDERR:")
+    print(result.stderr)
+    print(f"Exit code: {result.returncode}")
+
+    # Check if the error occurred
+    if "AssertionError" in result.stderr:
+        print("Issue reproduced: pytest tried to import the problematic __init__.py file")
+    else:
+        print("Issue not reproduced")
+
+finally:
+    # Clean up
+    shutil.rmtree(temp_dir)
\ No newline at end of file
diff --git a/src/_pytest/python.py b/src/_pytest/python.py
index 306e5f217..ed663a303 100644
--- a/src/_pytest/python.py
+++ b/src/_pytest/python.py
@@ -177,9 +177,36 @@ def pytest_collect_file(path, parent):
     ext = path.ext
     if ext == ".py":
         if not parent.session.isinitpath(path):
-            if not path_matches_patterns(
-                path, parent.config.getini("python_files") + ["__init__.py"]
-            ):
+            # Only collect __init__.py files that are in the same directory as test files
+            # or are explicitly specified as test files
+            patterns = parent.config.getini("python_files")
+
+            # For __init__.py files, we need to check if they're part of a test package
+            if path.basename == "__init__.py":
+                # Check if this __init__.py is in a directory with test files
+                # or if it's in a package that contains test files
+                dirpath = path.dirname
+
+                # Check if the directory contains test files that match our patterns
+                has_test_siblings = False
+                for pattern in patterns:
+                    if pattern != "__init__.py":
+                        for f in dirpath.files(pattern=pattern):
+                            if f.check(file=1):
+                                has_test_siblings = True
+                                break
+                    if has_test_siblings:
+                        break
+
+                # If it's not in a directory with test files and __init__.py is not in patterns,
+                # we should skip it
+                if not has_test_siblings and "__init__.py" not in patterns:
+                    return
+
+            # Add __init__.py to patterns for regular checking
+            patterns = patterns + ["__init__.py"]
+
+            if not path_matches_patterns(path, patterns):
                 return
         ihook = parent.session.gethookproxy(path)
         return ihook.pytest_pycollect_makemodule(path=path, parent=parent)
