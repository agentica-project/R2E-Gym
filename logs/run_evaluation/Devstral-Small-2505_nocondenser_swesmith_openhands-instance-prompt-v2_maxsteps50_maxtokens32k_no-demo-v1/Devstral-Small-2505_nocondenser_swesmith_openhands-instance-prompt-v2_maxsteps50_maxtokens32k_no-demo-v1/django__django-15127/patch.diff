diff --git a/django/contrib/messages/storage/base.py b/django/contrib/messages/storage/base.py
index 01422066a6..e6504427ed 100644
--- a/django/contrib/messages/storage/base.py
+++ b/django/contrib/messages/storage/base.py
@@ -1,7 +1,20 @@
 from django.conf import settings
 from django.contrib.messages import constants, utils
 
-LEVEL_TAGS = utils.get_level_tags()
+# Cache for LEVEL_TAGS to avoid recalculating on every access
+_level_tags_cache = None
+
+def get_level_tags():
+    """Get the current level tags from settings."""
+    global _level_tags_cache
+    if _level_tags_cache is None:
+        _level_tags_cache = utils.get_level_tags()
+    return _level_tags_cache
+
+def update_level_tags():
+    """Update the level tags cache to reflect current settings."""
+    global _level_tags_cache
+    _level_tags_cache = utils.get_level_tags()
 
 
 class Message:
@@ -38,7 +51,7 @@ class Message:
 
     @property
     def level_tag(self):
-        return LEVEL_TAGS.get(self.level, '')
+        return get_level_tags().get(self.level, '')
 
 
 class BaseStorage:
diff --git a/django/test/utils.py b/django/test/utils.py
index 81005d4f8f..e054c62310 100644
--- a/django/test/utils.py
+++ b/django/test/utils.py
@@ -28,6 +28,12 @@ from django.urls import get_script_prefix, set_script_prefix
 from django.utils.deprecation import RemovedInDjango50Warning
 from django.utils.translation import deactivate
 
+# Import the update_level_tags function from messages.storage.base
+try:
+    from django.contrib.messages.storage.base import update_level_tags
+except ImportError:
+    update_level_tags = None
+
 try:
     import jinja2
 except ImportError:
@@ -482,6 +488,10 @@ class override_settings(TestContextDecorator):
                 self.enable_exception = exc
                 self.disable()
 
+            # Update message level tags when MESSAGE_TAGS changes
+            if update_level_tags is not None and key == 'MESSAGE_TAGS':
+                update_level_tags()
+
     def disable(self):
         if 'INSTALLED_APPS' in self.options:
             apps.unset_installed_apps()
@@ -495,6 +505,11 @@ class override_settings(TestContextDecorator):
                 setting=key, value=new_value, enter=False,
             )
             responses.extend(responses_for_setting)
+
+            # Update message level tags when MESSAGE_TAGS changes
+            if update_level_tags is not None and key == 'MESSAGE_TAGS':
+                update_level_tags()
+
         if self.enable_exception is not None:
             exc = self.enable_exception
             self.enable_exception = None
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..3f4e69b1fb
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,53 @@
+import os
+import sys
+import django
+from django.conf import settings
+from django.test import override_settings, TestCase
+from django.contrib.messages.storage.base import Message, LEVEL_TAGS
+from django.contrib.messages import constants, utils
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.messages',
+        ],
+        MESSAGE_TAGS={
+            constants.DEBUG: 'debug',
+            constants.INFO: 'info',
+            constants.SUCCESS: 'success',
+            constants.WARNING: 'warning',
+            constants.ERROR: 'error',
+        },
+    )
+    django.setup()
+
+class MessageTagsTest(TestCase):
+    def test_message_tags_with_override(self):
+        # Create a message with default settings
+        message = Message(constants.INFO, "Test message")
+        print("Before override_settings:")
+        print(f"Message level_tag: {message.level_tag}")
+        print(f"Current LEVEL_TAGS: {LEVEL_TAGS}")
+
+        # Use override_settings to change MESSAGE_TAGS
+        with override_settings(MESSAGE_TAGS={
+            constants.DEBUG: 'debug-new',
+            constants.INFO: 'info-new',
+            constants.SUCCESS: 'success-new',
+            constants.WARNING: 'warning-new',
+            constants.ERROR: 'error-new',
+        }):
+            # Create a new message with overridden settings
+            message = Message(constants.INFO, "Test message with override")
+            print("\nAfter override_settings:")
+            print(f"Message level_tag: {message.level_tag}")
+            print(f"Current LEVEL_TAGS: {LEVEL_TAGS}")
+
+            # This should be 'info-new' if LEVEL_TAGS is updated
+            self.assertEqual(message.level_tag, 'info-new')
+
+# Run the test
+if __name__ == '__main__':
+    test = MessageTagsTest()
+    test.test_message_tags_with_override()
\ No newline at end of file
diff --git a/test_level_tags.py b/test_level_tags.py
new file mode 100644
index 0000000000..f20a4f182c
--- /dev/null
+++ b/test_level_tags.py
@@ -0,0 +1,68 @@
+import os
+import django
+from django.conf import settings
+from django.test import TestCase, override_settings
+from django.contrib.messages.storage.base import Message, LEVEL_TAGS
+from django.contrib.messages import constants, utils
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.messages',
+        ],
+        MESSAGE_TAGS={
+            constants.DEBUG: 'debug',
+            constants.INFO: 'info',
+            constants.SUCCESS: 'success',
+            constants.WARNING: 'warning',
+            constants.ERROR: 'error',
+        },
+    )
+    django.setup()
+
+# Print the initial LEVEL_TAGS
+print(f"Initial LEVEL_TAGS: {LEVEL_TAGS}")
+
+# Create a message with default settings
+message = Message(constants.INFO, "Test message")
+print(f"Message level_tag (default): {message.level_tag}")
+
+# Manually update LEVEL_TAGS
+new_tags = {
+    constants.DEBUG: 'debug-new',
+    constants.INFO: 'info-new',
+    constants.SUCCESS: 'success-new',
+    constants.WARNING: 'warning-new',
+    constants.ERROR: 'error-new',
+}
+LEVEL_TAGS.update(new_tags)
+print(f"Updated LEVEL_TAGS: {LEVEL_TAGS}")
+
+# Create a message after manually updating LEVEL_TAGS
+message = Message(constants.INFO, "Test message with updated tags")
+print(f"Message level_tag (after manual update): {message.level_tag}")
+
+# Reset LEVEL_TAGS to original value
+LEVEL_TAGS.clear()
+LEVEL_TAGS.update(utils.get_level_tags())
+print(f"Reset LEVEL_TAGS: {LEVEL_TAGS}")
+
+# Now try with override_settings
+with override_settings(MESSAGE_TAGS={
+    constants.DEBUG: 'debug-override',
+    constants.INFO: 'info-override',
+    constants.SUCCESS: 'success-override',
+    constants.WARNING: 'warning-override',
+    constants.ERROR: 'error-override',
+}):
+    # Update LEVEL_TAGS manually inside the override_settings context
+    LEVEL_TAGS.update(utils.get_level_tags())
+    print(f"LEVEL_TAGS inside override_settings (after manual update): {LEVEL_TAGS}")
+
+    # Create a message inside the override_settings context
+    message = Message(constants.INFO, "Test message with override")
+    print(f"Message level_tag inside override_settings: {message.level_tag}")
+
+# Check LEVEL_TAGS after exiting the override_settings context
+print(f"LEVEL_TAGS after override_settings: {LEVEL_TAGS}")
\ No newline at end of file
diff --git a/test_project/__init__.py b/test_project/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/settings.py b/test_project/settings.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/test_messages.py b/test_project/test_messages.py
new file mode 100644
index 0000000000..66000e9323
--- /dev/null
+++ b/test_project/test_messages.py
@@ -0,0 +1,38 @@
+import os
+import django
+from django.conf import settings
+from django.test import TestCase, override_settings
+from django.contrib.messages.storage.base import Message, LEVEL_TAGS
+from django.contrib.messages import constants
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')
+django.setup()
+
+class MessageTagsTest(TestCase):
+    def test_message_tags_with_override(self):
+        # Create a message with default settings
+        message = Message(constants.INFO, "Test message")
+        print("Before override_settings:")
+        print(f"Message level_tag: {message.level_tag}")
+        print(f"Current LEVEL_TAGS: {LEVEL_TAGS}")
+
+        # Use override_settings to change MESSAGE_TAGS
+        with override_settings(MESSAGE_TAGS={
+            constants.DEBUG: 'debug-new',
+            constants.INFO: 'info-new',
+            constants.SUCCESS: 'success-new',
+            constants.WARNING: 'warning-new',
+            constants.ERROR: 'error-new',
+        }):
+            # Create a new message with overridden settings
+            message = Message(constants.INFO, "Test message with override")
+            print("\nAfter override_settings:")
+            print(f"Message level_tag: {message.level_tag}")
+            print(f"Current LEVEL_TAGS: {LEVEL_TAGS}")
+
+            # This should be 'info-new' if LEVEL_TAGS is updated
+            self.assertEqual(message.level_tag, 'info-new')
+
+if __name__ == '__main__':
+    import unittest
+    unittest.main()
\ No newline at end of file
diff --git a/test_project/test_project/settings.py b/test_project/test_project/settings.py
new file mode 100644
index 0000000000..d91840fbd8
--- /dev/null
+++ b/test_project/test_project/settings.py
@@ -0,0 +1,44 @@
+import os
+import django
+
+BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
+
+INSTALLED_APPS = [
+    'django.contrib.messages',
+]
+
+MIDDLEWARE = []
+
+MESSAGE_TAGS = {
+    django.contrib.messages.constants.DEBUG: 'debug',
+    django.contrib.messages.constants.INFO: 'info',
+    django.contrib.messages.constants.SUCCESS: 'success',
+    django.contrib.messages.constants.WARNING: 'warning',
+    django.contrib.messages.constants.ERROR: 'error',
+}
+
+SECRET_KEY = 'dummy'
+
+ROOT_URLCONF = 'test_project.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
\ No newline at end of file
diff --git a/test_project/test_project/urls.py b/test_project/test_project/urls.py
new file mode 100644
index 0000000000..a848dfb64f
--- /dev/null
+++ b/test_project/test_project/urls.py
@@ -0,0 +1,3 @@
+from django.urls import path
+
+urlpatterns = []
\ No newline at end of file
diff --git a/test_project/test_project/wsgi.py b/test_project/test_project/wsgi.py
new file mode 100644
index 0000000000..75e72d8b70
--- /dev/null
+++ b/test_project/test_project/wsgi.py
@@ -0,0 +1,7 @@
+import os
+import django
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')
+django.setup()
+application = get_wsgi_application()
\ No newline at end of file
diff --git a/test_project/urls.py b/test_project/urls.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/wsgi.py b/test_project/wsgi.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/verify_fix.py b/verify_fix.py
new file mode 100644
index 0000000000..5a8b564fec
--- /dev/null
+++ b/verify_fix.py
@@ -0,0 +1,52 @@
+import os
+import django
+from django.conf import settings
+from django.test import TestCase, override_settings
+from django.contrib.messages.storage.base import Message
+from django.contrib.messages import constants, utils
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.messages',
+        ],
+        MESSAGE_TAGS={
+            constants.DEBUG: 'debug',
+            constants.INFO: 'info',
+            constants.SUCCESS: 'success',
+            constants.WARNING: 'warning',
+            constants.ERROR: 'error',
+        },
+    )
+    django.setup()
+
+class MessageTagsTest(TestCase):
+    def test_message_tags_with_override(self):
+        # Create a message with default settings
+        message = Message(constants.INFO, "Test message")
+        print("Before override_settings:")
+        print(f"Message level_tag: {message.level_tag}")
+        print(f"Current tags from utils.get_level_tags(): {utils.get_level_tags()}")
+
+        # Use override_settings to change MESSAGE_TAGS
+        with override_settings(MESSAGE_TAGS={
+            constants.DEBUG: 'debug-new',
+            constants.INFO: 'info-new',
+            constants.SUCCESS: 'success-new',
+            constants.WARNING: 'warning-new',
+            constants.ERROR: 'error-new',
+        }):
+            # Create a new message with overridden settings
+            message = Message(constants.INFO, "Test message with override")
+            print("\nAfter override_settings:")
+            print(f"Message level_tag: {message.level_tag}")
+            print(f"Current tags from utils.get_level_tags(): {utils.get_level_tags()}")
+
+            # This should be 'info-new' if LEVEL_TAGS is updated
+            self.assertEqual(message.level_tag, 'info-new')
+
+if __name__ == '__main__':
+    test = MessageTagsTest()
+    test.test_message_tags_with_override()
+    print("\nTest passed! The fix works.")
\ No newline at end of file
