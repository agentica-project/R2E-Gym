diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 000000000..dfe7f9ef5
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,42 @@
+from typing import TypeVar, Generic, List, Dict
+
+# Create TypeVars
+T = TypeVar('T')
+K = TypeVar('K')
+V = TypeVar('V')
+
+# Create generic classes
+class GenericClass(Generic[T]):
+    pass
+
+class GenericDict(Generic[K, V]):
+    pass
+
+# Import the fixed function
+from sphinx.ext.autodoc.mock import _make_subclass
+
+# Test with a string name (original case)
+print("Testing with string name:")
+string_mock = _make_subclass("TestClass", "test_module")()
+print(f"  Result: {string_mock.__display_name__}")
+print(f"  Type: {type(string_mock)}")
+
+# Test with a TypeVar
+print("\nTesting with TypeVar:")
+typevar_mock = _make_subclass(T, "test_module")()
+print(f"  Result: {typevar_mock.__display_name__}")
+print(f"  Type: {typevar_mock}")
+
+# Test with another TypeVar
+print("\nTesting with another TypeVar:")
+another_typevar_mock = _make_subclass(K, "test_module")()
+print(f"  Result: {another_typevar_mock.__display_name__}")
+print(f"  Type: {another_typevar_mock}")
+
+# Test with a complex object
+print("\nTesting with a complex object:")
+complex_mock = _make_subclass(GenericDict[K, V], "test_module")()
+print(f"  Result: {complex_mock.__display_name__}")
+print(f"  Type: {complex_mock}")
+
+print("\nAll tests passed!")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..8e4bc9fbb
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,19 @@
+from typing import TypeVar, Generic
+
+# Create a TypeVar
+T = TypeVar('T')
+
+# Create a generic class
+class GenericClass(Generic[T]):
+    pass
+
+# Import the problematic function
+from sphinx.ext.autodoc.mock import _make_subclass
+
+# Try to create a subclass with a TypeVar as the name
+try:
+    # This will fail because it tries to concatenate a string with a TypeVar
+    _make_subclass(T, "test_module")
+    print("Test passed - no error")
+except TypeError as e:
+    print(f"TypeError occurred: {e}")
\ No newline at end of file
diff --git a/setup.py b/setup.py
index 3d499983f..e07b2fd4f 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/ext/autodoc/mock.py b/sphinx/ext/autodoc/mock.py
index 98a3a3a96..230b0c7ad 100644
--- a/sphinx/ext/autodoc/mock.py
+++ b/sphinx/ext/autodoc/mock.py
@@ -68,12 +68,14 @@ class _MockObject:
         return self.__display_name__
 
 
-def _make_subclass(name: str, module: str, superclass: Any = _MockObject,
+def _make_subclass(name: Any, module: str, superclass: Any = _MockObject,
                    attributes: Any = None) -> Any:
-    attrs = {'__module__': module, '__display_name__': module + '.' + name}
+    # Convert name to string for class name and display name
+    name_str = str(name)
+    attrs = {'__module__': module, '__display_name__': module + '.' + name_str}
     attrs.update(attributes or {})
 
-    return type(name, (superclass,), attrs)
+    return type(name_str, (superclass,), attrs)
 
 
 class _MockModule(ModuleType):
diff --git a/tox.ini b/tox.ini
index d9f040544..bf39854b6 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ extras =
 setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
 commands=
-    pytest --durations 25 {posargs}
+    pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
