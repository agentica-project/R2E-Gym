diff --git a/boolean_contour_after.png b/boolean_contour_after.png
new file mode 100644
index 0000000000..05f7e74f17
Binary files /dev/null and b/boolean_contour_after.png differ
diff --git a/boolean_contour_before.png b/boolean_contour_before.png
new file mode 100644
index 0000000000..8468666560
Binary files /dev/null and b/boolean_contour_before.png differ
diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py
index 144eadeae2..61f97ec6e8 100644
--- a/lib/matplotlib/contour.py
+++ b/lib/matplotlib/contour.py
@@ -1128,7 +1128,27 @@ class ContourSet(cm.ScalarMappable, ContourLabeler):
                 levels_arg = args[0]
         else:
             levels_arg = self.levels
-        if isinstance(levels_arg, Integral):
+
+        # Check if the input data is boolean
+        is_boolean_input = False
+        z = None
+
+        # Get the Z data (third argument if present, second if only X,Z or just Z)
+        if len(args) >= 3:
+            z = args[2]
+        elif len(args) == 2:
+            z = args[1]
+        elif len(args) == 1 and not isinstance(args[0], Integral):
+            z = args[0]
+
+        # Check if z is an array and is boolean
+        if z is not None and isinstance(z, np.ndarray) and np.issubdtype(z.dtype, np.bool_):
+            is_boolean_input = True
+
+        if is_boolean_input and self.levels is None and isinstance(levels_arg, Integral):
+            # For boolean input with default levels, use a single level at 0.5
+            self.levels = np.array([0.5], np.float64)
+        elif isinstance(levels_arg, Integral):
             self.levels = self._autolev(levels_arg)
         else:
             self.levels = np.asarray(levels_arg, np.float64)
diff --git a/test_boolean_contour.py b/test_boolean_contour.py
new file mode 100644
index 0000000000..376404fd3c
--- /dev/null
+++ b/test_boolean_contour.py
@@ -0,0 +1,39 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+# Create a boolean 2D array
+ii, jj = np.ogrid[:100, :100]
+im = (ii + jj) % 20 < 10
+
+# Create a figure with two subplots
+fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(18, 6))
+
+# Plot with default levels (should now use 0.5 for boolean input)
+ax1.contour(im)
+ax1.set_title('Default levels (after fix)')
+
+# Plot with explicitly specified levels=[0.5]
+ax2.contour(im, levels=[0.5])
+ax2.set_title('With levels=[0.5] (explicit)')
+
+# Plot with different levels to ensure explicit levels still work
+ax3.contour(im, levels=[0.3, 0.7])
+ax3.set_title('With levels=[0.3, 0.7] (explicit)')
+
+# Save the figure
+plt.tight_layout()
+plt.savefig('/testbed/boolean_contour_after.png')
+plt.close()
+
+print("Test image saved to /testbed/boolean_contour_after.png")
+
+# Test with non-boolean data to ensure it's not affected
+print("\nTesting with non-boolean data:")
+z = np.linspace(0, 1, 100).reshape((10, 10))
+print(f"z.dtype: {z.dtype}, is boolean: {np.issubdtype(z.dtype, np.bool_)}")
+fig, ax = plt.subplots()
+contour = ax.contour(z)
+print(f"Number of levels used: {len(contour.levels)}")
+plt.close()
+
+print("\nAll tests completed successfully!")
\ No newline at end of file
