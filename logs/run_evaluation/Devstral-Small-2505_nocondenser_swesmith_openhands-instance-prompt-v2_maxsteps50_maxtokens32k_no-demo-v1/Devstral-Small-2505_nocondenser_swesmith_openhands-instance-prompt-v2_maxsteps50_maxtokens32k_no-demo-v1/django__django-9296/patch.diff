diff --git a/django/core/paginator.py b/django/core/paginator.py
index 1f92da5d4f..896535d89a 100644
--- a/django/core/paginator.py
+++ b/django/core/paginator.py
@@ -106,6 +106,10 @@ class Paginator:
         """
         return range(1, self.num_pages + 1)
 
+    def __iter__(self):
+        for page_num in self.page_range:
+            yield self.page(page_num)
+
     def _check_object_list_is_ordered(self):
         """
         Warn if self.object_list is unordered (typically a QuerySet).
diff --git a/test_paginator_iter.py b/test_paginator_iter.py
new file mode 100644
index 0000000000..f2417131b9
--- /dev/null
+++ b/test_paginator_iter.py
@@ -0,0 +1,22 @@
+from django.core.paginator import Paginator
+
+# Create a simple list of items to paginate
+data = list(range(1, 101))  # 100 items
+
+# Create a paginator with 10 items per page
+paginator = Paginator(data, 10)
+
+# Try to iterate over the paginator
+try:
+    # This should fail because __iter__ is not implemented
+    for page in paginator:
+        print(f"Page number: {page.number}, Items: {list(page.object_list)}")
+    print("Iteration successful!")
+except TypeError as e:
+    print(f"Error: {e}")
+
+# Show how it's currently done
+print("\nCurrent way to iterate:")
+for page_num in paginator.page_range:
+    page = paginator.page(page_num)
+    print(f"Page number: {page.number}, Items: {list(page.object_list)}")
\ No newline at end of file
