diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py
index cd3aab43ad..b4992d1a15 100644
--- a/django/db/migrations/operations/fields.py
+++ b/django/db/migrations/operations/fields.py
@@ -264,6 +264,11 @@ class AlterField(FieldOperation):
                     field=self.field,
                 ),
             ]
+        elif isinstance(operation, AlterField) and self.is_same_field_operation(
+            operation
+        ):
+            return [operation]
+
         return super().reduce(operation, app_label)
 
 
diff --git a/test_alterfield_optimization.py b/test_alterfield_optimization.py
new file mode 100644
index 0000000000..072da1c489
--- /dev/null
+++ b/test_alterfield_optimization.py
@@ -0,0 +1,54 @@
+import sys
+import os
+from django.db import migrations, models
+from django.db.migrations.optimizer import MigrationOptimizer
+
+def test_alterfield_optimization():
+    """Test that multiple AlterField operations on the same field are optimized properly."""
+    # Create a sequence of operations similar to the issue description
+    operations = [
+        migrations.AddField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=256, null=True),
+        ),
+        migrations.AlterField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=128, null=True),
+        ),
+        migrations.AlterField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=128, null=True, help_text="help"),
+        ),
+        migrations.AlterField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=128, null=True, help_text="help", default=None),
+        ),
+    ]
+
+    # Test case 1: All operations together (should optimize to just AddField)
+    optimizer = MigrationOptimizer()
+    result1 = optimizer.optimize(operations, "books")
+    print("Test case 1 (all operations):")
+    print(f"Original operations count: {len(operations)}")
+    print(f"Optimized operations count: {len(result1)}")
+    print(f"Operations after optimization: {result1}")
+
+    # Test case 2: Only AlterField operations (current issue)
+    alter_operations = operations[1:]
+    result2 = optimizer.optimize(alter_operations, "books")
+    print("\nTest case 2 (only AlterField operations):")
+    print(f"Original operations count: {len(alter_operations)}")
+    print(f"Optimized operations count: {len(result2)}")
+    print(f"Operations after optimization: {result2}")
+
+    # The issue is that result2 should have only one operation, but currently has all three
+    return len(result2) == 1
+
+if __name__ == "__main__":
+    success = test_alterfield_optimization()
+    print("\nTest result:", "PASSED" if success else "FAILED")
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_alterfield_optimization_comprehensive.py b/test_alterfield_optimization_comprehensive.py
new file mode 100644
index 0000000000..de1029cfbc
--- /dev/null
+++ b/test_alterfield_optimization_comprehensive.py
@@ -0,0 +1,128 @@
+import sys
+from django.db import migrations, models
+from django.db.migrations.optimizer import MigrationOptimizer
+
+def test_alterfield_optimization_comprehensive():
+    """Test various scenarios of AlterField optimization."""
+    # Test case 1: Basic case from issue description
+    operations1 = [
+        migrations.AddField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=256, null=True),
+        ),
+        migrations.AlterField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=128, null=True),
+        ),
+        migrations.AlterField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=128, null=True, help_text="help"),
+        ),
+        migrations.AlterField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=128, null=True, help_text="help", default=None),
+        ),
+    ]
+
+    # Test case 2: Different field types
+    operations2 = [
+        migrations.AlterField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=128, null=True),
+        ),
+        migrations.AlterField(
+            model_name="book",
+            name="title",
+            field=models.TextField(null=True),
+        ),
+        migrations.AlterField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=256, null=True),
+        ),
+    ]
+
+    # Test case 3: Multiple fields in the same model
+    operations3 = [
+        migrations.AlterField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=128, null=True),
+        ),
+        migrations.AlterField(
+            model_name="book",
+            name="author",
+            field=models.CharField(max_length=128, null=True),
+        ),
+        migrations.AlterField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=128, null=True, help_text="help"),
+        ),
+    ]
+
+    # Test case 4: Different models
+    operations4 = [
+        migrations.AlterField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=128, null=True),
+        ),
+        migrations.AlterField(
+            model_name="author",
+            name="name",
+            field=models.CharField(max_length=128, null=True),
+        ),
+        migrations.AlterField(
+            model_name="book",
+            name="title",
+            field=models.CharField(max_length=128, null=True, help_text="help"),
+        ),
+    ]
+
+    # Run tests
+    optimizer = MigrationOptimizer()
+
+    # Test case 1
+    result1a = optimizer.optimize(operations1, "books")
+    result1b = optimizer.optimize(operations1[1:], "books")
+    print("Test case 1a (all operations):")
+    print(f"Operations after optimization: {len(result1a)}")
+    print("Test case 1b (only AlterField operations):")
+    print(f"Operations after optimization: {len(result1b)}")
+
+    # Test case 2
+    result2 = optimizer.optimize(operations2, "books")
+    print("\nTest case 2 (different field types):")
+    print(f"Operations after optimization: {len(result2)}")
+
+    # Test case 3
+    result3 = optimizer.optimize(operations3, "books")
+    print("\nTest case 3 (multiple fields):")
+    print(f"Operations after optimization: {len(result3)}")
+
+    # Test case 4
+    result4 = optimizer.optimize(operations4, "books")
+    print("\nTest case 4 (different models):")
+    print(f"Operations after optimization: {len(result4)}")
+
+    # Verify results
+    success = (
+        len(result1a) == 1 and  # All operations should reduce to AddField
+        len(result1b) == 1 and  # Only AlterField operations should reduce to one
+        len(result2) == 1 and   # Different field types should reduce to one
+        len(result3) <= 3 and   # Different fields should not reduce
+        len(result4) <= 3       # Different models should not reduce
+    )
+
+    return success
+
+if __name__ == "__main__":
+    success = test_alterfield_optimization_comprehensive()
+    print("\nOverall test result:", "PASSED" if success else "FAILED")
+    sys.exit(0 if success else 1)
\ No newline at end of file
