diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 000000000..d3981ce34
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,44 @@
+from sklearn.feature_extraction.text import CountVectorizer
+import numpy as np
+
+def test_get_feature_names_with_vocabulary():
+    """Test get_feature_names with a predefined vocabulary."""
+    # Test with list vocabulary
+    vectorizer = CountVectorizer(vocabulary=['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this'])
+    assert not hasattr(vectorizer, 'vocabulary_')
+    feature_names = vectorizer.get_feature_names()
+    assert hasattr(vectorizer, 'vocabulary_')
+    assert feature_names == ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']
+
+    # Test with dict vocabulary
+    vocab_dict = {'and': 0, 'document': 1, 'first': 2, 'is': 3, 'one': 4, 'second': 5, 'the': 6, 'third': 7, 'this': 8}
+    vectorizer = CountVectorizer(vocabulary=vocab_dict)
+    assert not hasattr(vectorizer, 'vocabulary_')
+    feature_names = vectorizer.get_feature_names()
+    assert hasattr(vectorizer, 'vocabulary_')
+    assert feature_names == ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']
+
+    # Test with transform
+    corpus = ['This is a test document.']
+    vectorizer = CountVectorizer(vocabulary=['test', 'document'])
+    assert not hasattr(vectorizer, 'vocabulary_')
+    transformed = vectorizer.transform(corpus)
+    assert hasattr(vectorizer, 'vocabulary_')
+    feature_names = vectorizer.get_feature_names()
+    # The feature names are returned in the order they appear in the vocabulary
+    assert feature_names == ['test', 'document']
+
+    # Test that get_feature_names still raises an error when no vocabulary is provided
+    # and the vectorizer hasn't been fitted
+    vectorizer = CountVectorizer()
+    assert not hasattr(vectorizer, 'vocabulary_')
+    try:
+        feature_names = vectorizer.get_feature_names()
+        assert False, "Expected NotFittedError but got feature names"
+    except Exception as e:
+        assert "Vocabulary wasn't fitted" in str(e)
+
+    print("All tests passed!")
+
+if __name__ == "__main__":
+    test_get_feature_names_with_vocabulary()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..91b403b01
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,32 @@
+from sklearn.feature_extraction.text import CountVectorizer
+
+# Create a CountVectorizer with a predefined vocabulary
+vectorizer = CountVectorizer(vocabulary=['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this'])
+
+# Check if vocabulary_ attribute exists before transform
+print("Before transform, hasattr(vectorizer, 'vocabulary_'):", hasattr(vectorizer, "vocabulary_"))
+
+# Try to get feature names - this should raise NotFittedError currently
+try:
+    feature_names = vectorizer.get_feature_names()
+    print("Feature names obtained successfully:", feature_names)
+except Exception as e:
+    print("Error when getting feature names:", str(e))
+
+# Create a corpus
+corpus = [
+    'This is the first document.',
+    'This is the second second document.',
+    'And the third one.',
+    'Is this the first document?',
+]
+
+# Transform the corpus - this will set the vocabulary_ attribute
+transformed = vectorizer.transform(corpus)
+
+# Check if vocabulary_ attribute exists after transform
+print("After transform, hasattr(vectorizer, 'vocabulary_'):", hasattr(vectorizer, "vocabulary_"))
+
+# Now get feature names - this should work
+feature_names = vectorizer.get_feature_names()
+print("Feature names after transform:", feature_names)
\ No newline at end of file
diff --git a/sklearn/feature_extraction/text.py b/sklearn/feature_extraction/text.py
index 9b1ebd632..789e101cc 100644
--- a/sklearn/feature_extraction/text.py
+++ b/sklearn/feature_extraction/text.py
@@ -993,6 +993,9 @@ class CountVectorizer(BaseEstimator, VectorizerMixin):
 
     def get_feature_names(self):
         """Array mapping from feature integer indices to feature name"""
+        if not hasattr(self, 'vocabulary_'):
+            self._validate_vocabulary()
+
         self._check_vocabulary()
 
         return [t for t, i in sorted(six.iteritems(self.vocabulary_),
