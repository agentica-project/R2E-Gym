diff --git a/django/http/response.py b/django/http/response.py
index f62dec8ce9..b7cd379389 100644
--- a/django/http/response.py
+++ b/django/http/response.py
@@ -612,6 +612,8 @@ class FileResponse(StreamingHttpResponse):
                     "bzip2": "application/x-bzip",
                     "gzip": "application/gzip",
                     "xz": "application/x-xz",
+                    "compress": "application/x-compress",
+                    "br": "application/wasm",  # Brotli compressed file
                 }.get(encoding, content_type)
                 self.headers["Content-Type"] = (
                     content_type or "application/octet-stream"
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..c61d0ac392
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,34 @@
+import os
+import tempfile
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure()
+    django.setup()
+
+from django.http import FileResponse
+
+# Create temporary files with .Z and .br extensions
+with tempfile.NamedTemporaryFile(suffix='.html.Z', delete=False) as f1:
+    f1.write(b'<html><body>Test content</body></html>')
+    f1_name = f1.name
+
+with tempfile.NamedTemporaryFile(suffix='.html.br', delete=False) as f2:
+    f2.write(b'<html><body>Test content</body></html>')
+    f2_name = f2.name
+
+# Test FileResponse for .Z file
+response_z = FileResponse(open(f1_name, 'rb'))
+print(f"Content-Type for .Z file: {response_z.headers['Content-Type']}")
+response_z.close()
+
+# Test FileResponse for .br file
+response_br = FileResponse(open(f2_name, 'rb'))
+print(f"Content-Type for .br file: {response_br.headers['Content-Type']}")
+response_br.close()
+
+# Clean up
+os.unlink(f1_name)
+os.unlink(f2_name)
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..acbc295110
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,43 @@
+import os
+import tempfile
+import unittest
+import django
+from django.conf import settings
+from django.http import FileResponse
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure()
+    django.setup()
+
+class FileResponseTests(unittest.TestCase):
+    def test_content_type_z_file(self):
+        """Test that .Z files have the correct content type."""
+        with tempfile.NamedTemporaryFile(suffix='.html.Z', delete=False) as f:
+            f.write(b'<html><body>Test content</body></html>')
+            f_name = f.name
+
+        try:
+            response = FileResponse(open(f_name, 'rb'))
+            content_type = response.headers['Content-Type']
+            self.assertEqual(content_type, 'application/x-compress')
+        finally:
+            response.close()
+            os.unlink(f_name)
+
+    def test_content_type_br_file(self):
+        """Test that .br files have the correct content type."""
+        with tempfile.NamedTemporaryFile(suffix='.html.br', delete=False) as f:
+            f.write(b'<html><body>Test content</body></html>')
+            f_name = f.name
+
+        try:
+            response = FileResponse(open(f_name, 'rb'))
+            content_type = response.headers['Content-Type']
+            self.assertEqual(content_type, 'application/wasm')
+        finally:
+            response.close()
+            os.unlink(f_name)
+
+if __name__ == '__main__':
+    unittest.main()
\ No newline at end of file
