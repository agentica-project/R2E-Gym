diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..0d93e8cb0d
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,19 @@
+from sympy import Subs
+from sympy.abc import x, y
+from sympy.printing.latex import LatexPrinter
+
+# Create a Subs object
+subs_expr = Subs(-x + y, (x,), (1,))
+
+# Multiply it by a constant
+multiplied_expr = 3 * subs_expr
+
+# Get the LaTeX representation
+latex_printer = LatexPrinter()
+latex_repr = latex_printer.doprint(multiplied_expr)
+
+# Print the current output
+print("Current LaTeX output:")
+print(latex_repr)
+print("\nExpected LaTeX output:")
+print("'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'")
\ No newline at end of file
diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py
index 8743723ea0..a3d400c84e 100644
--- a/sympy/printing/latex.py
+++ b/sympy/printing/latex.py
@@ -698,7 +698,8 @@ def _print_Derivative(self, expr):
 
     def _print_Subs(self, subs):
         expr, old, new = subs.args
-        latex_expr = self._print(expr)
+        # Parenthesize the expression with precedence level for Mul
+        latex_expr = self.parenthesize(expr, PRECEDENCE['Mul'])
         latex_old = (self._print(e) for e in old)
         latex_new = (self._print(e) for e in new)
         latex_subs = r'\\ '.join(
diff --git a/test_subs_parenthesizing.py b/test_subs_parenthesizing.py
new file mode 100644
index 0000000000..c5c00041e7
--- /dev/null
+++ b/test_subs_parenthesizing.py
@@ -0,0 +1,24 @@
+from sympy import Subs
+from sympy.abc import x, y
+from sympy.printing.latex import latex
+
+def test_subs_parenthesizing():
+    # Test basic Subs
+    actual = latex(Subs(x*y, (x, y), (1, 2)))
+    print(f"Basic Subs LaTeX: {actual}")
+    assert actual == r'\left. \left(x y\right) \right|_{\substack{ x=1\\ y=2 }}'
+
+    # Test Subs with multiplication
+    actual_multiplied = latex(3 * Subs(-x + y, (x,), (1,)))
+    print(f"Multiplied Subs LaTeX: {actual_multiplied}")
+    assert actual_multiplied == r'3 \left. \left(- x + y\right) \right|_{\substack{ x=1 }}'
+
+    # Test more complex expression
+    actual_complex = latex(2 * Subs(x**2 - 3*x + 4, (x,), (2,)))
+    print(f"Complex Subs LaTeX: {actual_complex}")
+    assert actual_complex == r'2 \left. \left(x^{2} - 3 x + 4\right) \right|_{\substack{ x=2 }}'
+
+    print("All tests passed!")
+
+if __name__ == "__main__":
+    test_subs_parenthesizing()
\ No newline at end of file
