diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..9fa6d944c
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,67 @@
+import numpy as np
+from sklearn.linear_model import LassoLarsIC
+import inspect
+
+# Create sample data
+X = np.array([[1, 2], [3, 4], [5, 6]])
+y = np.array([1, 2, 3])
+
+# Print the signature of the fit method to verify our changes
+print("LassoLarsIC.fit signature:", inspect.signature(LassoLarsIC.fit))
+
+# Test 1: Using the default copy_X=None in fit (should use self.copy_X=False)
+print("\nTest 1: Using default copy_X=None in fit (should use self.copy_X=False)")
+model1 = LassoLarsIC(copy_X=False)
+print(f"Model1 copy_X attribute: {model1.copy_X}")
+
+# We'll modify the lars_path function to print which copy_X value is used
+original_lars_path = None
+try:
+    from sklearn.linear_model.least_angle import lars_path as original_lars_path
+
+    def patched_lars_path(*args, **kwargs):
+        print(f"lars_path called with copy_X={kwargs.get('copy_X', 'not provided')}")
+        return original_lars_path(*args, **kwargs)
+
+    # Patch the lars_path function
+    import sklearn.linear_model.least_angle
+    sklearn.linear_model.least_angle.lars_path = patched_lars_path
+
+    # Fit the model
+    model1.fit(X, y)
+finally:
+    # Restore the original lars_path function if it was patched
+    if original_lars_path is not None:
+        sklearn.linear_model.least_angle.lars_path = original_lars_path
+
+# Test 2: Explicitly passing copy_X=True to fit (should override self.copy_X=False)
+print("\nTest 2: Explicitly passing copy_X=True to fit (should override self.copy_X=False)")
+model2 = LassoLarsIC(copy_X=False)
+print(f"Model2 copy_X attribute: {model2.copy_X}")
+
+try:
+    # Patch the lars_path function again
+    sklearn.linear_model.least_angle.lars_path = patched_lars_path
+
+    # Fit the model with explicit copy_X=True
+    model2.fit(X, y, copy_X=True)
+finally:
+    # Restore the original lars_path function
+    if original_lars_path is not None:
+        sklearn.linear_model.least_angle.lars_path = original_lars_path
+
+# Test 3: Using the default copy_X=None in fit with self.copy_X=True
+print("\nTest 3: Using default copy_X=None in fit with self.copy_X=True")
+model3 = LassoLarsIC(copy_X=True)
+print(f"Model3 copy_X attribute: {model3.copy_X}")
+
+try:
+    # Patch the lars_path function again
+    sklearn.linear_model.least_angle.lars_path = patched_lars_path
+
+    # Fit the model
+    model3.fit(X, y)
+finally:
+    # Restore the original lars_path function
+    if original_lars_path is not None:
+        sklearn.linear_model.least_angle.lars_path = original_lars_path
\ No newline at end of file
diff --git a/sklearn/linear_model/least_angle.py b/sklearn/linear_model/least_angle.py
index 03b34a0dc..4c51ab9cd 100644
--- a/sklearn/linear_model/least_angle.py
+++ b/sklearn/linear_model/least_angle.py
@@ -1479,7 +1479,7 @@ class LassoLarsIC(LassoLars):
         self.eps = eps
         self.fit_path = True
 
-    def fit(self, X, y, copy_X=True):
+    def fit(self, X, y, copy_X=None):
         """Fit the model using X, y as training data.
 
         Parameters
@@ -1490,8 +1490,9 @@ class LassoLarsIC(LassoLars):
         y : array-like, shape (n_samples,)
             target values. Will be cast to X's dtype if necessary
 
-        copy_X : boolean, optional, default True
+        copy_X : boolean, optional, default None
             If ``True``, X will be copied; else, it may be overwritten.
+            If None, the value of self.copy_X will be used.
 
         Returns
         -------
@@ -1506,8 +1507,11 @@ class LassoLarsIC(LassoLars):
 
         Gram = self.precompute
 
+        # Use the copy_X parameter from the fit method if provided,
+        # otherwise use the class attribute
+        effective_copy_X = self.copy_X if copy_X is None else copy_X
         alphas_, active_, coef_path_, self.n_iter_ = lars_path(
-            X, y, Gram=Gram, copy_X=copy_X, copy_Gram=True, alpha_min=0.0,
+            X, y, Gram=Gram, copy_X=effective_copy_X, copy_Gram=True, alpha_min=0.0,
             method='lasso', verbose=self.verbose, max_iter=max_iter,
             eps=self.eps, return_n_iter=True, positive=self.positive)
 
