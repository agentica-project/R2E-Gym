diff --git a/django/utils/datastructures.py b/django/utils/datastructures.py
index 871b016715..850e0f0ae5 100644
--- a/django/utils/datastructures.py
+++ b/django/utils/datastructures.py
@@ -25,6 +25,9 @@ class OrderedSet:
     def __iter__(self):
         return iter(self.dict)
 
+    def __reversed__(self):
+        return iter(reversed(self.dict))
+
     def __contains__(self, item):
         return item in self.dict
 
diff --git a/test_orderedset.py b/test_orderedset.py
new file mode 100644
index 0000000000..ba24f5e417
--- /dev/null
+++ b/test_orderedset.py
@@ -0,0 +1,11 @@
+from django.utils.datastructures import OrderedSet
+
+# Create an OrderedSet
+s = OrderedSet([1, 2, 3])
+
+# Try to use reversed() on it
+try:
+    reversed_s = list(reversed(s))
+    print(f"Successfully reversed: {reversed_s}")
+except TypeError as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/test_orderedset_reversed.py b/test_orderedset_reversed.py
new file mode 100644
index 0000000000..a0fd7c2340
--- /dev/null
+++ b/test_orderedset_reversed.py
@@ -0,0 +1,27 @@
+from django.utils.datastructures import OrderedSet
+
+def test_reversed():
+    # Test with empty OrderedSet
+    s = OrderedSet()
+    reversed_s = list(reversed(s))
+    assert reversed_s == [], f"Expected [], got {reversed_s}"
+
+    # Test with single element
+    s = OrderedSet([1])
+    reversed_s = list(reversed(s))
+    assert reversed_s == [1], f"Expected [1], got {reversed_s}"
+
+    # Test with multiple elements
+    s = OrderedSet([1, 2, 3])
+    reversed_s = list(reversed(s))
+    assert reversed_s == [3, 2, 1], f"Expected [3, 2, 1], got {reversed_s}"
+
+    # Test with duplicate elements (should maintain order and uniqueness)
+    s = OrderedSet([1, 2, 2, 3, 1])
+    reversed_s = list(reversed(s))
+    assert reversed_s == [3, 2, 1], f"Expected [3, 2, 1], got {reversed_s}"
+
+    print("All tests passed!")
+
+if __name__ == "__main__":
+    test_reversed()
\ No newline at end of file
