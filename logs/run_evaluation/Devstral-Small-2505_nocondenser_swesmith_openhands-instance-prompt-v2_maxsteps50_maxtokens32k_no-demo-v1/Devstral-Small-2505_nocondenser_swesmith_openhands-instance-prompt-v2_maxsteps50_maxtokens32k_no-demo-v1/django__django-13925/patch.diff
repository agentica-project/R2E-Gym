diff --git a/django/db/models/base.py b/django/db/models/base.py
index 4038859cfa..4d9ca6d2c2 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -1297,6 +1297,10 @@ class Model(metaclass=ModelBase):
 
     @classmethod
     def _check_default_pk(cls):
+        # Skip the check if the model has inherited its primary key
+        if cls._meta.parents and cls._meta.pk in cls._meta.parents.values():
+            return []
+
         if (
             cls._meta.pk.auto_created and
             not settings.is_overridden('DEFAULT_AUTO_FIELD') and
diff --git a/test_inherited_pk.py b/test_inherited_pk.py
new file mode 100644
index 0000000000..ae038238c9
--- /dev/null
+++ b/test_inherited_pk.py
@@ -0,0 +1,41 @@
+from django.db import models
+from django.core.checks import run_checks
+import os
+import django
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+django.setup()
+
+# Define models similar to those in the issue description
+class Entity(models.Model):
+    id = models.AutoField(primary_key=True)
+
+    class Meta:
+        app_label = 'test_app'
+        managed = False  # To avoid creating actual tables
+
+class User(Entity):
+    username = models.CharField(max_length=150)
+
+    class Meta:
+        app_label = 'test_app'
+        managed = False
+
+# Capture the output of check to see if warnings are generated
+def test_inherited_pk_warnings():
+    # Run checks directly
+    errors = run_checks()
+
+    # Check for W042 warnings
+    has_w042_warning = any(error['id'] == 'models.W042' for error in errors)
+
+    print(f"Test results: {'FAILED' if has_w042_warning else 'PASSED'}"
+          f"\nW042 warning present: {has_w042_warning}")
+    if has_w042_warning:
+        for error in errors:
+            if error['id'] == 'models.W042':
+                print(f"Warning details: {error}")
+
+if __name__ == "__main__":
+    test_inherited_pk_warnings()
\ No newline at end of file
diff --git a/test_inherited_pk_thorough.py b/test_inherited_pk_thorough.py
new file mode 100644
index 0000000000..5d586c429e
--- /dev/null
+++ b/test_inherited_pk_thorough.py
@@ -0,0 +1,79 @@
+from django.db import models
+from django.core.checks import run_checks
+import os
+import django
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+django.setup()
+
+# Define models similar to those in the issue description
+class Entity(models.Model):
+    id = models.AutoField(primary_key=True)
+
+    class Meta:
+        app_label = 'test_app'
+        managed = False  # To avoid creating actual tables
+
+class User(Entity):
+    username = models.CharField(max_length=150)
+
+    class Meta:
+        app_label = 'test_app'
+        managed = False
+
+class Block(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'test_app'
+        managed = False
+
+class Feedback(models.Model):
+    comment = models.TextField()
+
+    class Meta:
+        app_label = 'test_app'
+        managed = False
+
+# Define a model with an auto-created primary key (should trigger warning)
+class AutoPKModel(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'test_app'
+        managed = False
+
+# Capture the output of check to see if warnings are generated
+def test_inherited_pk_warnings():
+    # Run checks directly
+    errors = run_checks()
+
+    # We expect a warning only for AutoPKModel, not for models that inherit a PK
+    inherited_models = [Entity, User, Block, Feedback]
+    auto_pk_models = [AutoPKModel]
+
+    # Count warnings for each type of model
+    inherited_warnings = sum(1 for error in errors
+                            if error['id'] == 'models.W042'
+                            and any(error['obj'] == model for model in inherited_models))
+
+    auto_pk_warnings = sum(1 for error in errors
+                           if error['id'] == 'models.W042'
+                           and any(error['obj'] == model for model in auto_pk_models))
+
+    print(f"Test results: {'FAILED' if inherited_warnings > 0 else 'PASSED'}")
+    print(f"W042 warnings for models with inherited PK: {inherited_warnings}")
+    print(f"W042 warnings for models with auto-created PK: {auto_pk_warnings}")
+
+    if inherited_warnings > 0:
+        print("FAILURE: Models with inherited PK should not trigger W042 warnings")
+        for error in errors:
+            if error['id'] == 'models.W042' and error['obj'] in inherited_models:
+                print(f"Warning for inherited PK model: {error['obj'].__name__}")
+
+    if auto_pk_warnings == 0:
+        print("WARNING: Models with auto-created PK should trigger W042 warnings")
+
+if __name__ == "__main__":
+    test_inherited_pk_warnings()
\ No newline at end of file
