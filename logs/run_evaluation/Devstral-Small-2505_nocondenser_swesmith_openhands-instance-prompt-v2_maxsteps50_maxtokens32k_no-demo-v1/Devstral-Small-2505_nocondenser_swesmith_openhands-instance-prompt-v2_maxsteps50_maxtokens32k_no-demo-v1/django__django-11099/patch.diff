diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py
index b4878cfd45..1304f20a60 100644
--- a/django/contrib/auth/validators.py
+++ b/django/contrib/auth/validators.py
@@ -7,7 +7,7 @@ from django.utils.translation import gettext_lazy as _
 
 @deconstructible
 class ASCIIUsernameValidator(validators.RegexValidator):
-    regex = r'^[\w.@+-]+$'
+    regex = r'\A[\w.@+-]+\Z'
     message = _(
         'Enter a valid username. This value may contain only English letters, '
         'numbers, and @/./+/-/_ characters.'
@@ -17,7 +17,7 @@ class ASCIIUsernameValidator(validators.RegexValidator):
 
 @deconstructible
 class UnicodeUsernameValidator(validators.RegexValidator):
-    regex = r'^[\w.@+-]+$'
+    regex = r'\A[\w.@+-]+\Z'
     message = _(
         'Enter a valid username. This value may contain only letters, '
         'numbers, and @/./+/-/_ characters.'
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100755
index 0000000000..e45e1afbca
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,33 @@
+#!/usr/bin/env python
+"""
+Script to reproduce the issue with UsernameValidator allowing trailing newlines.
+"""
+import sys
+from django.contrib.auth import validators
+from django.core.exceptions import ValidationError
+
+def test_validator_with_newline(validator_class, username):
+    """Test if a validator accepts a username with a trailing newline."""
+    validator = validator_class()
+    try:
+        validator(username)
+        print(f"{validator_class.__name__} accepted '{username!r}' (should have rejected it)")
+        return False
+    except ValidationError:
+        print(f"{validator_class.__name__} correctly rejected '{username!r}'")
+        return True
+
+def main():
+    # Test with both validators
+    username_with_newline = "testuser\n"
+
+    print("Testing with username ending in newline:")
+    ascii_result = test_validator_with_newline(validators.ASCIIUsernameValidator, username_with_newline)
+    unicode_result = test_validator_with_newline(validators.UnicodeUsernameValidator, username_with_newline)
+
+    # Exit with error code if any validator failed
+    if not (ascii_result and unicode_result):
+        sys.exit(1)
+
+if __name__ == "__main__":
+    main()
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..5107f5e77e
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,30 @@
+import os
+
+# Configure Django settings
+INSTALLED_APPS = [
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'tests.auth_tests',
+]
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+SECRET_KEY = 'not-really-a-secret'
+DEBUG = True
+
+# Add any other necessary settings here
+AUTH_PASSWORD_VALIDATORS = [
+    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
+    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
+    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
+    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
+]
+
+# Import django after settings are configured
+import django
+django.setup()
\ No newline at end of file
