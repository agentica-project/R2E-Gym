diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..1b6ded56a4
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,45 @@
+from sympy.combinatorics import *
+from sympy.combinatorics.homomorphisms import homomorphism
+
+def test_dihedral_group():
+    # Test with DihedralGroup
+    D3 = DihedralGroup(3)
+    T = homomorphism(D3, D3, D3.generators, D3.generators)
+    print("D3 homomorphism successful")
+
+    # Test with a different mapping
+    D4 = DihedralGroup(4)
+    T = homomorphism(D4, D4, D4.generators, D4.generators)
+    print("D4 homomorphism successful")
+
+def test_custom_permutation_group():
+    # Create a custom permutation group
+    a = Permutation(1,2,3,4)
+    b = Permutation(1,3)
+    G = PermutationGroup([a, b])
+
+    # Test homomorphism with the same group
+    T = homomorphism(G, G, G.generators, G.generators)
+    print("Custom permutation group homomorphism successful")
+
+    # Test with a different mapping - must be elements of the codomain
+    images = G.generators  # Use the group's own generators as images
+    T = homomorphism(G, G, G.generators, images)
+    print("Custom permutation group homomorphism with different mapping successful")
+
+def test_inverted_generators():
+    # Test specifically with inverted generators
+    D3 = DihedralGroup(3)
+    gens = D3.generators
+    images = [g**-1 for g in gens]  # Map each generator to its inverse
+
+    # This should work with our fix
+    T = homomorphism(D3, D3, gens, images)
+    print("Homomorphism with inverted generators successful")
+
+if __name__ == "__main__":
+    print("Running comprehensive tests...")
+    test_dihedral_group()
+    test_custom_permutation_group()
+    test_inverted_generators()
+    print("All tests passed!")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..26e319af5d
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,14 @@
+from sympy.combinatorics import *
+from sympy.combinatorics.homomorphisms import homomorphism
+
+# Create a DihedralGroup with 3 elements
+D3 = DihedralGroup(3)
+print("D3 generators:", D3.generators)
+
+# Try to create a homomorphism from D3 to D3 using its generators
+try:
+    T = homomorphism(D3, D3, D3.generators, D3.generators)
+    print("Homomorphism created successfully!")
+    print("T(D3.generators[0]):", T(D3.generators[0]))
+except Exception as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/sympy/combinatorics/homomorphisms.py b/sympy/combinatorics/homomorphisms.py
index bb7bdf32ba..36c3e378ad 100644
--- a/sympy/combinatorics/homomorphisms.py
+++ b/sympy/combinatorics/homomorphisms.py
@@ -333,10 +333,19 @@ def _image(r):
             # both indices
             while i < len(r):
                 power = r_arr[j][1]
-                if isinstance(domain, PermutationGroup) and r[i] in gens:
-                    s = domain.generators[gens.index(r[i])]
+                if isinstance(domain, PermutationGroup):
+                    # For permutation groups, we need to handle both generators and their inverses
+                    if r[i] in gens:
+                        s = domain.generators[gens.index(r[i])]
+                    elif r[i]**-1 in gens:
+                        # Handle inverted generators
+                        idx = gens.index(r[i]**-1)
+                        s = domain.generators[idx]**-1
+                    else:
+                        s = r[i]
                 else:
                     s = r[i]
+
                 if s in images:
                     w = w*images[s]**power
                 elif s**-1 in images:
