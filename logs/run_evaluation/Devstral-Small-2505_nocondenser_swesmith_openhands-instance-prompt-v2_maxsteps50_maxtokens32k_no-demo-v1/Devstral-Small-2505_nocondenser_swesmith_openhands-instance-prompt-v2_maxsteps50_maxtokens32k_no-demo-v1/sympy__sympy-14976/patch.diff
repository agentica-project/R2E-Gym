diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..f70dfb7ba3
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,27 @@
+from sympy import symbols, Eq, rf, S, lambdify, nsolve, Float
+import inspect
+
+# Create the equation with a rational number
+x = symbols('x')
+eqn = Eq(rf(18, x), 77 + S(1)/3)
+
+# Use lambdify with mpmath
+f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')
+
+# Print the generated function
+print("Generated function:")
+print(inspect.getsource(f))
+
+# Try to solve the equation with high precision
+x0 = nsolve(eqn, Float('1.5', 64), prec=64)
+print("\nSolution with nsolve:")
+print(f"x0 = {x0}")
+
+# Evaluate the left side of the equation at the solution
+lf = rf(18, x0).evalf(64)
+print(f"rf(18, x0) = {lf}")
+
+# Check if the result matches the expected value (77 + 1/3 = 232/3)
+expected = 232/3
+print(f"Expected value = {expected}")
+print(f"Difference = {abs(lf - expected)}")
\ No newline at end of file
diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py
index d06901425d..d25e764b38 100644
--- a/sympy/printing/pycode.py
+++ b/sympy/printing/pycode.py
@@ -331,6 +331,18 @@ def _print_Float(self, e):
         args = str(tuple(map(int, e._mpf_)))
         return '{func}({args})'.format(func=self._module_format('mpmath.mpf'), args=args)
 
+    def _print_Rational(self, expr):
+        # Wrap rational numbers with mpmath.mpf to maintain full precision
+        if expr.q == 1:
+            # If the denominator is 1, it's just an integer
+            return str(expr.p)
+        else:
+            # For other rationals, use mpmath.mpf to maintain precision
+            return '{func}({p}/{q})'.format(
+                func=self._module_format('mpmath.mpf'),
+                p=expr.p,
+                q=expr.q)
+
 
     def _print_uppergamma(self, e):
         return "{0}({1}, {2}, {3})".format(
