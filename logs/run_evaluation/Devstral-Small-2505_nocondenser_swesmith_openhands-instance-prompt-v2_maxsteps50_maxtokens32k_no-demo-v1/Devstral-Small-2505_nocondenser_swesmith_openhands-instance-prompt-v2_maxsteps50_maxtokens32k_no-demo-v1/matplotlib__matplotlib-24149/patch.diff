diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..91b75f2d47
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,27 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+# Test various combinations of NaN values
+test_cases = [
+    # (x values, height values, description)
+    ([np.nan], [np.nan], "All NaN"),
+    ([np.nan], [0], "NaN x, 0 height"),
+    ([0], [np.nan], "0 x, NaN height"),
+    ([1, 2, 3], [4, 5, 6], "All finite"),
+    ([1, np.nan, 3], [4, 5, 6], "Some NaN in x"),
+    ([np.nan, np.nan, 3], [4, 5, 6], "Most NaN in x"),
+    ([1, 2, 3], [np.nan, np.nan, 6], "Some NaN in height"),
+    ([np.nan, 2, 3], [np.nan, 5, 6], "Mixed NaN"),
+    ([], [], "Empty arrays"),
+]
+
+for x_vals, height_vals, desc in test_cases:
+    print(f"\nTest case: {desc}")
+    try:
+        f, ax = plt.subplots()
+        bars = ax.bar(x_vals, height_vals)
+        print(f"Success: Bar plot created with {len(bars)} bars")
+    except Exception as e:
+        print(f"Error: {type(e).__name__}: {e}")
+
+plt.close('all')
\ No newline at end of file
diff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py
index 34c6ddb861..6de52b1444 100644
--- a/lib/matplotlib/cbook/__init__.py
+++ b/lib/matplotlib/cbook/__init__.py
@@ -1746,7 +1746,14 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):
         raise RuntimeError("matplotlib does not "
                            "support generators as input")
     else:
-        return next(val for val in obj if safe_isfinite(val))
+        try:
+            return next(val for val in obj if safe_isfinite(val))
+        except StopIteration:
+            # If there are no finite values, return the first element
+            # This handles the case when all values are NaN
+            if hasattr(obj, "__getitem__"):
+                return obj[0]
+            return next(iter(obj))
 
 
 def sanitize_sequence(data):
diff --git a/lib/matplotlib/tests/test_cbook.py b/lib/matplotlib/tests/test_cbook.py
index eda0c3b7eb..8fcf6fab15 100644
--- a/lib/matplotlib/tests/test_cbook.py
+++ b/lib/matplotlib/tests/test_cbook.py
@@ -896,6 +896,12 @@ def test_safe_first_element_with_none():
     actual = cbook._safe_first_finite(datetime_lst)
     assert actual is not None and actual == datetime_lst[1]
 
+def test_safe_first_finite_all_nan():
+    # Test that _safe_first_finite handles arrays with all NaN values
+    nan_array = [np.nan, np.nan, np.nan]
+    actual = cbook._safe_first_finite(nan_array)
+    assert np.isnan(actual)
+
 
 @pytest.mark.parametrize('fmt, value, result', [
     ('%.2f m', 0.2, '0.20 m'),
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..cb8d1bead5
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,31 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+# Test case 1: All NaN values for x and height
+print("Test case 1: All NaN values for x and height")
+try:
+    f, ax = plt.subplots()
+    ax.bar([np.nan], [np.nan])
+    print("Success: No exception raised")
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {e}")
+
+# Test case 2: NaN for x, 0 for height
+print("\nTest case 2: NaN for x, 0 for height")
+try:
+    f, ax = plt.subplots()
+    ax.bar([np.nan], [0])
+    print("Success: No exception raised")
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {e}")
+
+# Test case 3: 0 for x, NaN for height
+print("\nTest case 3: 0 for x, NaN for height")
+try:
+    f, ax = plt.subplots()
+    ax.bar([0], [np.nan])
+    print("Success: No exception raised")
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {e}")
+
+plt.close('all')
\ No newline at end of file
