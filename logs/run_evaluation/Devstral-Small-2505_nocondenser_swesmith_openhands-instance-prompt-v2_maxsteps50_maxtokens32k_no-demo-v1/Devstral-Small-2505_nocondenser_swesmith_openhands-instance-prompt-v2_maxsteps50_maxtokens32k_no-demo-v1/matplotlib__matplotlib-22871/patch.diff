diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py
index 4d8ddf3ee5..78cdbf9586 100644
--- a/lib/matplotlib/dates.py
+++ b/lib/matplotlib/dates.py
@@ -840,7 +840,23 @@ class ConciseDateFormatter(ticker.Formatter):
 
         if show_offset:
             # set the offset string:
-            self.offset_string = tickdatetime[-1].strftime(offsetfmts[level])
+            # For time ranges < 1 year where January is not included, ensure the year
+            # is shown in the offset area (fix for issue with ConciseDateFormatter)
+            if level > 0 and len(np.unique(tickdate[:, 0])) == 1:
+                # Same year for all ticks but time range < 1 year
+                # Check if January is in the range
+                has_january = any(td.month == 1 for td in tickdatetime)
+                if not has_january:
+                    # No January in the range, just show the year
+                    # This fixes the issue where the year wasn't showing up
+                    self.offset_string = tickdatetime[-1].strftime('%Y')
+                else:
+                    # January is in the range, use the original format
+                    self.offset_string = tickdatetime[-1].strftime(offsetfmts[level])
+            else:
+                # Use the original format for all other cases
+                self.offset_string = tickdatetime[-1].strftime(offsetfmts[level])
+
             if self._usetex:
                 self.offset_string = _wrap_in_tex(self.offset_string)
         else:
diff --git a/output.png b/output.png
new file mode 100644
index 0000000000..96fc9f5ede
Binary files /dev/null and b/output.png differ
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..26e6cc019b
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,27 @@
+import matplotlib.pyplot as plt
+import matplotlib.dates as mdates
+from datetime import datetime, timedelta
+
+#create time array
+initial = datetime(2021,2,14,0,0,0)
+time_array = [initial + timedelta(days=x) for x in range(1,200)]
+
+#create data array
+data = [-x**2/20000 for x in range(1,200)]
+
+#plot data
+fig,ax = plt.subplots()
+ax.plot(time_array,data)
+
+locator = mdates.AutoDateLocator()
+formatter = mdates.ConciseDateFormatter(locator)
+
+ax.grid(True)
+ax.set_ylabel("Temperature ($\degree$C)")
+ax.xaxis.set_major_locator(locator)
+ax.xaxis.set_major_formatter(formatter)
+fig.autofmt_xdate() #automatically makes the x-labels rotate
+
+plt.savefig('output.png')
+plt.close()
+print("Plot saved as output.png")
\ No newline at end of file
diff --git a/test_case1.png b/test_case1.png
new file mode 100644
index 0000000000..8508723688
Binary files /dev/null and b/test_case1.png differ
diff --git a/test_case2.png b/test_case2.png
new file mode 100644
index 0000000000..e1c868d877
Binary files /dev/null and b/test_case2.png differ
diff --git a/test_case3.png b/test_case3.png
new file mode 100644
index 0000000000..a3ced9af65
Binary files /dev/null and b/test_case3.png differ
diff --git a/test_case4.png b/test_case4.png
new file mode 100644
index 0000000000..a859045448
Binary files /dev/null and b/test_case4.png differ
diff --git a/test_case5.png b/test_case5.png
new file mode 100644
index 0000000000..98f347b66a
Binary files /dev/null and b/test_case5.png differ
diff --git a/test_year_display.py b/test_year_display.py
new file mode 100644
index 0000000000..ac3db7747a
--- /dev/null
+++ b/test_year_display.py
@@ -0,0 +1,74 @@
+import matplotlib.pyplot as plt
+import matplotlib.dates as mdates
+from datetime import datetime, timedelta
+import numpy as np
+
+def create_test_plot(start_date, days_range, title, filename):
+    """Create a test plot with the given date range and save it as a file."""
+    # Create time array
+    time_array = [start_date + timedelta(days=x) for x in range(days_range)]
+
+    # Create data array
+    data = np.sin(np.linspace(0, 10, days_range))
+
+    # Plot data
+    fig, ax = plt.subplots(figsize=(10, 6))
+    ax.plot(time_array, data)
+
+    locator = mdates.AutoDateLocator()
+    formatter = mdates.ConciseDateFormatter(locator)
+
+    ax.grid(True)
+    ax.set_title(title)
+    ax.xaxis.set_major_locator(locator)
+    ax.xaxis.set_major_formatter(formatter)
+    fig.autofmt_xdate()  # Automatically makes the x-labels rotate
+
+    plt.savefig(filename)
+    plt.close()
+    print(f"Plot saved as {filename}")
+
+# Test cases
+print("Running test cases...")
+
+# Case 1: Less than 12 months, starting in February (original issue)
+create_test_plot(
+    datetime(2021, 2, 14, 0, 0, 0),
+    200,
+    "Less than 12 months, starting in February",
+    "test_case1.png"
+)
+
+# Case 2: Exactly 12 months
+create_test_plot(
+    datetime(2021, 1, 15, 0, 0, 0),
+    365,
+    "Exactly 12 months",
+    "test_case2.png"
+)
+
+# Case 3: More than 12 months
+create_test_plot(
+    datetime(2021, 3, 10, 0, 0, 0),
+    400,
+    "More than 12 months",
+    "test_case3.png"
+)
+
+# Case 4: Less than 6 months
+create_test_plot(
+    datetime(2021, 5, 1, 0, 0, 0),
+    100,
+    "Less than 6 months",
+    "test_case4.png"
+)
+
+# Case 5: Less than 1 month
+create_test_plot(
+    datetime(2021, 7, 10, 0, 0, 0),
+    10,
+    "Less than 1 month",
+    "test_case5.png"
+)
+
+print("All test cases completed.")
\ No newline at end of file
