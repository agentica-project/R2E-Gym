diff --git a/annotation_test.png b/annotation_test.png
new file mode 100644
index 0000000000..85a882ee61
Binary files /dev/null and b/annotation_test.png differ
diff --git a/lib/matplotlib/tests/test_annotation_array_reference.py b/lib/matplotlib/tests/test_annotation_array_reference.py
new file mode 100644
index 0000000000..d42715ae82
--- /dev/null
+++ b/lib/matplotlib/tests/test_annotation_array_reference.py
@@ -0,0 +1,32 @@
+import numpy as np
+import pytest
+import matplotlib.pyplot as plt
+from matplotlib.text import Annotation
+
+def test_annotation_array_reference():
+    """Test that modifying a numpy array after passing it to annotate doesn't affect the annotation."""
+    # Create a figure and axis
+    fig, ax = plt.subplots()
+
+    # Create arrays for annotation
+    xy_0 = np.array((-4, 1))
+    xy_f = np.array((-1, 1))
+
+    # Create annotation
+    annot = ax.annotate('', xy=xy_0, xytext=xy_f, arrowprops=dict(arrowstyle='<->'))
+
+    # Store original y value
+    original_y = xy_0[1]
+
+    # Modify the array
+    xy_0[1] = 3
+
+    # Verify that the annotation's xy value hasn't changed
+    assert annot.xy[1] == original_y
+
+    # Clean up
+    plt.close(fig)
+
+if __name__ == "__main__":
+    test_annotation_array_reference()
+    print("Test passed!")
\ No newline at end of file
diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py
index d4922fc517..2b994df26c 100644
--- a/lib/matplotlib/text.py
+++ b/lib/matplotlib/text.py
@@ -1456,7 +1456,12 @@ class _AnnotationBase:
                  xycoords='data',
                  annotation_clip=None):
 
-        self.xy = xy
+        # Make a copy of xy if it's a numpy array to avoid reference issues
+        import numpy as np
+        if isinstance(xy, np.ndarray):
+            self.xy = xy.copy()
+        else:
+            self.xy = xy
         self.xycoords = xycoords
         self.set_annotation_clip(annotation_clip)
 
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..392e17fa98
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,43 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+def test_annotation_array_reference():
+    fig = plt.figure("test")
+
+    ax = fig.add_axes([0.13, 0.15, .8, .8])
+    ax.set_xlim(-5, 5)
+    ax.set_ylim(-3, 3)
+
+    # First annotation with direct array reference (before fix, this would change)
+    xy_0 = np.array((-4, 1))
+    xy_f = np.array((-1, 1))
+    ax.annotate('', xy=xy_0, xytext=xy_f, arrowprops=dict(arrowstyle='<->'))
+    original_y0 = xy_0[1].copy()  # Store original y value
+    xy_0[1] = 3  # Modify the array after annotation
+
+    # Second annotation with array copy (this should remain unchanged)
+    xy_0 = np.array((1, 1))
+    xy_f = np.array((4, 1))
+    ax.annotate('', xy=xy_0.copy(), xytext=xy_f, arrowprops=dict(arrowstyle='<->'))
+    xy_0[1] = 3  # Modify the array after annotation
+
+    # Add labels to identify the arrows
+    ax.text(-2, 2.5, "Arrow 1: Direct array reference", fontsize=12)
+    ax.text(2, 2.5, "Arrow 2: Array copy", fontsize=12)
+
+    # Add markers to show original positions
+    ax.plot(-4, original_y0, 'ro')  # Original position of first arrow
+    ax.plot(1, 1, 'bo')  # Original position of second arrow
+
+    plt.savefig("annotation_test.png")
+    plt.close()
+
+    # Return success status
+    return True
+
+if __name__ == "__main__":
+    success = test_annotation_array_reference()
+    if success:
+        print("Test completed successfully. Check annotation_test.png")
+    else:
+        print("Test failed!")
\ No newline at end of file
