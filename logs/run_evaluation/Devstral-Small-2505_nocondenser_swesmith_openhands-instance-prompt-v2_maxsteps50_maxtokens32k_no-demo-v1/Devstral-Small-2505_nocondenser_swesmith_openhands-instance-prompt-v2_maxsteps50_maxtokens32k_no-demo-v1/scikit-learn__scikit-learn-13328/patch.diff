diff --git a/reproduce_huber_issue.py b/reproduce_huber_issue.py
new file mode 100644
index 000000000..1eb7f0c1e
--- /dev/null
+++ b/reproduce_huber_issue.py
@@ -0,0 +1,30 @@
+import numpy as np
+from sklearn.datasets import make_regression
+from sklearn.linear_model import HuberRegressor
+
+# Random data
+X, y, coef = make_regression(n_samples=200, n_features=2, noise=4.0, coef=True, random_state=0)
+X_bool = X > 0
+
+print("Testing HuberRegressor with different input types:")
+print("1. Original numeric array (should work)")
+try:
+    huber = HuberRegressor().fit(X, y)
+    print("  Success!")
+except Exception as e:
+    print(f"  Failed with error: {type(e).__name__}: {e}")
+
+print("\n2. Boolean array (currently fails)")
+try:
+    huber = HuberRegressor().fit(X_bool, y)
+    print("  Success!")
+except Exception as e:
+    print(f"  Failed with error: {type(e).__name__}: {e}")
+
+print("\n3. Boolean array converted to float (should work)")
+X_bool_as_float = np.asarray(X_bool, dtype=float)
+try:
+    huber = HuberRegressor().fit(X_bool_as_float, y)
+    print("  Success!")
+except Exception as e:
+    print(f"  Failed with error: {type(e).__name__}: {e}")
\ No newline at end of file
diff --git a/sklearn/linear_model/huber.py b/sklearn/linear_model/huber.py
index 65c686400..81ef60bb6 100644
--- a/sklearn/linear_model/huber.py
+++ b/sklearn/linear_model/huber.py
@@ -11,6 +11,7 @@ from ..utils import check_X_y
 from ..utils import check_consistent_length
 from ..utils import axis0_safe_slice
 from ..utils.extmath import safe_sparse_dot
+from ..utils.validation import FLOAT_DTYPES
 
 
 def _huber_loss_and_gradient(w, X, y, epsilon, alpha, sample_weight=None):
@@ -251,7 +252,8 @@ class HuberRegressor(LinearModel, RegressorMixin, BaseEstimator):
         self : object
         """
         X, y = check_X_y(
-            X, y, copy=False, accept_sparse=['csr'], y_numeric=True)
+            X, y, copy=False, accept_sparse=['csr'], y_numeric=True,
+            dtype=FLOAT_DTYPES)
         if sample_weight is not None:
             sample_weight = np.array(sample_weight)
             check_consistent_length(y, sample_weight)
diff --git a/test_huber_bool_input.py b/test_huber_bool_input.py
new file mode 100644
index 000000000..2651cac5e
--- /dev/null
+++ b/test_huber_bool_input.py
@@ -0,0 +1,33 @@
+import numpy as np
+import pytest
+from sklearn.datasets import make_regression
+from sklearn.linear_model import HuberRegressor, LinearRegression
+
+def test_huber_with_boolean_input():
+    """Test that HuberRegressor can handle boolean input arrays."""
+    # Create test data
+    X, y = make_regression(n_samples=200, n_features=3, noise=4.0, random_state=42)
+    X_bool = X > 0  # Convert to boolean
+
+    # Test with LinearRegression (should work)
+    lr = LinearRegression().fit(X_bool, y)
+
+    # Test with HuberRegressor (should work after our fix)
+    huber = HuberRegressor().fit(X_bool, y)
+
+    # Verify that predictions are reasonable
+    assert np.all(np.isfinite(huber.predict(X_bool)))
+    assert np.all(np.isfinite(lr.predict(X_bool)))
+
+    # Verify that coefficients are reasonable
+    assert np.all(np.isfinite(huber.coef_))
+    assert np.all(np.isfinite(lr.coef_))
+
+    # Test with mixed data types
+    X_mixed = np.hstack([X_bool, X[:, :1]])  # Mix boolean and float columns
+    huber_mixed = HuberRegressor().fit(X_mixed, y)
+    assert np.all(np.isfinite(huber_mixed.predict(X_mixed)))
+
+if __name__ == "__main__":
+    test_huber_with_boolean_input()
+    print("All tests passed!")
\ No newline at end of file
