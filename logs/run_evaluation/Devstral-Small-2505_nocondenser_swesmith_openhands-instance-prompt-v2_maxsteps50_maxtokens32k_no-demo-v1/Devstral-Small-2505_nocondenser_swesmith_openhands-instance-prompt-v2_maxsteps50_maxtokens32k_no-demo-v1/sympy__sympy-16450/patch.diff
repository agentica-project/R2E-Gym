diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..56b7db7905
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,81 @@
+from sympy import Symbol, posify, symbols
+
+def test_posify_preserves_assumptions():
+    # Test with various assumptions
+    assumptions_to_test = [
+        ('finite', True),
+        ('integer', True),
+        ('rational', True),
+        ('prime', True),
+        ('even', True),
+        ('odd', True),
+        ('algebraic', True),
+        ('transcendental', True),
+        ('real', True),
+        ('imaginary', True),
+        ('complex', True),
+        ('hermitian', True),
+        ('antihermitian', True),
+    ]
+
+    for assumption, value in assumptions_to_test:
+        # Skip assumptions that conflict with positive=True
+        if assumption in ('negative', 'zero', 'nonpositive'):
+            continue
+
+        # Create a symbol with the assumption
+        sym_name = f"x_{assumption}"
+        x = Symbol(sym_name, **{assumption: value})
+
+        # Check the original assumption
+        original_value = getattr(x, f"is_{assumption}")
+
+        # Apply posify
+        xp, _ = posify(x)
+
+        # Check if the assumption is preserved
+        posified_value = getattr(xp, f"is_{assumption}")
+
+        # Print results
+        print(f"Testing {assumption}={value}:")
+        print(f"  Original symbol is_{assumption}: {original_value}")
+        print(f"  Posified symbol is_{assumption}: {posified_value}")
+        print(f"  Preserved: {original_value == posified_value}")
+        print()
+
+        # Assert that the assumption is preserved
+        assert original_value == posified_value, f"Failed to preserve {assumption} assumption"
+
+    print("All assumption tests passed!")
+
+# Test with multiple assumptions
+def test_posify_with_multiple_assumptions():
+    # Create a symbol with multiple assumptions
+    x = symbols('x', finite=True, integer=True, rational=True, prime=True)
+
+    # Check original assumptions
+    print("Original symbol assumptions:")
+    for assumption in ['finite', 'integer', 'rational', 'prime']:
+        print(f"  is_{assumption}: {getattr(x, f'is_{assumption}')}")
+
+    # Apply posify
+    xp, _ = posify(x)
+
+    # Check posified assumptions
+    print("\nPosified symbol assumptions:")
+    for assumption in ['finite', 'integer', 'rational', 'prime']:
+        print(f"  is_{assumption}: {getattr(xp, f'is_{assumption}')}")
+
+    # Verify all assumptions are preserved
+    for assumption in ['finite', 'integer', 'rational', 'prime']:
+        original = getattr(x, f'is_{assumption}')
+        posified = getattr(xp, f'is_{assumption}')
+        assert original == posified, f"Failed to preserve {assumption} assumption"
+
+    print("\nMultiple assumptions test passed!")
+
+if __name__ == "__main__":
+    print("Testing posify with various assumptions...\n")
+    test_posify_preserves_assumptions()
+    print("\n" + "="*50 + "\n")
+    test_posify_with_multiple_assumptions()
\ No newline at end of file
diff --git a/issue_test.py b/issue_test.py
new file mode 100644
index 0000000000..6fe34e5141
--- /dev/null
+++ b/issue_test.py
@@ -0,0 +1,10 @@
+from sympy import Symbol, posify
+
+# Reproduce the exact test case from the issue description
+x = Symbol('x', finite=True)
+print("Original symbol assumptions:", x._assumptions)
+print("Original symbol is_finite:", x.is_finite)
+
+xp, _ = posify(x)
+print("\nPosified symbol assumptions:", xp._assumptions)
+print("Posified symbol is_finite:", xp.is_finite)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..df75fa1e5f
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,28 @@
+from sympy import Symbol, posify
+
+# Create a symbol with finite=True assumption
+x = Symbol('x', finite=True)
+
+# Check the assumptions
+print("Original symbol assumptions:", x._assumptions)
+print("Original symbol is_finite:", x.is_finite)
+
+# Apply posify
+xp, _ = posify(x)
+
+# Check the assumptions of the result
+print("Posified symbol assumptions:", xp._assumptions)
+print("Posified symbol is_finite:", xp.is_finite)
+
+# Also test with other assumptions
+x2 = Symbol('x2', finite=True, integer=True, rational=True)
+x2p, _ = posify(x2)
+print("\nOriginal symbol2 assumptions:", x2._assumptions)
+print("Original symbol2 is_finite:", x2.is_finite)
+print("Original symbol2 is_integer:", x2.is_integer)
+print("Original symbol2 is_rational:", x2.is_rational)
+
+print("Posified symbol2 assumptions:", x2p._assumptions)
+print("Posified symbol2 is_finite:", x2p.is_finite)
+print("Posified symbol2 is_integer:", x2p.is_integer)
+print("Posified symbol2 is_rational:", x2p.is_rational)
\ No newline at end of file
diff --git a/sympy/simplify/simplify.py b/sympy/simplify/simplify.py
index c6b511f206..b12de630c8 100644
--- a/sympy/simplify/simplify.py
+++ b/sympy/simplify/simplify.py
@@ -251,8 +251,17 @@ def posify(eq):
             eq[i] = e.subs(reps)
         return f(eq), {r: s for s, r in reps.items()}
 
-    reps = {s: Dummy(s.name, positive=True)
-                 for s in eq.free_symbols if s.is_positive is None}
+    reps = {}
+    for s in eq.free_symbols:
+        if s.is_positive is None:
+            # Copy all assumptions from the original symbol except those that conflict with positive=True
+            assumptions = dict(s._assumptions._generator)
+            # Ensure positive=True and negative=False for the new symbol
+            assumptions['positive'] = True
+            assumptions['negative'] = False
+            # Create a new Dummy symbol with the copied assumptions
+            reps[s] = Dummy(s.name, **assumptions)
+
     eq = eq.subs(reps)
     return eq, {r: s for s, r in reps.items()}
 
