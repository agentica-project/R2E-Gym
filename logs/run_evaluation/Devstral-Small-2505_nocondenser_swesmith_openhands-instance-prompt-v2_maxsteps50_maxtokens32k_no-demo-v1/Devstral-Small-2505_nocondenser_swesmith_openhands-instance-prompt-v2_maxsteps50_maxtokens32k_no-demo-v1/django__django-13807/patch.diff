diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py
index 2eeaf98c0d..6eace906e5 100644
--- a/django/db/backends/sqlite3/base.py
+++ b/django/db/backends/sqlite3/base.py
@@ -327,19 +327,19 @@ class DatabaseWrapper(BaseDatabaseWrapper):
                     violations = cursor.execute('PRAGMA foreign_key_check').fetchall()
                 else:
                     violations = chain.from_iterable(
-                        cursor.execute('PRAGMA foreign_key_check(%s)' % table_name).fetchall()
+                        cursor.execute('PRAGMA foreign_key_check(%s)' % self.ops.quote_name(table_name)).fetchall()
                         for table_name in table_names
                     )
                 # See https://www.sqlite.org/pragma.html#pragma_foreign_key_check
                 for table_name, rowid, referenced_table_name, foreign_key_index in violations:
                     foreign_key = cursor.execute(
-                        'PRAGMA foreign_key_list(%s)' % table_name
+                        'PRAGMA foreign_key_list(%s)' % self.ops.quote_name(table_name)
                     ).fetchall()[foreign_key_index]
                     column_name, referenced_column_name = foreign_key[3:5]
                     primary_key_column_name = self.introspection.get_primary_key_column(cursor, table_name)
                     primary_key_value, bad_value = cursor.execute(
                         'SELECT %s, %s FROM %s WHERE rowid = %%s' % (
-                            primary_key_column_name, column_name, table_name
+                            primary_key_column_name, column_name, self.ops.quote_name(table_name)
                         ),
                         (rowid,),
                     ).fetchone()
diff --git a/django_test.py b/django_test.py
new file mode 100644
index 0000000000..ff570a07f2
--- /dev/null
+++ b/django_test.py
@@ -0,0 +1,91 @@
+import os
+import sys
+import tempfile
+import shutil
+import json
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, '/testbed')
+
+from django.conf import settings
+from django.db import models, connection
+from django.core.management import call_command
+import django
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.db.backends.sqlite3',
+    ],
+)
+
+# Create a model with a name that's a SQL reserved word
+class Order(models.Model):
+    name = models.CharField(max_length=100)
+    product_id = models.IntegerField()
+
+    class Meta:
+        db_table = 'order'  # SQL reserved word
+
+def test_django_fixture():
+    # Setup Django
+    django.setup()
+
+    # Create a temporary directory for the database
+    temp_dir = tempfile.mkdtemp()
+    db_path = os.path.join(temp_dir, 'test.db')
+    settings.DATABASES['default']['NAME'] = db_path
+
+    try:
+        # Create the database tables
+        with connection.cursor() as cursor:
+            cursor.execute(
+                'CREATE TABLE "order" (' +
+                'id INTEGER PRIMARY KEY, ' +
+                'name VARCHAR(100), ' +
+                'product_id INTEGER)'
+            )
+
+        # Create a fixture for the Order model
+        fixture_dir = os.path.join(temp_dir, 'fixtures')
+        os.makedirs(fixture_dir)
+
+        # Create some test data
+        order_data = [
+            {
+                "model": "django_test.Order",
+                "pk": 1,
+                "fields": {
+                    "name": "Test Order",
+                    "product_id": 123
+                }
+            }
+        ]
+
+        # Write the fixture to a file
+        fixture_file = os.path.join(fixture_dir, 'order_fixture.json')
+        with open(fixture_file, 'w') as f:
+            json.dump(order_data, f)
+
+        # Try to load the fixture (this should now work with our fix)
+        try:
+            call_command('loaddata', 'order_fixture')
+            print("Test PASSED: Successfully loaded fixture with reserved word table name")
+        except Exception as e:
+            print(f"Test FAILED: Error loading fixture: {e}")
+
+    finally:
+        # Clean up
+        if os.path.exists(db_path):
+            os.remove(db_path)
+        shutil.rmtree(temp_dir)
+
+if __name__ == '__main__':
+    test_django_fixture()
\ No newline at end of file
diff --git a/reproduce_django_issue.py b/reproduce_django_issue.py
new file mode 100644
index 0000000000..c27a306589
--- /dev/null
+++ b/reproduce_django_issue.py
@@ -0,0 +1,95 @@
+import os
+import sys
+import tempfile
+import shutil
+import django
+from django.db import connection, models
+from django.core.management import call_command
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, '/testbed')
+
+# Configure Django settings
+django.setup()
+
+# Create a simple app config
+class TestAppConfig(django.apps.AppConfig):
+    name = 'reproduce_issue'
+
+# Create a model with a name that's a SQL reserved word
+class Order(models.Model):
+    name = models.CharField(max_length=100)
+    product_id = models.IntegerField()
+
+    class Meta:
+        db_table = 'order'  # SQL reserved word
+
+def run_test():
+    # Create a temporary directory for the database
+    temp_dir = tempfile.mkdtemp()
+    db_path = os.path.join(temp_dir, 'test.db')
+
+    try:
+        # Configure Django to use our test database
+        from django.conf import settings
+        settings.DATABASES['default'] = {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': db_path,
+        }
+
+        # Create the database tables
+        from django.core.management import execute_from_command_line
+        argv = ['manage.py', 'migrate', '--fake-initial']
+        execute_from_command_line(argv)
+
+        # Create a fixture
+        fixture_dir = os.path.join(temp_dir, 'fixtures')
+        os.makedirs(fixture_dir)
+
+        # Create a fixture file for the Order model
+        from django.core import serializers
+        with open(os.path.join(fixture_dir, 'order_fixture.json'), 'w') as f:
+            f.write(serializers.serialize('json', [Order(name="Test Order", product_id=123)]))
+
+        # Try to load the fixture (this should fail with the current implementation)
+        try:
+            call_command('loaddata', 'order_fixture')
+            print("Test FAILED: Expected an error but none occurred.")
+        except Exception as e:
+            if "syntax error" in str(e):
+                print(f"Test PASSED: Got expected syntax error: {e}")
+            else:
+                print(f"Test FAILED: Got unexpected error: {e}")
+
+    except Exception as e:
+        print(f"Test error: {e}")
+    finally:
+        # Clean up
+        if os.path.exists(db_path):
+            os.remove(db_path)
+        shutil.rmtree(temp_dir)
+
+if __name__ == '__main__':
+    # Configure Django
+    from django.conf import settings
+    if not settings.configured:
+        settings.configure(
+            DEBUG=True,
+            DATABASES={
+                'default': {
+                    'ENGINE': 'django.db.backends.sqlite3',
+                    'NAME': ':memory:',
+                }
+            },
+            INSTALLED_APPS=[
+                'django.db.backends.sqlite3',
+                'reproduce_issue',
+            ],
+            SECRET_KEY='fake-key',
+        )
+
+    # Register the app
+    django.apps.apps.register_model('reproduce_issue', Order)
+
+    # Run the test
+    run_test()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..5d8118dd73
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,59 @@
+import os
+import sys
+import sqlite3
+import tempfile
+import shutil
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, '/testbed')
+
+# Create a simple test that directly tests the SQLite backend
+def run_test():
+    # Create a temporary directory for the database
+    temp_dir = tempfile.mkdtemp()
+    db_path = os.path.join(temp_dir, 'test.db')
+
+    try:
+        # Create a connection to the SQLite database
+        conn = sqlite3.connect(db_path)
+        cursor = conn.cursor()
+
+        # Create a table with a reserved word name
+        cursor.execute(
+            'CREATE TABLE "order" (' +
+            'id INTEGER PRIMARY KEY, ' +
+            'name VARCHAR(100), ' +
+            'product_id INTEGER)'
+        )
+        conn.commit()
+
+        # Try to run a PRAGMA command with the unquoted table name
+        # This should fail
+        try:
+            cursor.execute('PRAGMA foreign_key_check(order)')
+            print("Test FAILED: Expected an error but none occurred.")
+        except sqlite3.OperationalError as e:
+            if "syntax error" in str(e):
+                print(f"Test PASSED: Got expected syntax error: {e}")
+            else:
+                print(f"Test FAILED: Got unexpected error: {e}")
+
+        # Now try with quoted table name
+        try:
+            cursor.execute('PRAGMA foreign_key_check("order")')
+            print("Quoted version works correctly")
+        except Exception as e:
+            print(f"Test FAILED: Quoted version also failed: {e}")
+
+        # Clean up
+        cursor.close()
+        conn.close()
+
+    finally:
+        # Clean up
+        if os.path.exists(db_path):
+            os.remove(db_path)
+        shutil.rmtree(temp_dir)
+
+if __name__ == '__main__':
+    run_test()
\ No newline at end of file
diff --git a/simple_test.py b/simple_test.py
new file mode 100644
index 0000000000..bd66680d00
--- /dev/null
+++ b/simple_test.py
@@ -0,0 +1,47 @@
+import os
+import sys
+import tempfile
+import sqlite3
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, '/testbed')
+
+def test_sqlite_pragma():
+    # Create a temporary database
+    temp_dir = tempfile.mkdtemp()
+    db_path = os.path.join(temp_dir, 'test.db')
+
+    try:
+        # Create a connection to the SQLite database
+        conn = sqlite3.connect(db_path)
+        cursor = conn.cursor()
+
+        # Create a table with a reserved word name
+        cursor.execute('CREATE TABLE "order" (id INTEGER PRIMARY KEY, name TEXT)')
+        conn.commit()
+
+        # Test PRAGMA with quoted table name (should work)
+        try:
+            cursor.execute('PRAGMA foreign_key_check("order")')
+            print("Test PASSED: PRAGMA with quoted table name works")
+        except Exception as e:
+            print(f"Test FAILED: PRAGMA with quoted table name failed: {e}")
+
+        # Test PRAGMA with unquoted table name (should fail)
+        try:
+            cursor.execute('PRAGMA foreign_key_check(order)')
+            print("Test FAILED: PRAGMA with unquoted table name should have failed but didn't")
+        except sqlite3.OperationalError as e:
+            if "syntax error" in str(e):
+                print("Test PASSED: PRAGMA with unquoted table name correctly failed with syntax error")
+            else:
+                print(f"Test FAILED: PRAGMA with unquoted table name failed with unexpected error: {e}")
+
+    finally:
+        # Clean up
+        if os.path.exists(db_path):
+            os.remove(db_path)
+        os.rmdir(temp_dir)
+
+if __name__ == '__main__':
+    test_sqlite_pragma()
\ No newline at end of file
diff --git a/test_check_constraints.py b/test_check_constraints.py
new file mode 100644
index 0000000000..5798c700e0
--- /dev/null
+++ b/test_check_constraints.py
@@ -0,0 +1,62 @@
+import os
+import sys
+import tempfile
+import shutil
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, '/testbed')
+
+from django.db import connection
+from django.db.backends.sqlite3.base import DatabaseWrapper
+
+def test_check_constraints():
+    # Create a temporary database
+    temp_dir = tempfile.mkdtemp()
+    db_path = os.path.join(temp_dir, 'test.db')
+
+    try:
+        # Create a connection to the SQLite database
+        conn = connection.cursor()
+        conn.execute('CREATE TABLE "order" (id INTEGER PRIMARY KEY, name TEXT)')
+
+        # Create a DatabaseWrapper instance
+        wrapper = DatabaseWrapper(None)
+        wrapper.connection = conn
+        wrapper.ops = wrapper.ops
+
+        # Test the check_constraints method with a reserved word table name
+        try:
+            # This should not raise a syntax error with our fix
+            wrapper.check_constraints(['order'])
+            print("Test PASSED: check_constraints works with reserved word table name")
+        except Exception as e:
+            print(f"Test FAILED: Error in check_constraints: {e}")
+
+    finally:
+        # Clean up
+        if os.path.exists(db_path):
+            os.remove(db_path)
+        shutil.rmtree(temp_dir)
+
+if __name__ == '__main__':
+    # Configure Django settings
+    from django.conf import settings
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.db.backends.sqlite3',
+        ],
+    )
+
+    # Import Django
+    import django
+    django.setup()
+
+    # Run the test
+    test_check_constraints()
\ No newline at end of file
diff --git a/verify_fix.py b/verify_fix.py
new file mode 100644
index 0000000000..94cd70c46d
--- /dev/null
+++ b/verify_fix.py
@@ -0,0 +1,75 @@
+import os
+import sys
+import tempfile
+import shutil
+import sqlite3
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, '/testbed')
+
+from django.db import connection, models
+from django.conf import settings
+from django.core.management import call_command
+import django
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.db.backends.sqlite3',
+    ],
+)
+
+# Create a model with a name that's a SQL reserved word
+class Order(models.Model):
+    name = models.CharField(max_length=100)
+    product_id = models.IntegerField()
+
+    class Meta:
+        db_table = 'order'  # SQL reserved word
+
+def test_fix():
+    # Setup Django
+    django.setup()
+
+    # Create a temporary database
+    temp_dir = tempfile.mkdtemp()
+    db_path = os.path.join(temp_dir, 'test.db')
+    settings.DATABASES['default']['NAME'] = db_path
+
+    try:
+        # Create the database tables
+        from django.core.management import execute_from_command_line
+        argv = ['manage.py', 'migrate', '--fake-initial']
+        execute_from_command_line(argv)
+
+        # Create a fixture
+        fixture_dir = os.path.join(temp_dir, 'fixtures')
+        os.makedirs(fixture_dir)
+
+        # Create a fixture file for the Order model
+        from django.core import serializers
+        with open(os.path.join(fixture_dir, 'order_fixture.json'), 'w') as f:
+            f.write(serializers.serialize('json', [Order(name="Test Order", product_id=123)]))
+
+        # Try to load the fixture (this should now work with our fix)
+        try:
+            call_command('loaddata', 'order_fixture')
+            print("Test PASSED: Successfully loaded fixture with reserved word table name")
+        except Exception as e:
+            print(f"Test FAILED: Error loading fixture: {e}")
+
+    finally:
+        # Clean up
+        if os.path.exists(db_path):
+            os.remove(db_path)
+        shutil.rmtree(temp_dir)
+
+if __name__ == '__main__':
+    test_fix()
\ No newline at end of file
