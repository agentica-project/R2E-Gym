diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..2457abf4b
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,65 @@
+import os
+import sys
+import py.path
+
+# Create a test directory structure with "Python" directory
+test_dir = py.path.local(os.path.join(os.getcwd(), "test_python_dir"))
+if not test_dir.exists():
+    test_dir.ensure(dir=True)
+
+# Create a subdirectory structure
+python_dir = test_dir.join("Python")
+if not python_dir.exists():
+    python_dir.ensure(dir=True)
+
+# Create a test module
+test_module = python_dir.join("test_module.py")
+test_module.write("""
+def test_function():
+    return "This is a test function"
+""")
+
+# Create a conftest.py file
+conftest = python_dir.join("conftest.py")
+conftest.write("""
+def pytest_configure(config):
+    print("Conftest loaded")
+""")
+
+# Try to import the module using py.path.local.pyimport
+print("Current directory structure:")
+print(f"Test directory: {test_dir}")
+print(f"Python directory: {python_dir}")
+print(f"Test module: {test_module}")
+
+print("\nTrying to import the module...")
+try:
+    # This should fail with the original code
+    mod = test_module.pyimport()
+    print(f"Successfully imported module: {mod.__name__}")
+except Exception as e:
+    print(f"Failed to import module: {e}")
+
+# Print the path parts to see how they're processed
+print("\nPath parts:")
+for parent in python_dir.parts(reverse=True):
+    print(f"Parent: {parent}, basename: {parent.basename}, isdir: {parent.isdir()}")
+    if parent.isdir():
+        init_file = parent.join('__init__.py')
+        print(f"  Has __init__.py: {init_file.exists()}")
+
+# Print the module name that would be constructed
+pkgpath = python_dir.pypkgpath()
+if pkgpath:
+    print(f"\nPackage path: {pkgpath}")
+    pkgroot = pkgpath.dirpath()
+    names = python_dir.new(ext="").relto(pkgroot).split(python_dir.sep)
+    if names[-1] == "__init__":
+        names.pop()
+    modname = ".".join(names)
+    print(f"Constructed module name: {modname}")
+else:
+    print("\nNo package path found")
+    pkgroot = python_dir.dirpath()
+    modname = python_dir.purebasename
+    print(f"Module name (no package): {modname}")
\ No newline at end of file
