diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py
index 8253b2f682..14575dad01 100644
--- a/sympy/printing/latex.py
+++ b/sympy/printing/latex.py
@@ -1477,8 +1477,21 @@ def _print_Adjoint(self, expr):
             return r"%s^\dagger" % self._print(mat)
 
     def _print_MatAdd(self, expr):
-        terms = list(expr.args)
-        tex = " + ".join(map(self._print, terms))
+        from sympy.matrices.expressions.matmul import MatMul
+        terms = []
+        for arg in expr.args:
+            # Check if this is a negative term (MatMul with -1 as first argument)
+            if isinstance(arg, MatMul) and len(arg.args) >= 2 and arg.args[0] == S.NegativeOne:
+                # Print as a subtraction: -B instead of -1 B
+                if len(arg.args) == 2:
+                    terms.append(r'-%s' % self._print(arg.args[1]))
+                else:
+                    # Handle cases like (-1)*A*B
+                    rest_args = arg.args[1:]
+                    terms.append(r'-%s' % self._print(MatMul(*rest_args)))
+            else:
+                terms.append(self._print(arg))
+        tex = " + ".join(terms)
         return tex
 
     def _print_MatMul(self, expr):
diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py
index db24f4c612..325686cabd 100644
--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -819,6 +819,9 @@ def _print_BlockMatrix(self, B):
         return self._print(B.blocks)
 
     def _print_MatAdd(self, expr):
+        from sympy.matrices.expressions.matmul import MatMul
+
+        # Just use the default implementation for now
         return self._print_seq(expr.args, None, None, ' + ')
 
     def _print_MatMul(self, expr):
diff --git a/sympy/printing/str.py b/sympy/printing/str.py
index 0baefe0f7f..e17ff93b2c 100644
--- a/sympy/printing/str.py
+++ b/sympy/printing/str.py
@@ -312,8 +312,21 @@ def _print_HadamardProduct(self, expr):
             for arg in expr.args])
 
     def _print_MatAdd(self, expr):
-        return ' + '.join([self.parenthesize(arg, precedence(expr))
-            for arg in expr.args])
+        from sympy.matrices.expressions.matmul import MatMul
+        terms = []
+        for arg in expr.args:
+            # Check if this is a negative term (MatMul with -1 as first argument)
+            if isinstance(arg, MatMul) and len(arg.args) >= 2 and arg.args[0] == S.NegativeOne:
+                # Print as a subtraction: -B instead of (-1)*B
+                if len(arg.args) == 2:
+                    terms.append('-' + self.parenthesize(arg.args[1], precedence(expr)))
+                else:
+                    # Handle cases like (-1)*A*B
+                    rest_args = arg.args[1:]
+                    terms.append('-' + self.parenthesize(MatMul(*rest_args), precedence(expr)))
+            else:
+                terms.append(self.parenthesize(arg, precedence(expr)))
+        return ' + '.join(terms)
 
     def _print_NaN(self, expr):
         return 'nan'
diff --git a/test_matrix_symbol_printing.py b/test_matrix_symbol_printing.py
new file mode 100644
index 0000000000..ce97c541a9
--- /dev/null
+++ b/test_matrix_symbol_printing.py
@@ -0,0 +1,43 @@
+from sympy import *
+from sympy.matrices.expressions import MatrixSymbol
+
+def test_matrix_symbol_printing():
+    A = MatrixSymbol('A', 2, 2)
+    B = MatrixSymbol('B', 2, 2)
+
+    expr = A - A*B - B
+
+    # Print the structure of the expression
+    print("Expression structure:")
+    print("Type:", type(expr))
+    print("Args:", expr.args)
+    for i, arg in enumerate(expr.args):
+        print(f"Arg {i} type:", type(arg))
+        if hasattr(arg, 'args'):
+            print(f"Arg {i} args:", arg.args)
+
+    # Test string representation
+    str_repr = str(expr)
+    print("\nString representation:", str_repr)
+
+    # Test pretty printing
+    from sympy.printing.pretty import pretty
+    pretty_repr = pretty(expr, use_unicode=True)
+    print("Pretty representation:", pretty_repr)
+
+    # Test LaTeX representation
+    latex_repr = latex(expr)
+    print("LaTeX representation:", latex_repr)
+
+    # Check if the issue is fixed
+    is_fixed = (
+        '-B' in str_repr and
+        '-A⋅B' in str_repr.replace('−', '-').replace('·', '') and
+        'A' in str_repr
+    )
+
+    print("Is issue fixed?", is_fixed)
+    return is_fixed
+
+if __name__ == "__main__":
+    test_matrix_symbol_printing()
\ No newline at end of file
