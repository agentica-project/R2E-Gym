diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..ea0ee20e
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,43 @@
+import numpy as np
+import xarray as xr
+
+def test_swap_dims_modifies_original():
+    """Test that swap_dims modifies the original object."""
+    nz = 11
+    ds = xr.Dataset(
+        data_vars={
+            "y": ("z", np.random.rand(nz)),
+            "lev": ("z", np.arange(nz) * 10),
+            # ^ We want this to be a dimension coordinate
+        },
+    )
+    print(f"Original ds['lev'].dims: {ds['lev'].dims}")
+
+    # First swap
+    ds_swapped = ds.swap_dims(z="lev")
+    print(f"After first swap, ds['lev'].dims: {ds['lev'].dims}")
+
+    # Verify that the original ds['lev'].dims is still ('z',)
+    assert ds['lev'].dims == ('z',), f"Expected ds['lev'].dims to be ('z',), got {ds['lev'].dims}"
+
+    # Create ds2 as in the issue description
+    ds2 = (
+        ds.swap_dims(z="lev")
+        .rename_dims(lev="z")
+        .reset_index("lev")
+        .reset_coords()
+    )
+    print(f"ds2['lev'].dims: {ds2['lev'].dims}")
+
+    # Second swap
+    ds2_swapped = ds2.swap_dims(z="lev")
+    print(f"After second swap, ds2['lev'].dims: {ds2['lev'].dims}")
+
+    # Check if the original ds2['lev'].dims was modified
+    print(f"Original ds2['lev'].dims after second swap: {ds2['lev'].dims}")
+
+    # This assertion will fail, demonstrating the issue
+    assert ds2['lev'].dims == ('z',), f"Expected ds2['lev'].dims to be ('z',), got {ds2['lev'].dims}"
+
+if __name__ == "__main__":
+    test_swap_dims_modifies_original()
\ No newline at end of file
diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py
index c775d05c..baeef26b 100644
--- a/xarray/core/dataset.py
+++ b/xarray/core/dataset.py
@@ -3772,8 +3772,21 @@ class Dataset(
         for k, v in self.variables.items():
             dims = tuple(dims_dict.get(dim, dim) for dim in v.dims)
             if k in result_dims:
-                var = v.to_index_variable()
-                var.dims = dims
+                # Create a new index variable instead of modifying the original
+                var = Variable(
+                    dims,
+                    v._data,
+                    v._attrs,
+                    encoding=v._encoding,
+                    fastpath=True
+                )
+                var = IndexVariable(
+                    var.dims,
+                    var._data,
+                    var._attrs,
+                    encoding=var._encoding,
+                    fastpath=True
+                )
                 if k in self._indexes:
                     indexes[k] = self._indexes[k]
                     variables[k] = var
@@ -3783,8 +3796,14 @@ class Dataset(
                     variables.update(index_vars)
                     coord_names.update(index_vars)
             else:
-                var = v.to_base_variable()
-                var.dims = dims
+                # Create a new variable instead of modifying the original
+                var = Variable(
+                    dims,
+                    v._data,
+                    v._attrs,
+                    encoding=v._encoding,
+                    fastpath=True
+                )
                 variables[k] = var
 
         return self._replace_with_new_dims(variables, coord_names, indexes=indexes)
