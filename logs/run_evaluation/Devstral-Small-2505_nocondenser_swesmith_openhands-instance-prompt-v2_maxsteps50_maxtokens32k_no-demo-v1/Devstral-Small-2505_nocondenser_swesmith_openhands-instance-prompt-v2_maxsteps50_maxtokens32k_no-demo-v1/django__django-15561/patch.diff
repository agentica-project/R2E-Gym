diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py
index b3a2f4282b..afb87f674f 100644
--- a/django/db/backends/sqlite3/schema.py
+++ b/django/db/backends/sqlite3/schema.py
@@ -120,6 +120,20 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
         else:
             super().alter_db_table(model, old_db_table, new_db_table)
 
+    def _field_should_be_altered(self, old_field, new_field):
+        # Only check choices if both fields have them
+        if hasattr(old_field, 'choices') and hasattr(new_field, 'choices'):
+            # If only choices have changed, it's a noop for SQLite
+            if old_field.choices == new_field.choices and \
+               old_field.max_length == new_field.max_length and \
+               old_field.null == new_field.null and \
+               old_field.blank == new_field.blank and \
+               old_field.default == new_field.default:
+                return False
+
+        # Delegate to the parent implementation for all other cases
+        return super()._field_should_be_altered(old_field, new_field)
+
     def alter_field(self, model, old_field, new_field, strict=False):
         if not self._field_should_be_altered(old_field, new_field):
             return
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..e761b0f830
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,61 @@
+import os
+import sys
+import django
+from django.db import connection, migrations, models
+from django.db.migrations.operations import AlterField
+from django.db.migrations.state import ProjectState
+from django.db.migrations.writer import MigrationWriter
+
+# Set up Django
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_sqlite')
+django.setup()
+
+# Define a model with choices
+class TestModel(models.Model):
+    STATUS_CHOICES = [
+        ('A', 'Active'),
+        ('I', 'Inactive'),
+    ]
+
+    status = models.CharField(
+        max_length=1,
+        choices=STATUS_CHOICES,
+        default='A',
+    )
+
+    class Meta:
+        app_label = 'reproduce_issue'
+
+# Create a migration that changes the choices
+old_field = TestModel._meta.get_field('status')
+new_choices = [
+    ('A', 'Active'),
+    ('I', 'Inactive'),
+    ('P', 'Pending'),  # Added a new choice
+]
+new_field = models.CharField(
+    max_length=1,
+    choices=new_choices,
+    default='A',
+)
+new_field.set_attributes_from_name('status')
+
+# Create a migration operation
+operation = AlterField(
+    model_name='TestModel',
+    name='status',
+    field=new_field,
+)
+
+# Print the SQL that would be generated
+state = ProjectState()
+state.append_model(TestModel)
+writer = MigrationWriter(operation, state, 'reproduce_issue')
+print("Migration string:")
+print(writer.as_string())
+
+# Print the SQL that would be executed
+with connection.schema_editor() as schema_editor:
+    # This will generate SQL for SQLite but not for PostgreSQL
+    print("\nSQL executed:")
+    operation.database_forwards('reproduce_issue', schema_editor, state, state)
\ No newline at end of file
