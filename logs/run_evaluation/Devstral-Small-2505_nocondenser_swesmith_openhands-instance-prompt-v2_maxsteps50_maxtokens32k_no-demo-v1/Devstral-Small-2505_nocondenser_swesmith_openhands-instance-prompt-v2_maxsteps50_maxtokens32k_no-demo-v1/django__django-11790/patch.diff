diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py
index a0cfed0995..43a64147a6 100644
--- a/django/contrib/auth/forms.py
+++ b/django/contrib/auth/forms.py
@@ -192,6 +192,8 @@ class AuthenticationForm(forms.Form):
         # Set the max length and label for the "username" field.
         self.username_field = UserModel._meta.get_field(UserModel.USERNAME_FIELD)
         self.fields['username'].max_length = self.username_field.max_length or 254
+        # Explicitly set the maxlength attribute on the widget
+        self.fields['username'].widget.attrs['maxlength'] = str(self.fields['username'].max_length)
         if self.fields['username'].label is None:
             self.fields['username'].label = capfirst(self.username_field.verbose_name)
 
diff --git a/test_auth_form.py b/test_auth_form.py
new file mode 100644
index 0000000000..99908f6ab4
--- /dev/null
+++ b/test_auth_form.py
@@ -0,0 +1,48 @@
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+    django.setup()
+
+from django.contrib.auth.forms import AuthenticationForm
+from django import forms
+
+# Create a simple request object for the form
+class DummyRequest:
+    def __init__(self):
+        pass
+
+# Create an instance of the AuthenticationForm
+form = AuthenticationForm(request=DummyRequest())
+
+# Print the HTML for the username field
+username_field = form.fields['username']
+print("Username field max_length:", username_field.max_length)
+
+username_widget = form.fields['username'].widget
+username_attrs = form.fields['username'].widget.attrs
+print("Username field widget attrs:", username_attrs)
+
+# Check if maxlength is in the attrs
+if 'maxlength' in username_attrs:
+    print("maxlength is present with value:", username_attrs['maxlength'])
+else:
+    print("maxlength is NOT present in the attrs")
+
+# Print the rendered HTML
+print("\nRendered HTML:")
+print(username_widget.render(name='username', value=''))
\ No newline at end of file
diff --git a/test_maxlength.py b/test_maxlength.py
new file mode 100644
index 0000000000..d97233e384
--- /dev/null
+++ b/test_maxlength.py
@@ -0,0 +1,34 @@
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+    django.setup()
+
+from django.contrib.auth.forms import AuthenticationForm
+from django.test import TestCase
+from django import forms
+
+class AuthenticationFormMaxLengthTest(TestCase):
+    def test_username_maxlength_attribute(self):
+        """Test that the username field has a maxlength attribute."""
+        form = AuthenticationForm(request=None)
+        self.assertIn('maxlength', form.fields['username'].widget.attrs)
+        self.assertEqual(form.fields['username'].widget.attrs['maxlength'], '150')
+
+if __name__ == '__main__':
+    import unittest
+    unittest.main()
\ No newline at end of file
