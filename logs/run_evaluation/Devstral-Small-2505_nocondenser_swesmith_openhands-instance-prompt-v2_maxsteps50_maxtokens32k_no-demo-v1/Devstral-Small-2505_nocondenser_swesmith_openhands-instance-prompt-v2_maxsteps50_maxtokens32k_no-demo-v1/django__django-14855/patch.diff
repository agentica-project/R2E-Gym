diff --git a/django/contrib/admin/helpers.py b/django/contrib/admin/helpers.py
index dd154f72ee..ba8c3463a0 100644
--- a/django/contrib/admin/helpers.py
+++ b/django/contrib/admin/helpers.py
@@ -209,7 +209,11 @@ class AdminReadonlyField:
             remote_field.model._meta.model_name,
         )
         try:
-            url = reverse(url_name, args=[quote(remote_obj.pk)])
+            url = reverse(
+                url_name,
+                args=[quote(remote_obj.pk)],
+                current_app=self.model_admin.admin_site.name
+            )
             return format_html('<a href="{}">{}</a>', url, remote_obj)
         except NoReverseMatch:
             return str(remote_obj)
diff --git a/simple_verify.py b/simple_verify.py
new file mode 100644
index 0000000000..680a7f0e81
--- /dev/null
+++ b/simple_verify.py
@@ -0,0 +1,98 @@
+"""
+Simple verification script for the fix to the admin URL generation issue.
+"""
+import sys
+from django.utils.html import format_html
+
+# Mock the reverse function to simulate URL generation
+def mock_reverse(url_name, args=None, current_app=None):
+    """
+    Mock implementation of django.urls.reverse that simulates the behavior
+    we expect from the real function.
+    """
+    if args is None:
+        args = []
+
+    # Extract the parts of the URL name
+    namespace, view = url_name.split(':')
+
+    # Extract app_label and model_name from the view
+    parts = view.split('_')
+    app_label = parts[0]
+    model_name = parts[1]
+
+    # Build the URL based on the namespace and current_app
+    if current_app:
+        url = f"/{current_app}/{app_label}/{model_name}/{args[0]}/"
+    else:
+        url = f"/{namespace}/{app_label}/{model_name}/{args[0]}/"
+
+    return url
+
+# Replace the real reverse function with our mock
+import django.urls
+django.urls.reverse = mock_reverse
+
+# Mock classes to simulate the environment
+class MockRemoteField:
+    def __init__(self, app_label, model_name):
+        self.model = type('Model', (), {
+            '_meta': type('Meta', (), {
+                'app_label': app_label,
+                'model_name': model_name,
+            })
+        })
+
+class MockRemoteObj:
+    def __init__(self, pk):
+        self.pk = pk
+
+    def __str__(self):
+        return "Test Object"
+
+class MockModelAdmin:
+    def __init__(self, admin_site_name):
+        self.admin_site = type('AdminSite', (), {
+            'name': admin_site_name,
+        })
+
+def get_admin_url(model_admin, remote_field, remote_obj):
+    """
+    Simplified version of the get_admin_url method with our fix applied.
+    """
+    url_name = 'admin:%s_%s_change' % (
+        remote_field.model._meta.app_label,
+        remote_field.model._meta.model_name,
+    )
+    try:
+        # Use the mock reverse function
+        url = django.urls.reverse(
+            url_name,
+            args=[str(remote_obj.pk)],
+            current_app=model_admin.admin_site.name
+        )
+        return format_html('<a href="{}">{}</a>', url, remote_obj)
+    except Exception as e:
+        return f"Error: {str(e)}"
+
+def test_url_generation():
+    # Create test objects
+    remote_field = MockRemoteField('test_app', 'testmodel')
+    remote_obj = MockRemoteObj(1)
+
+    # Test with default admin site
+    default_model_admin = MockModelAdmin('admin')
+    default_url = get_admin_url(default_model_admin, remote_field, remote_obj)
+    print("Default admin site URL:", default_url)
+    assert 'admin/test_app/testmodel/1/' in default_url, "Default URL test failed"
+
+    # Test with custom admin site
+    custom_model_admin = MockModelAdmin('custom-admin')
+    custom_url = get_admin_url(custom_model_admin, remote_field, remote_obj)
+    print("Custom admin site URL:", custom_url)
+    assert 'custom-admin/test_app/testmodel/1/' in custom_url, "Custom URL test failed"
+
+    print("All tests passed!")
+
+if __name__ == "__main__":
+    test_url_generation()
\ No newline at end of file
diff --git a/test_custom_admin_url.py b/test_custom_admin_url.py
new file mode 100644
index 0000000000..0677c647f0
--- /dev/null
+++ b/test_custom_admin_url.py
@@ -0,0 +1,116 @@
+import os
+import sys
+import django
+from django.conf import settings
+from django.urls import path, include
+from django.contrib import admin
+from django.db import models
+from django.apps import AppConfig
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'test_app',
+        ],
+        ROOT_URLCONF='test_custom_admin_url',
+        MIDDLEWARE=[],
+    )
+    django.setup()
+
+# Create a custom admin site
+class CustomAdminSite(admin.AdminSite):
+    site_header = "Custom Admin"
+
+custom_admin = CustomAdminSite(name='custom-admin')
+
+# Define app config
+class TestAppConfig(AppConfig):
+    name = 'test_app'
+    verbose_name = "Test App"
+
+# Define models
+class Category(models.Model):
+    name = models.CharField(max_length=100)
+
+    def __str__(self):
+        return self.name
+
+    class Meta:
+        app_label = 'test_app'
+
+class Product(models.Model):
+    name = models.CharField(max_length=100)
+    category = models.ForeignKey(Category, on_delete=models.CASCADE)
+
+    def __str__(self):
+        return self.name
+
+    class Meta:
+        app_label = 'test_app'
+
+# Register models with the custom admin site
+@custom_admin.register(Category)
+class CategoryAdmin(admin.ModelAdmin):
+    pass
+
+@custom_admin.register(Product)
+class ProductAdmin(admin.ModelAdmin):
+    readonly_fields = ('category',)
+
+# Set up URLs
+urlpatterns = [
+    path('admin/', admin.site.urls),
+    path('custom-admin/', custom_admin.urls),
+]
+
+# Test function to check the URL generation
+def test_readonly_field_url():
+    from django.contrib.admin.helpers import AdminReadonlyField
+    from django.test import RequestFactory
+
+    # Create instances
+    category = Category(id=1, name="Test Category")
+    product = Product(id=2, name="Test Product", category=category)
+
+    # Create a mock form
+    class MockForm:
+        _meta = type('Meta', (), {
+            'model': Product,
+            'labels': {},
+        })
+
+    # Create a mock ModelAdmin
+    class MockModelAdmin:
+        def __init__(self):
+            self.admin_site = custom_admin
+
+    model_admin = MockModelAdmin()
+
+    # Create AdminReadonlyField instance
+    readonly_field = AdminReadonlyField(MockForm(), 'category', False, model_admin)
+
+    # Get the admin URL
+    url_html = readonly_field.get_admin_url(product._meta.get_field('category').remote_field, category)
+
+    print("Generated URL:", url_html)
+
+    # Check if the URL contains the correct admin site prefix
+    if 'custom-admin' in url_html:
+        print("SUCCESS: URL contains the correct admin site prefix")
+    else:
+        print("FAILURE: URL does not contain the correct admin site prefix")
+        print("Expected 'custom-admin' in the URL, but got:", url_html)
+
+if __name__ == "__main__":
+    test_readonly_field_url()
\ No newline at end of file
diff --git a/verify_fix.py b/verify_fix.py
new file mode 100644
index 0000000000..1c1c7f0088
--- /dev/null
+++ b/verify_fix.py
@@ -0,0 +1,98 @@
+"""
+This script verifies the fix for the issue with URL generation in custom admin sites.
+It simulates the environment and checks if the URL contains the correct admin site prefix.
+"""
+import sys
+import os
+import django
+from django.conf import settings
+from django.urls import path, include, reverse
+from django.utils.html import format_html
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        ROOT_URLCONF=__name__,
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+    )
+    django.setup()
+
+# Define URL patterns
+urlpatterns = [
+    path('admin/', include('django.contrib.admin.urls')),
+    path('custom-admin/', include('django.contrib.admin.urls')),
+]
+
+# Mock classes to simulate the environment
+class MockRemoteField:
+    def __init__(self, model):
+        self.model = model
+
+class MockModel:
+    def __init__(self, app_label, model_name):
+        self._meta = type('Meta', (), {
+            'app_label': app_label,
+            'model_name': model_name,
+        })
+
+class MockRemoteObj:
+    def __init__(self, pk):
+        self.pk = pk
+
+    def __str__(self):
+        return "Test Object"
+
+class MockModelAdmin:
+    def __init__(self, admin_site_name):
+        self.admin_site = type('AdminSite', (), {
+            'name': admin_site_name,
+        })
+
+class MockAdminReadonlyField:
+    def __init__(self, model_admin):
+        self.model_admin = model_admin
+
+    def get_admin_url(self, remote_field, remote_obj):
+        url_name = 'admin:%s_%s_change' % (
+            remote_field.model._meta.app_label,
+            remote_field.model._meta.model_name,
+        )
+        try:
+            url = reverse(
+                url_name,
+                args=[str(remote_obj.pk)],
+                current_app=self.model_admin.admin_site.name
+            )
+            return format_html('<a href="{}">{}</a>', url, remote_obj)
+        except Exception as e:
+            return f"Error: {str(e)}"
+
+def test_url_generation():
+    # Create test objects
+    model = MockModel(app_label='test_app', model_name='testmodel')
+    remote_field = MockRemoteField(model)
+    remote_obj = MockRemoteObj(1)
+
+    # Test with default admin site
+    default_model_admin = MockModelAdmin('admin')
+    default_readonly_field = MockAdminReadonlyField(default_model_admin)
+    default_url = default_readonly_field.get_admin_url(remote_field, remote_obj)
+    print("Default admin site URL:", default_url)
+    assert 'admin/test_app/testmodel/1/change/' in default_url, "Default URL test failed"
+
+    # Test with custom admin site
+    custom_model_admin = MockModelAdmin('custom-admin')
+    custom_readonly_field = MockAdminReadonlyField(custom_model_admin)
+    custom_url = custom_readonly_field.get_admin_url(remote_field, remote_obj)
+    print("Custom admin site URL:", custom_url)
+    assert 'custom-admin/test_app/testmodel/1/change/' in custom_url, "Custom URL test failed"
+
+    print("All tests passed!")
+
+if __name__ == "__main__":
+    test_url_generation()
\ No newline at end of file
diff --git a/verify_fix_simple.py b/verify_fix_simple.py
new file mode 100644
index 0000000000..344e0a8593
--- /dev/null
+++ b/verify_fix_simple.py
@@ -0,0 +1,19 @@
+"""
+Simple verification script for the fix to the admin URL generation issue.
+"""
+import re
+
+# Get the content of the modified file
+with open('/testbed/django/contrib/admin/helpers.py', 'r') as f:
+    content = f.read()
+
+# Check if the get_admin_url method includes the current_app parameter
+pattern = r'def get_admin_url\(self, remote_field, remote_obj\):.*?url = reverse\(.*?current_app=self\.model_admin\.admin_site\.name'
+match = re.search(pattern, content, re.DOTALL)
+
+if match:
+    print("SUCCESS: The fix has been correctly applied.")
+    print("The get_admin_url method now includes the current_app parameter.")
+else:
+    print("FAILURE: The fix has not been correctly applied.")
+    print("The get_admin_url method does not include the current_app parameter.")
\ No newline at end of file
