diff --git a/db.sqlite3 b/db.sqlite3
new file mode 100644
index 0000000000..b2b44f1e74
Binary files /dev/null and b/db.sqlite3 differ
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..55c8e0d018
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,69 @@
+import pickle
+import os
+import sys
+import django
+from django.conf import settings
+
+# Set up Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': os.path.join(os.path.dirname(__file__), 'db.sqlite3'),
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='fake-key',
+    )
+    django.setup()
+
+from django.db import models, connection
+from django.db.models import Sum
+
+# Create a simple model
+class Toy(models.Model):
+    name = models.CharField(max_length=16)
+    material = models.CharField(max_length=16)
+    price = models.PositiveIntegerField()
+
+    class Meta:
+        app_label = 'auth'  # Use an existing app to avoid registration issues
+        db_table = 'toy'    # Use a specific table name
+
+# Create tables if they don't exist
+cursor = connection.cursor()
+cursor.execute("""
+    CREATE TABLE IF NOT EXISTS toy (
+        id INTEGER PRIMARY KEY AUTOINCREMENT,
+        name VARCHAR(16),
+        material VARCHAR(16),
+        price INTEGER
+    )
+""")
+
+# Create test data
+Toy.objects.all().delete()  # Clear existing data
+Toy.objects.create(name='foo', price=10, material='wood')
+Toy.objects.create(name='bar', price=20, material='plastic')
+Toy.objects.create(name='baz', price=100, material='wood')
+
+# Original query with values()
+print("Original query with values():")
+prices = Toy.objects.values('material').annotate(total_price=Sum('price'))
+print(prices)
+print("Type of first item:", type(prices[0]))
+
+# Pickle and unpickle the query
+print("\nPickled and unpickled query:")
+prices2 = Toy.objects.all()
+prices2.query = pickle.loads(pickle.dumps(prices.query))
+print("Type of first item:", type(prices2[0]))
+try:
+    print(prices2)
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {e}")
\ No newline at end of file
