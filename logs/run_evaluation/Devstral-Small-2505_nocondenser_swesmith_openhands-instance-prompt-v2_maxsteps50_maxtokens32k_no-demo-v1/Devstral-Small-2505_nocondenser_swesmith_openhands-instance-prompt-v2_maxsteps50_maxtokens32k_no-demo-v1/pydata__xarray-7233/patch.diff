diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 00000000..cb560ead
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,75 @@
+import xarray as xr
+import numpy as np
+
+def test_coarsen_construct_preserves_coords():
+    # Test 1: Basic case - single coordinate
+    da = xr.DataArray(np.arange(24), dims=["time"])
+    da = da.assign_coords(day=365 * da)
+    ds = da.to_dataset(name="T")
+
+    result = ds.coarsen(time=12).construct(time=("year", "month"))
+    print("Test 1: Basic case")
+    print("Is 'day' a coordinate?", 'day' in result.coords)
+    assert 'day' in result.coords
+
+    # Test 2: Multiple coordinates
+    da = xr.DataArray(np.arange(24), dims=["time"])
+    da = da.assign_coords(
+        day=365 * da,
+        hour=da * 24,
+        minute=da * 1440
+    )
+    ds = da.to_dataset(name="T")
+
+    result = ds.coarsen(time=12).construct(time=("year", "month"))
+    print("\nTest 2: Multiple coordinates")
+    print("Is 'day' a coordinate?", 'day' in result.coords)
+    print("Is 'hour' a coordinate?", 'hour' in result.coords)
+    print("Is 'minute' a coordinate?", 'minute' in result.coords)
+    assert 'day' in result.coords
+    assert 'hour' in result.coords
+    assert 'minute' in result.coords
+
+    # Test 3: Coordinate with different dimension
+    da = xr.DataArray(np.arange(12), dims=["x"])
+    # Create a dataset directly to avoid dimension issues
+    ds = xr.Dataset()
+    ds['T'] = da
+    ds = ds.assign_coords(
+        time=('x', np.arange(12) * 10),
+        y=('x', np.arange(12) * 20)
+    )
+
+    result = ds.coarsen(x=6).construct(x=("x1", "x2"))
+    print("\nTest 3: Coordinate with different dimension")
+    print("Is 'time' a coordinate?", 'time' in result.coords)
+    print("Is 'y' a coordinate?", 'y' in result.coords)
+    assert 'time' in result.coords
+    assert 'y' in result.coords
+
+    # Test 4: Multiple dimensions coarsened
+    # Create a 2D DataArray with proper dimensions
+    x = np.arange(4)
+    y = np.arange(12)
+    data = np.arange(48).reshape(4, 12)
+    da = xr.DataArray(data, dims=["x", "y"])
+
+    # Create a dataset and assign coordinates
+    ds = xr.Dataset()
+    ds['T'] = da
+    ds = ds.assign_coords(
+        x_coord=('x', np.arange(4)),
+        y_coord=('y', np.arange(12) * 2)
+    )
+
+    result = ds.coarsen(x=2, y=2).construct(x=("x1", "x2"), y=("y1", "y2"))
+    print("\nTest 4: Multiple dimensions coarsened")
+    print("Is 'x_coord' a coordinate?", 'x_coord' in result.coords)
+    print("Is 'y_coord' a coordinate?", 'y_coord' in result.coords)
+    assert 'x_coord' in result.coords
+    assert 'y_coord' in result.coords
+
+    print("\nAll tests passed!")
+
+if __name__ == "__main__":
+    test_coarsen_construct_preserves_coords()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..54b5d728
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,23 @@
+import xarray as xr
+import numpy as np
+
+# Create a DataArray with a dimension ('time') and a coordinate ('day')
+da = xr.DataArray(np.arange(24), dims=["time"])
+da = da.assign_coords(day=365 * da)
+ds = da.to_dataset(name="T")
+
+print("Original dataset:")
+print(ds)
+print("\nCoordinates:", ds.coords)
+print("Data variables:", ds.data_vars)
+
+# Apply coarsen.construct
+result = ds.coarsen(time=12).construct(time=("year", "month"))
+
+print("\nResult after coarsen.construct:")
+print(result)
+print("\nCoordinates:", result.coords)
+print("Data variables:", result.data_vars)
+
+# Check if 'day' is still a coordinate
+print("\nIs 'day' a coordinate in the result?", 'day' in result.coords)
\ No newline at end of file
diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py
index c194ec08..83a2a2c3 100644
--- a/xarray/core/rolling.py
+++ b/xarray/core/rolling.py
@@ -973,8 +973,13 @@ class Coarsen(CoarsenArithmetic, Generic[T_Xarray]):
             else:
                 reshaped[key] = var
 
-        should_be_coords = set(window_dim) & set(self.obj.coords)
-        result = reshaped.set_coords(should_be_coords)
+        # Preserve all original coordinates, not just those involved in coarsening
+        original_coords = set(self.obj.coords)
+        # Also set as coordinates any dimensions that were coarsened
+        should_be_coords = original_coords | set(window_dim)
+        # Filter to only include variables that exist in the reshaped dataset
+        existing_coords = [coord for coord in should_be_coords if coord in reshaped.variables]
+        result = reshaped.set_coords(existing_coords)
         if isinstance(self.obj, DataArray):
             return self.obj._from_temp_dataset(result)
         else:
