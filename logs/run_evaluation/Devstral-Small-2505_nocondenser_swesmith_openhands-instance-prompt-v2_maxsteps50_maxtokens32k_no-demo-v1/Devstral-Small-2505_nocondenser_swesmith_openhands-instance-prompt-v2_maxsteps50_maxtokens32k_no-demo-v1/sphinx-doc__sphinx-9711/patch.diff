diff --git a/setup.py b/setup.py
index 3dbc8746b..31bd48c0a 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 6):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp>=2.0.0',
-    'sphinxcontrib-serializinghtml>=1.1.5',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp>=2.0.0,<=2.0.4',
+    'sphinxcontrib-serializinghtml>=1.1.5,<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.14,<0.18',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/extension.py b/sphinx/extension.py
index 7ec6c8518..0818a5aa5 100644
--- a/sphinx/extension.py
+++ b/sphinx/extension.py
@@ -10,6 +10,7 @@
 
 from typing import TYPE_CHECKING, Any, Dict
 
+from packaging.version import Version
 from sphinx.config import Config
 from sphinx.errors import VersionRequirementError
 from sphinx.locale import __
@@ -20,7 +21,6 @@ if TYPE_CHECKING:
 
 logger = logging.getLogger(__name__)
 
-
 class Extension:
     def __init__(self, name: str, module: Any, **kwargs: Any) -> None:
         self.name = name
@@ -38,7 +38,6 @@ class Extension:
         # the extension does not tell its status.
         self.parallel_write_safe = kwargs.pop('parallel_write_safe', True)
 
-
 def verify_needs_extensions(app: "Sphinx", config: Config) -> None:
     """Verify the required Sphinx extensions are loaded."""
     if config.needs_extensions is None:
@@ -51,12 +50,11 @@ def verify_needs_extensions(app: "Sphinx", config: Config) -> None:
                               'but it is not loaded.'), extname)
             continue
 
-        if extension.version == 'unknown version' or reqversion > extension.version:
+        if extension.version == 'unknown version' or Version(reqversion) > Version(extension.version):
             raise VersionRequirementError(__('This project needs the extension %s at least in '
                                              'version %s and therefore cannot be built with '
                                              'the loaded version (%s).') %
-                                          (extname, reqversion, extension.version))
-
+                                        (extname, reqversion, extension.version))
 
 def setup(app: "Sphinx") -> Dict[str, Any]:
     app.connect('config-inited', verify_needs_extensions, priority=800)
@@ -65,4 +63,4 @@ def setup(app: "Sphinx") -> Dict[str, Any]:
         'version': 'builtin',
         'parallel_read_safe': True,
         'parallel_write_safe': True,
-    }
+    }
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index 00c8e13bd..11d3352df 100644
--- a/tox.ini
+++ b/tox.ini
@@ -22,14 +22,14 @@ deps =
     du15: docutils==0.15.*
     du16: docutils==0.16.*
     du17: docutils==0.17.*
-    py311: git+https://github.com/pytest-dev/py
+    py311: git+https://github.com/pytest -rA-dev/py
 extras =
     test
 setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:du-latest]
 commands =
diff --git a/verify_fix.py b/verify_fix.py
new file mode 100644
index 000000000..21db938e3
--- /dev/null
+++ b/verify_fix.py
@@ -0,0 +1,47 @@
+#!/usr/bin/env python3
+"""
+Test script to verify the fix for the version comparison issue.
+"""
+
+from packaging.version import Version
+from sphinx.extension import verify_needs_extensions
+from unittest.mock import MagicMock, patch
+
+def test_version_comparison():
+    """Test the fixed version comparison logic."""
+    # Create a mock app and config
+    app = MagicMock()
+    config = MagicMock()
+    config.needs_extensions = {
+        'sphinx_gallery.gen_gallery': '0.6.0'
+    }
+
+    # Create a mock extension with version 0.10.0
+    extension = MagicMock()
+    extension.version = '0.10.0'
+
+    # Set up the app.extensions dictionary
+    app.extensions = {
+        'sphinx_gallery.gen_gallery': extension
+    }
+
+    # Patch the logger to avoid warnings
+    with patch('sphinx.extension.logger.warning'):
+        # This should not raise an exception with our fix
+        verify_needs_extensions(app, config)
+        print("Test passed: sphinx-gallery 0.10.0 is correctly recognized as >= 0.6.0")
+
+    # Now test with a version that is actually too low
+    extension.version = '0.5.0'
+    app.extensions = {
+        'sphinx_gallery.gen_gallery': extension
+    }
+
+    try:
+        verify_needs_extensions(app, config)
+        print("Test failed: sphinx-gallery 0.5.0 should not be accepted as >= 0.6.0")
+    except Exception as e:
+        print(f"Test passed: sphinx-gallery 0.5.0 correctly rejected: {e}")
+
+if __name__ == "__main__":
+    test_version_comparison()
\ No newline at end of file
diff --git a/version_compare_test.py b/version_compare_test.py
new file mode 100644
index 000000000..ce1380143
--- /dev/null
+++ b/version_compare_test.py
@@ -0,0 +1,35 @@
+#!/usr/bin/env python3
+"""
+Test script to demonstrate the version comparison issue.
+"""
+
+def string_compare(v1, v2):
+    """Compare versions as strings (current implementation)."""
+    return v1 > v2
+
+def proper_compare(v1, v2):
+    """Compare versions using packaging.version.Version."""
+    from packaging.version import Version
+    return Version(v1) > Version(v2)
+
+def test_version_comparison():
+    """Test different version comparison methods."""
+    test_cases = [
+        ("0.6", "0.10"),  # The problematic case from the issue
+        ("1.0", "1.10"),
+        ("2.10", "2.9"),
+        ("1.5.3", "1.5.10"),
+    ]
+
+    print("String comparison (current implementation):")
+    for v1, v2 in test_cases:
+        result = string_compare(v1, v2)
+        print(f"  {v1} > {v2}: {result}")
+
+    print("\nProper version comparison (using packaging.version):")
+    for v1, v2 in test_cases:
+        result = proper_compare(v1, v2)
+        print(f"  {v1} > {v2}: {result}")
+
+if __name__ == "__main__":
+    test_version_comparison()
\ No newline at end of file
