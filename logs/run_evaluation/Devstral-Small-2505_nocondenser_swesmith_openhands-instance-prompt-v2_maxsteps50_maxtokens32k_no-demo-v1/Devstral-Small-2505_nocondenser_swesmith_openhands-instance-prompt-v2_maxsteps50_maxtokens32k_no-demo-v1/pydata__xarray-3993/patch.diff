diff --git a/test_integration.py b/test_integration.py
new file mode 100644
index 00000000..5040ea0f
--- /dev/null
+++ b/test_integration.py
@@ -0,0 +1,47 @@
+import xarray as xr
+import numpy as np
+import warnings
+
+# Create a DataArray
+da = xr.DataArray(
+    np.arange(12).reshape(4, 3),
+    dims=["x", "y"],
+    coords={"x": [0, 0.1, 1.1, 1.2]},
+)
+
+# Create a Dataset
+ds = xr.Dataset({"var": da})
+
+# Test integration with both DataArray and Dataset
+print("DataArray integrate method signature:")
+print(da.integrate.__code__.co_varnames)
+
+print("\nDataset integrate method signature:")
+print(ds.integrate.__code__.co_varnames)
+
+# Test actual integration
+print("\nDataArray integration result (using new 'coord' parameter):")
+try:
+    result_da = da.integrate(coord="x")
+    print(result_da)
+except Exception as e:
+    print(f"Error: {e}")
+
+print("\nDataset integration result:")
+try:
+    result_ds = ds.integrate("x")
+    print(result_ds)
+except Exception as e:
+    print(f"Error: {e}")
+
+# Test deprecation warning for old 'dim' parameter
+print("\nTesting deprecation warning for 'dim' parameter:")
+with warnings.catch_warnings(record=True) as w:
+    warnings.simplefilter("always")
+    result_da_old = da.integrate(dim="x")
+    if len(w) > 0:
+        print(f"Warning caught: {w[0].message}")
+    else:
+        print("No warning was issued")
+
+print("\nResults are equal:", result_da.equals(result_da_old))
\ No newline at end of file
diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py
index 2fef3edb..2b21d6b9 100644
--- a/xarray/core/dataarray.py
+++ b/xarray/core/dataarray.py
@@ -3481,18 +3481,24 @@ class DataArray(AbstractArray, DataWithCoords):
         return self._from_temp_dataset(ds)
 
     def integrate(
-        self, dim: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None
+        self,
+        coord: Union[Hashable, Sequence[Hashable], None] = None,
+        datetime_unit: str = None,
+        dim=None
     ) -> "DataArray":
         """ integrate the array with the trapezoidal rule.
 
         .. note::
-            This feature is limited to simple cartesian geometry, i.e. dim
+            This feature is limited to simple cartesian geometry, i.e. coord
             must be one dimensional.
 
         Parameters
         ----------
-        dim : hashable, or sequence of hashable
+        coord : hashable, or sequence of hashable
             Coordinate(s) used for the integration.
+        dim : hashable, or sequence of hashable
+            .. deprecated:: 0.17.0
+               Use coord instead.
         datetime_unit : {"Y", "M", "W", "D", "h", "m", "s", "ms", "us", "ns", \
                          "ps", "fs", "as"}, optional
             Can be used to specify the unit if datetime coordinate is used.
@@ -3528,7 +3534,19 @@ class DataArray(AbstractArray, DataWithCoords):
         array([5.4, 6.6, 7.8])
         Dimensions without coordinates: y
         """
-        ds = self._to_temp_dataset().integrate(dim, datetime_unit)
+        [coord_to_use, source] = (dim, "dim") if coord is None and dim is not None else (coord, "coord")
+
+        if source == "dim":
+            warnings.warn(
+                "'dim' keyword is deprecated, use 'coord' instead",
+                FutureWarning,
+                stacklevel=2,
+            )
+
+        if coord_to_use is None:
+            raise ValueError("Must specify either 'coord' or 'dim' parameter")
+
+        ds = self._to_temp_dataset().integrate(coord_to_use, datetime_unit)
         return self._from_temp_dataset(ds)
 
     def unify_chunks(self) -> "DataArray":
