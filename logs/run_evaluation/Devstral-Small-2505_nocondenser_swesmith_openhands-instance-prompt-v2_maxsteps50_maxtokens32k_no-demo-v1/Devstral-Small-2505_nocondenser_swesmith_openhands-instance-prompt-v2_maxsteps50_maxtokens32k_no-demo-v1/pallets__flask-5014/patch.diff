diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..2d12e09e
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,15 @@
+import flask
+
+# This should raise a ValueError
+try:
+    bp = flask.Blueprint("", __name__)
+    print("ERROR: No exception raised for empty Blueprint name")
+except ValueError as e:
+    print(f"SUCCESS: ValueError raised: {e}")
+
+# This should work fine
+try:
+    bp = flask.Blueprint("valid_name", __name__)
+    print("SUCCESS: Blueprint created with valid name")
+except Exception as e:
+    print(f"ERROR: Exception raised for valid name: {e}")
\ No newline at end of file
diff --git a/src/flask/blueprints.py b/src/flask/blueprints.py
index eb50585d..ed794ff9 100644
--- a/src/flask/blueprints.py
+++ b/src/flask/blueprints.py
@@ -190,6 +190,9 @@ class Blueprint(Scaffold):
             root_path=root_path,
         )
 
+        if not name or not name.strip():
+            raise ValueError("'name' may not be empty.")
+
         if "." in name:
             raise ValueError("'name' may not contain a dot '.' character.")
 
diff --git a/test_empty_name.py b/test_empty_name.py
new file mode 100644
index 00000000..df639061
--- /dev/null
+++ b/test_empty_name.py
@@ -0,0 +1,12 @@
+import pytest
+import flask
+
+def test_empty_name_not_allowed():
+    with pytest.raises(ValueError) as excinfo:
+        flask.Blueprint("", __name__)
+    assert str(excinfo.value) == "'name' may not be empty."
+
+def test_whitespace_name_not_allowed():
+    with pytest.raises(ValueError) as excinfo:
+        flask.Blueprint("   ", __name__)
+    assert str(excinfo.value) == "'name' may not be empty."
\ No newline at end of file
