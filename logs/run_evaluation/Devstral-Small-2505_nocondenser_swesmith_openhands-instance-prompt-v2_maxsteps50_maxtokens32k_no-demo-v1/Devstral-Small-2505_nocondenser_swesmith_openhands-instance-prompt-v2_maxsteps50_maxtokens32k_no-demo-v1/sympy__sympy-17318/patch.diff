diff --git a/check_expr.py b/check_expr.py
new file mode 100644
index 0000000000..7233a5b8f4
--- /dev/null
+++ b/check_expr.py
@@ -0,0 +1,23 @@
+from sympy import sqrt, I, simplify
+
+# The expression from the issue description
+expr = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2
+print(f"Original expression: {expr}")
+print(f"Simplified: {simplify(expr)}")
+
+# Let's check if the expression simplifies to I
+simplified = simplify(expr)
+print(f"Is the expression equal to I? {simplified == I}")
+
+# Let's try to evaluate it numerically
+numerical = expr.evalf()
+print(f"Numerical evaluation: {numerical}")
+
+# Let's try a different expression
+expr2 = 3/2 - sqrt(2)*sqrt(4 + 3*I)/2 + 3*I/2
+print(f"\nAlternative expression: {expr2}")
+print(f"Simplified: {simplify(expr2)}")
+print(f"Is expr2 equal to I? {simplify(expr2) == I}")
+
+# Let's check if our original expression is actually I
+print(f"\nIs the original expression actually I? {expr == I}")
\ No newline at end of file
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..f8e87e65c1
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,23 @@
+from sympy import sqrt, I
+from sympy.simplify.sqrtdenest import sqrtdenest
+
+# Test with an expression that should be denested
+nested_expr = sqrt(sqrt(2))
+print(f"Original: {nested_expr}")
+denested = sqrtdenest(nested_expr)
+print(f"Denested: {denested}")
+
+# Test with an expression that contains complex numbers
+complex_expr = sqrt(sqrt(2 + I))
+print(f"\nOriginal: {complex_expr}")
+try:
+    denested_complex = sqrtdenest(complex_expr)
+    print(f"Denested: {denested_complex}")
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {e}")
+
+# Test with the expression from the issue
+issue_expr = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2
+print(f"\nOriginal issue expression: {issue_expr}")
+issue_result = sqrtdenest(issue_expr)
+print(f"Result: {issue_result}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..7eafaa531f
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,38 @@
+from sympy import sqrt, I
+from sympy.simplify.sqrtdenest import sqrtdenest, _sqrtdenest0, _sqrtdenest1
+from sympy.simplify.radsimp import split_surds, _split_gcd
+
+# The expression that causes the error
+expr = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2
+
+print("Testing with the original expression:")
+try:
+    result = sqrtdenest(expr)
+    print(f"Success! Result: {result}")
+except IndexError as e:
+    print(f"Error: {e}")
+    print("The issue is reproduced.")
+
+# Let's try to trace the error more precisely
+print("\nTracing the error path:")
+try:
+    # This is the path from the error trace in the issue description
+    print("Calling _sqrtdenest0...")
+    result0 = _sqrtdenest0(expr)
+    print("Calling _sqrtdenest1...")
+    result1 = _sqrtdenest1(expr)
+
+    # Let's check if the issue is in split_surds
+    print("\nTesting split_surds directly...")
+    # We need to create a similar expression to what would be passed to split_surds
+    # In _sqrt_match, it would be called with an expression like this:
+    test_expr = 3*I + sqrt(2)*sqrt(4 + 3*I)
+    print(f"Testing with: {test_expr}")
+    try:
+        r, b, a = split_surds(test_expr)
+        print(f"split_surds succeeded: r={r}, b={b}, a={a}")
+    except IndexError as e:
+        print(f"Error in split_surds: {e}")
+
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {e}")
\ No newline at end of file
diff --git a/sympy/simplify/radsimp.py b/sympy/simplify/radsimp.py
index 216ae26204..1567bc2d8a 100644
--- a/sympy/simplify/radsimp.py
+++ b/sympy/simplify/radsimp.py
@@ -1077,6 +1077,11 @@ def split_surds(expr):
     coeff_muls = [x.as_coeff_Mul() for x in args]
     surds = [x[1]**2 for x in coeff_muls if x[1].is_Pow]
     surds.sort(key=default_sort_key)
+
+    # Handle the case when there are no surds
+    if not surds:
+        return S.One, Add(*[c*s for c, s in coeff_muls if not s.is_Pow or s.exp != S.Half]), Add(*[c*s for c, s in coeff_muls if s.is_Pow and s.exp == S.Half])
+
     g, b1, b2 = _split_gcd(*surds)
     g2 = g
     if not b2 and len(b1) >= 2:
diff --git a/verify_fix.py b/verify_fix.py
new file mode 100644
index 0000000000..2e43370185
--- /dev/null
+++ b/verify_fix.py
@@ -0,0 +1,45 @@
+from sympy import sqrt, I, simplify
+from sympy.simplify.sqrtdenest import sqrtdenest, _sqrtdenest0, _sqrtdenest1
+
+# The expression from the issue description
+expr = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2
+print(f"Original expression: {expr}")
+
+# Let's trace what happens step by step
+print("\nTracing the denesting process:")
+result0 = _sqrtdenest0(expr)
+print(f"After _sqrtdenest0: {result0}")
+
+result1 = _sqrtdenest1(expr)
+print(f"After _sqrtdenest1: {result1}")
+
+# Final result
+final_result = sqrtdenest(expr)
+print(f"\nFinal result: {final_result}")
+
+# Let's simplify the expression to see if it matches the expected result
+simplified = simplify(final_result)
+print(f"Simplified result: {simplified}")
+
+# Expected result according to the issue description
+expected = "3/2 - sqrt(2)*sqrt(4 + 3*I)/2 + 3*I/2"
+print(f"Expected result: {expected}")
+print(f"Match with simplified: {str(simplified) == expected}")
+
+# Test a few more cases to ensure we haven't broken anything
+print("\nAdditional tests:")
+
+# Test with a simple expression that should be denested
+simple_expr = sqrt(sqrt(2))
+simple_result = sqrtdenest(simple_expr)
+print(f"sqrt(sqrt(2)) -> {simple_result}")
+
+# Test with an expression that has no surds
+no_surds_expr = 3 + 2*I
+no_surds_result = sqrtdenest(no_surds_expr)
+print(f"{no_surds_expr} -> {no_surds_result}")
+
+# Test with a complex nested expression
+complex_expr = sqrt(2 + sqrt(3 + sqrt(4)))
+complex_result = sqrtdenest(complex_expr)
+print(f"{complex_expr} -> {complex_result}")
\ No newline at end of file
