diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 0f53d9c30b..da867ef66a 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -2524,7 +2524,14 @@ class AutoFieldMeta(type):
         return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)
 
     def __subclasscheck__(self, subclass):
-        return subclass in self._subclasses or super().__subclasscheck__(subclass)
+        # Check if subclass is directly one of the AutoField subclasses
+        if subclass in self._subclasses:
+            return True
+        # Check if subclass is a subclass of any of the AutoField subclasses
+        for cls in self._subclasses:
+            if issubclass(subclass, cls) and subclass is not cls:
+                return True
+        return super().__subclasscheck__(subclass)
 
 
 class AutoField(AutoFieldMixin, IntegerField, metaclass=AutoFieldMeta):
diff --git a/final_test.py b/final_test.py
new file mode 100644
index 0000000000..c26e212aee
--- /dev/null
+++ b/final_test.py
@@ -0,0 +1,61 @@
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'final_test_app',
+        ],
+        DEFAULT_AUTO_FIELD='final_test.MyBigAutoField',
+    )
+
+django.setup()
+
+# Create our custom field
+from django.db import models
+
+class MyBigAutoField(models.BigAutoField):
+    pass
+
+class MyModel(models.Model):
+    class Meta:
+        app_label = 'final_test_app'
+
+# Try to access the model to trigger the error
+print("Model created successfully!")
+print(f"Primary key field class: {MyModel._meta.pk.__class__}")
+print(f"Is instance of AutoField: {isinstance(MyModel._meta.pk, models.AutoField)}")
+print(f"Is instance of BigAutoField: {isinstance(MyModel._meta.pk, models.BigAutoField)}")
+print(f"Is instance of MyBigAutoField: {isinstance(MyModel._meta.pk, MyBigAutoField)}")
+
+# Now test with SmallAutoField
+class MySmallAutoField(models.SmallAutoField):
+    pass
+
+# Create a new module to avoid name conflicts
+import sys
+import types
+small_module = types.ModuleType('small_test')
+sys.modules['small_test'] = small_module
+
+# Change the default auto field to use our new module
+settings.DEFAULT_AUTO_FIELD = 'small_test.MySmallAutoField'
+
+# Add the field to the new module
+small_module.MySmallAutoField = MySmallAutoField
+
+# Create a new model to test with SmallAutoField
+class SmallModel(models.Model):
+    class Meta:
+        app_label = 'final_test_app'
+
+print("\nSmallAutoField test:")
+print(f"Primary key field class: {SmallModel._meta.pk.__class__}")
+print(f"Is instance of AutoField: {isinstance(SmallModel._meta.pk, models.AutoField)}")
+print(f"Is instance of SmallAutoField: {isinstance(SmallModel._meta.pk, models.SmallAutoField)}")
+print(f"Is instance of MySmallAutoField: {isinstance(SmallModel._meta.pk, MySmallAutoField)}")
\ No newline at end of file
diff --git a/final_test_app/__init__.py b/final_test_app/__init__.py
new file mode 100644
index 0000000000..7d9b8a2c45
--- /dev/null
+++ b/final_test_app/__init__.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class FinalTestAppConfig(AppConfig):
+    name = 'final_test_app'
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..81fc15f831
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,33 @@
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+        'reproduce_issue',
+    ],
+    DEFAULT_AUTO_FIELD='reproduce_issue.MyBigAutoField',
+)
+
+django.setup()
+
+# Create our custom field
+from django.db import models
+
+class MyBigAutoField(models.BigAutoField):
+    pass
+
+class MyModel(models.Model):
+    class Meta:
+        app_label = 'reproduce_issue'
+
+# Try to access the model to trigger the error
+print("Model created successfully!")
+print(f"Primary key field: {MyModel._meta.pk}")
+print(f"Is instance of AutoField: {isinstance(MyModel._meta.pk, models.AutoField)}")
+print(f"Is instance of BigAutoField: {isinstance(MyModel._meta.pk, models.BigAutoField)}")
+print(f"Is instance of MyBigAutoField: {isinstance(MyModel._meta.pk, MyBigAutoField)}")
\ No newline at end of file
diff --git a/simple_test.py b/simple_test.py
new file mode 100644
index 0000000000..002f8ffa34
--- /dev/null
+++ b/simple_test.py
@@ -0,0 +1,32 @@
+from django.db import models
+
+# Test the subclass check directly
+class MyBigAutoField(models.BigAutoField):
+    pass
+
+class MySmallAutoField(models.SmallAutoField):
+    pass
+
+# Check if the fields are recognized as subclasses of AutoField
+print(f"Is MyBigAutoField a subclass of AutoField? {issubclass(MyBigAutoField, models.AutoField)}")
+print(f"Is MySmallAutoField a subclass of AutoField? {issubclass(MySmallAutoField, models.AutoField)}")
+
+# Create instances and check isinstance
+my_big_field = MyBigAutoField()
+my_small_field = MySmallAutoField()
+
+print(f"Is my_big_field an instance of AutoField? {isinstance(my_big_field, models.AutoField)}")
+print(f"Is my_small_field an instance of AutoField? {isinstance(my_small_field, models.AutoField)}")
+
+# Now let's test the actual check that's used in options.py
+if not issubclass(MyBigAutoField, models.AutoField):
+    raise ValueError(
+        f"Primary key 'MyBigAutoField' must subclass AutoField."
+    )
+
+if not issubclass(MySmallAutoField, models.AutoField):
+    raise ValueError(
+        f"Primary key 'MySmallAutoField' must subclass AutoField."
+    )
+
+print("All tests passed!")
\ No newline at end of file
diff --git a/test_autofield_subclass.py b/test_autofield_subclass.py
new file mode 100644
index 0000000000..6448c04f6d
--- /dev/null
+++ b/test_autofield_subclass.py
@@ -0,0 +1,23 @@
+from django.db import models
+
+# Test the subclass check directly
+class MyBigAutoField(models.BigAutoField):
+    pass
+
+class MySmallAutoField(models.SmallAutoField):
+    pass
+
+# Check if the fields are recognized as subclasses of AutoField
+print(f"Is MyBigAutoField a subclass of AutoField? {issubclass(MyBigAutoField, models.AutoField)}")
+print(f"Is MySmallAutoField a subclass of AutoField? {issubclass(MySmallAutoField, models.AutoField)}")
+print(f"Is MyBigAutoField a subclass of BigAutoField? {issubclass(MyBigAutoField, models.BigAutoField)}")
+print(f"Is MySmallAutoField a subclass of SmallAutoField? {issubclass(MySmallAutoField, models.SmallAutoField)}")
+
+# Create instances and check isinstance
+my_big_field = MyBigAutoField()
+my_small_field = MySmallAutoField()
+
+print(f"Is my_big_field an instance of AutoField? {isinstance(my_big_field, models.AutoField)}")
+print(f"Is my_small_field an instance of AutoField? {isinstance(my_small_field, models.AutoField)}")
+print(f"Is my_big_field an instance of BigAutoField? {isinstance(my_big_field, models.BigAutoField)}")
+print(f"Is my_small_field an instance of SmallAutoField? {isinstance(my_small_field, models.SmallAutoField)}")
\ No newline at end of file
diff --git a/test_default_auto_field.py b/test_default_auto_field.py
new file mode 100644
index 0000000000..d227d37f57
--- /dev/null
+++ b/test_default_auto_field.py
@@ -0,0 +1,39 @@
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        DEFAULT_AUTO_FIELD='test_default_auto_field.MyBigAutoField',
+    )
+
+django.setup()
+
+# Create our custom field
+from django.db import models
+
+class MyBigAutoField(models.BigAutoField):
+    pass
+
+class MySmallAutoField(models.SmallAutoField):
+    pass
+
+# Create a model that will use our custom field as the primary key
+class MyModel(models.Model):
+    class Meta:
+        app_label = 'test_default_auto_field'
+        # This will trigger the _get_default_pk_class method
+        # which will check if our custom field is a subclass of AutoField
+
+# Try to access the model to trigger the error
+print("Model created successfully!")
+print(f"Primary key field class: {MyModel._meta.pk.__class__}")
+print(f"Is instance of AutoField: {isinstance(MyModel._meta.pk, models.AutoField)}")
+print(f"Is instance of BigAutoField: {isinstance(MyModel._meta.pk, models.BigAutoField)}")
+print(f"Is instance of MyBigAutoField: {isinstance(MyModel._meta.pk, MyBigAutoField)}")
\ No newline at end of file
