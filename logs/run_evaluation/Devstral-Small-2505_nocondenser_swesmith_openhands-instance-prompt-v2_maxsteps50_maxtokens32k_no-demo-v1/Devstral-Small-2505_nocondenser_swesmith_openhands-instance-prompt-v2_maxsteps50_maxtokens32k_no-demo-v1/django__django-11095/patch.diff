diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 5e7b23f9a0..02486f6ad4 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -554,6 +554,12 @@ class ModelAdmin(BaseModelAdmin):
     preserve_filters = True
     inlines = []
 
+    def get_inlines(self, request, obj=None):
+        """
+        Hook for specifying custom inlines based on the request and object.
+        """
+        return self.inlines
+
     # Custom templates (designed to be over-ridden in subclasses)
     add_form_template = None
     change_form_template = None
@@ -582,7 +588,7 @@ class ModelAdmin(BaseModelAdmin):
 
     def get_inline_instances(self, request, obj=None):
         inline_instances = []
-        for inline_class in self.inlines:
+        for inline_class in self.get_inlines(request, obj):
             inline = inline_class(self.model, self.admin_site)
             if request:
                 if not (inline.has_view_or_change_permission(request, obj) or
diff --git a/test_get_inlines.py b/test_get_inlines.py
new file mode 100644
index 0000000000..b06f53dffc
--- /dev/null
+++ b/test_get_inlines.py
@@ -0,0 +1,68 @@
+import unittest
+from unittest.mock import MagicMock, patch
+
+# Import the ModelAdmin class from our modified file
+from django.contrib.admin.options import ModelAdmin
+
+class TestGetInlinesHook(unittest.TestCase):
+    def test_get_inlines_default(self):
+        """Test that get_inlines returns the default inlines."""
+        # Create a ModelAdmin instance with specific inlines
+        admin = ModelAdmin(MagicMock(), MagicMock())
+        admin.inlines = [MagicMock(), MagicMock()]
+
+        # Call get_inlines and verify it returns the default inlines
+        inlines = admin.get_inlines(MagicMock())
+        self.assertEqual(len(inlines), 2)
+        self.assertIs(inlines[0], admin.inlines[0])
+        self.assertIs(inlines[1], admin.inlines[1])
+
+    def test_get_inlines_custom(self):
+        """Test that a custom get_inlines implementation works."""
+        # Create a ModelAdmin with a custom get_inlines method
+        admin = ModelAdmin(MagicMock(), MagicMock())
+        admin.inlines = [MagicMock(), MagicMock()]
+
+        # Define a custom get_inlines method
+        custom_inlines = [MagicMock()]
+        def custom_get_inlines(request, obj=None):
+            return custom_inlines
+
+        # Replace the default get_inlines with our custom implementation
+        admin.get_inlines = custom_get_inlines
+
+        # Call get_inlines and verify it returns our custom inlines
+        inlines = admin.get_inlines(MagicMock())
+        self.assertEqual(len(inlines), 1)
+        self.assertIs(inlines[0], custom_inlines[0])
+
+    def test_get_inline_instances_uses_get_inlines(self):
+        """Test that get_inline_instances uses get_inlines."""
+        # Create a ModelAdmin instance
+        admin = ModelAdmin(MagicMock(), MagicMock())
+
+        # Create mock inlines
+        inline1 = MagicMock()
+        inline2 = MagicMock()
+
+        # Set up the admin's inlines
+        admin.inlines = [inline1, inline2]
+
+        # Mock the has_permission methods to always return True
+        inline1_instance = MagicMock()
+        inline2_instance = MagicMock()
+
+        # Mock the inline class instantiation
+        with patch('django.contrib.admin.options.ModelAdmin.get_inlines') as mock_get_inlines:
+            # First test with default get_inlines
+            mock_get_inlines.return_value = admin.inlines
+            inline_instances = admin.get_inline_instances(MagicMock())
+            self.assertEqual(len(inline_instances), 2)
+
+            # Now test with a custom get_inlines that returns only one inline
+            mock_get_inlines.return_value = [inline1]
+            inline_instances = admin.get_inline_instances(MagicMock())
+            self.assertEqual(len(inline_instances), 1)
+
+if __name__ == '__main__':
+    unittest.main()
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..a120d3a2ad
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,75 @@
+import os
+import django
+
+BASE_DIR = os.path.dirname(os.path.abspath(__file__))
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+]
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }
+}
+
+SECRET_KEY = 'fake-key'
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'django.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'django.get_wsgi_application()'
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+LANGUAGE_CODE = 'en-us'
+TIME_ZONE = 'UTC'
+USE_I18N = True
+USE_L10N = True
+USE_TZ = True
+
+STATIC_URL = '/static/'
\ No newline at end of file
