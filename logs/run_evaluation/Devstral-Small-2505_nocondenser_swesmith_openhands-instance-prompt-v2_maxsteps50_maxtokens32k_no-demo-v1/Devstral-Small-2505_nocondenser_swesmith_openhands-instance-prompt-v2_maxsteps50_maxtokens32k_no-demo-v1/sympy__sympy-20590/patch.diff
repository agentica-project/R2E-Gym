diff --git a/sympy/core/_print_helpers.py b/sympy/core/_print_helpers.py
index 96d7e72676..f7875b9eec 100644
--- a/sympy/core/_print_helpers.py
+++ b/sympy/core/_print_helpers.py
@@ -17,6 +17,8 @@ class Printable:
     This also adds support for LaTeX printing in jupyter notebooks.
     """
 
+    __slots__ = ()
+
     # Note, we always use the default ordering (lex) in __str__ and __repr__,
     # regardless of the global setting. See issue 5487.
     def __str__(self):
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..4b66fb90aa
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,33 @@
+from sympy import Symbol, Function, And, Or
+from sympy.core.basic import Basic
+from sympy.core.expr import Expr, AtomicExpr
+from sympy.core.function import Application
+from sympy.logic.boolalg import Boolean, BooleanFunction
+
+def test_no_dict():
+    """Test that various SymPy objects don't have a __dict__ attribute."""
+    # Test Symbol
+    s = Symbol('s')
+    assert not hasattr(s, '__dict__'), f"Symbol has __dict__: {getattr(s, '__dict__', None)}"
+
+    # Test other classes
+    classes = [
+        (Symbol('x'), "Symbol"),
+        (Function('f')('x'), "Function"),
+        (And(Symbol('x'), Symbol('y')), "And"),
+        (Or(Symbol('x'), Symbol('y')), "Or"),
+        (Basic(), "Basic"),
+        (Expr(), "Expr"),
+        (AtomicExpr(), "AtomicExpr"),
+        (Application(Basic, ()), "Application"),
+        (Boolean(), "Boolean"),
+        (BooleanFunction(Basic, ()), "BooleanFunction")
+    ]
+
+    for obj, name in classes:
+        assert not hasattr(obj, '__dict__'), f"{name} has __dict__: {getattr(obj, '__dict__', None)}"
+
+    print("All objects pass the __dict__ test!")
+
+if __name__ == "__main__":
+    test_no_dict()
\ No newline at end of file
diff --git a/test_symbol_dict.py b/test_symbol_dict.py
new file mode 100644
index 0000000000..6dcb663705
--- /dev/null
+++ b/test_symbol_dict.py
@@ -0,0 +1,36 @@
+from sympy import Symbol
+
+# Create a symbol
+s = Symbol('s')
+
+# Check if __dict__ exists
+try:
+    has_dict = hasattr(s, '__dict__')
+    if has_dict:
+        print("Symbol has __dict__ attribute")
+        print(f"s.__dict__ = {s.__dict__}")
+    else:
+        print("Symbol does not have __dict__ attribute")
+except Exception as e:
+    print(f"Error: {e}")
+
+# Check __slots__
+try:
+    slots = getattr(Symbol, '__slots__', None)
+    if slots is not None:
+        print(f"Symbol.__slots__ = {slots}")
+    else:
+        print("Symbol does not have __slots__ attribute")
+except Exception as e:
+    print(f"Error: {e}")
+
+# Print the class hierarchy
+print("\nClass hierarchy:")
+for cls in Symbol.__mro__:
+    print(f"- {cls.__name__}")
+    # Check if class has __slots__
+    if hasattr(cls, '__slots__'):
+        print(f"  __slots__ = {getattr(cls, '__slots__')}")
+    # Check if class has __dict__ attribute
+    if cls is not object and not hasattr(cls, '__slots__'):
+        print("  WARNING: Class without __slots__!")
\ No newline at end of file
