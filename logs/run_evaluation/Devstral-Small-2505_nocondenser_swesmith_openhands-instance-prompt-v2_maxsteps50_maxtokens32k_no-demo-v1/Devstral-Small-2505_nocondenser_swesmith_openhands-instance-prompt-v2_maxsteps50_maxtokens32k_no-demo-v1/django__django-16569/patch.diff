diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100755
index 0000000000..9676778589
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,96 @@
+#!/usr/bin/env python3
+import os
+import sys
+import django
+from django import forms
+
+class MyForm(forms.Form):
+    my_field = forms.CharField()
+
+def test_empty_form_with_can_delete_true_can_delete_extra_false():
+    """Test that empty_form works with can_delete=True and can_delete_extra=False."""
+    MyFormSet = forms.formset_factory(
+        form=MyForm,
+        can_delete=True,
+        can_delete_extra=False,
+    )
+    my_formset = MyFormSet(initial=None)
+    form = my_formset.empty_form
+    print("✓ empty_form works with can_delete=True and can_delete_extra=False")
+    return True
+
+def test_empty_form_with_can_delete_true_can_delete_extra_true():
+    """Test that empty_form works with can_delete=True and can_delete_extra=True."""
+    MyFormSet = forms.formset_factory(
+        form=MyForm,
+        can_delete=True,
+        can_delete_extra=True,
+    )
+    my_formset = MyFormSet(initial=None)
+    form = my_formset.empty_form
+    print("✓ empty_form works with can_delete=True and can_delete_extra=True")
+    return True
+
+def test_empty_form_with_can_delete_false():
+    """Test that empty_form works with can_delete=False."""
+    MyFormSet = forms.formset_factory(
+        form=MyForm,
+        can_delete=False,
+    )
+    my_formset = MyFormSet(initial=None)
+    form = my_formset.empty_form
+    print("✓ empty_form works with can_delete=False")
+    return True
+
+def test_formset_with_initial_data():
+    """Test that a formset with initial data works correctly."""
+    initial_data = [
+        {'my_field': 'Initial value 1'},
+        {'my_field': 'Initial value 2'},
+    ]
+    MyFormSet = forms.formset_factory(
+        form=MyForm,
+        can_delete=True,
+        can_delete_extra=False,
+    )
+    my_formset = MyFormSet(initial=initial_data)
+    # This should not raise an error
+    print("✓ Formset with initial data works")
+    return True
+
+if __name__ == "__main__":
+    # Set up Django
+    django.conf.settings.configure(
+        DEBUG=True,
+        MIDDLEWARE_CLASSES=[],
+        ROOT_URLCONF='',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+        ],
+    )
+    django.setup()
+
+    # Run all tests
+    tests = [
+        test_empty_form_with_can_delete_true_can_delete_extra_false,
+        test_empty_form_with_can_delete_true_can_delete_extra_true,
+        test_empty_form_with_can_delete_false,
+        test_formset_with_initial_data,
+    ]
+
+    success = True
+    for test in tests:
+        try:
+            if not test():
+                success = False
+        except Exception as e:
+            print(f"✗ Test failed: {test.__name__}")
+            print(f"  Error: {e}")
+            success = False
+
+    if success:
+        print("\nAll tests passed! The fix is working correctly.")
+        sys.exit(0)
+    else:
+        print("\nSome tests failed. The fix may not be complete.")
+        sys.exit(1)
\ No newline at end of file
diff --git a/django/forms/formsets.py b/django/forms/formsets.py
index 235aaf844c..02d040ee03 100644
--- a/django/forms/formsets.py
+++ b/django/forms/formsets.py
@@ -490,7 +490,7 @@ class BaseFormSet(RenderableFormMixin):
                     required=False,
                     widget=self.get_ordering_widget(),
                 )
-        if self.can_delete and (self.can_delete_extra or index < initial_form_count):
+        if self.can_delete and (self.can_delete_extra or (index is not None and index < initial_form_count)):
             form.fields[DELETION_FIELD_NAME] = BooleanField(
                 label=_("Delete"),
                 required=False,
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100755
index 0000000000..31d5127b86
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,43 @@
+#!/usr/bin/env python3
+import os
+import sys
+import django
+from django import forms
+
+class MyForm(forms.Form):
+    my_field = forms.CharField()
+
+if __name__ == "__main__":
+    # Set up Django
+    django.conf.settings.configure(
+        DEBUG=True,
+        MIDDLEWARE_CLASSES=[],
+        ROOT_URLCONF='',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+        ],
+    )
+    django.setup()
+
+    # Create a formset with can_delete=True and can_delete_extra=False
+    MyFormSet = forms.formset_factory(
+        form=MyForm,
+        can_delete=True,
+        can_delete_extra=False,
+    )
+
+    # Create a formset instance
+    my_formset = MyFormSet(
+        initial=None,
+    )
+
+    # Try to access empty_form, which should trigger the error
+    try:
+        print("Accessing empty_form...")
+        form = my_formset.empty_form
+        print("Success! empty_form accessed without error.")
+        print(f"Form fields: {list(form.fields.keys())}")
+    except TypeError as e:
+        print(f"Error: {e}")
+        print("The issue is reproduced.")
+        sys.exit(1)
\ No newline at end of file
