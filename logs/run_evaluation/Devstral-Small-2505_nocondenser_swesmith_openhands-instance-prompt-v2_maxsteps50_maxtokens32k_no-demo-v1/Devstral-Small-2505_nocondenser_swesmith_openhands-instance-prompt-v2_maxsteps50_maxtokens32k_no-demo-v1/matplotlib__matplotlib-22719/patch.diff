diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..d38ae907d5
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,45 @@
+import matplotlib.pyplot as plt
+import numpy as np
+import warnings
+
+# Set warnings to be displayed but not turned into errors
+warnings.filterwarnings('always')
+
+# Test 1: Empty data with category units
+print("Test 1: Empty data with category units")
+fig, ax = plt.subplots()
+ax.xaxis.update_units(["a", "b"])
+ax.plot([], [])
+print("  ✓ Empty plot works without warnings")
+
+# Test 2: Regular data with category units
+print("\nTest 2: Regular data with category units")
+ax.plot(["a", "b", "a"], [1, 2, 3])
+print("  ✓ Regular categorical data plot works")
+
+# Test 3: Mixed data types
+print("\nTest 3: Mixed data types")
+try:
+    ax.plot(["a", 2, "b"], [1, 2, 3])
+    print("  ✓ Mixed data types plot works")
+except Exception as e:
+    print(f"  ✗ Mixed data types failed: {type(e).__name__}: {str(e)}")
+
+# Test 4: Empty array with convert_xunits
+print("\nTest 4: Empty array with convert_xunits")
+try:
+    result = ax.convert_xunits([])
+    print(f"  ✓ convert_xunits with empty array works, result shape: {np.shape(result)}")
+except Exception as e:
+    print(f"  ✗ convert_xunits failed: {type(e).__name__}: {str(e)}")
+
+# Test 5: Non-empty array with convert_xunits
+print("\nTest 5: Non-empty array with convert_xunits")
+try:
+    result = ax.convert_xunits(["a", "b"])
+    print(f"  ✓ convert_xunits with data works, result: {result}")
+except Exception as e:
+    print(f"  ✗ convert_xunits failed: {type(e).__name__}: {str(e)}")
+
+plt.close(fig)
+print("\nAll tests completed!")
\ No newline at end of file
diff --git a/lib/matplotlib/category.py b/lib/matplotlib/category.py
index c823b68fd9..d0885751d9 100644
--- a/lib/matplotlib/category.py
+++ b/lib/matplotlib/category.py
@@ -53,6 +53,11 @@ class StrCategoryConverter(units.ConversionInterface):
         StrCategoryConverter._validate_unit(unit)
         # dtype = object preserves numerical pass throughs
         values = np.atleast_1d(np.array(value, dtype=object))
+
+        # Special case for empty arrays - return empty float array
+        if values.size == 0:
+            return np.array([], dtype=float)
+
         # pass through sequence of non binary numbers
         with _api.suppress_matplotlib_deprecation_warning():
             is_numlike = all(units.ConversionInterface.is_numlike(v)
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..1cd17eda7b
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,27 @@
+import matplotlib.pyplot as plt
+import warnings
+
+# Force warnings to be errors so we can see the full traceback
+warnings.filterwarnings('error')
+
+try:
+    # Create a figure and axis
+    f, ax = plt.subplots()
+
+    # Set the x-axis units to category (strings)
+    ax.xaxis.update_units(["a", "b"])
+
+    # Plot empty data - this should trigger the warning
+    ax.plot([], [])
+
+    print("No warning was triggered - issue is fixed!")
+except Exception as e:
+    print(f"Error type: {type(e).__name__}")
+    print(f"Error message: {str(e)}")
+
+# Also try the suggested alternative
+try:
+    ax.convert_xunits([])
+    print("convert_xunits with empty data works!")
+except Exception as e:
+    print(f"convert_xunits error: {type(e).__name__}: {str(e)}")
\ No newline at end of file
