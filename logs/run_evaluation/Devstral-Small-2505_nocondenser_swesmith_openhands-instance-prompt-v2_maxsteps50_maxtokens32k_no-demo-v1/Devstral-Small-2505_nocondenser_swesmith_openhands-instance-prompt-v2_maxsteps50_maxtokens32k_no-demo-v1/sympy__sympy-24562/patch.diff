diff --git a/debug_test.py b/debug_test.py
new file mode 100644
index 0000000000..16f0cf03e1
--- /dev/null
+++ b/debug_test.py
@@ -0,0 +1,21 @@
+from sympy import Rational
+import fractions
+
+# Debug the issue with string inputs
+print("Testing Rational('0.5', '100'):")
+print(f"fractions.Fraction('0.5') = {fractions.Fraction('0.5')}")
+print(f"fractions.Fraction('100') = {fractions.Fraction('100')}")
+print(f"fractions.Fraction('0.5') / fractions.Fraction('100') = {fractions.Fraction('0.5') / fractions.Fraction('100')}")
+
+# Test direct construction
+frac_p = fractions.Fraction('0.5')
+frac_q = fractions.Fraction('100')
+print(f"Rational({frac_p.numerator}, {frac_p.denominator * frac_q.numerator}) = {Rational(frac_p.numerator, frac_p.denominator * frac_q.numerator)}")
+
+# Test with float conversion
+float_p = float('0.5')
+print(f"Rational(float('0.5'), 100) = {Rational(float_p, 100)}")
+
+# Test the actual problematic case
+result1 = Rational('0.5', '100')
+print(f"Rational('0.5', '100') = {result1}")
\ No newline at end of file
diff --git a/detailed_test.py b/detailed_test.py
new file mode 100644
index 0000000000..66747940d0
--- /dev/null
+++ b/detailed_test.py
@@ -0,0 +1,32 @@
+from sympy import Rational, sympify
+import fractions
+
+def test_rational_conversion():
+    # Test case 1: Using string input
+    result1 = Rational('0.5', '100')
+    print(f"Rational('0.5', '100') = {result1}")
+
+    # Test case 2: Using float input
+    result2 = Rational(0.5, 100)
+    print(f"Rational(0.5, 100) = {result2}")
+
+    # Test direct fraction conversion
+    frac = fractions.Fraction('0.5')
+    print(f"fractions.Fraction('0.5') = {frac}")
+    result3 = Rational(frac.numerator, frac.denominator)
+    print(f"Rational({frac.numerator}, {frac.denominator}) = {result3}")
+
+    # Test direct fraction conversion with denominator
+    frac = fractions.Fraction('0.5')
+    result4 = Rational(frac.numerator, frac.denominator * 100)
+    print(f"Rational({frac.numerator}, {frac.denominator} * 100) = {result4}")
+
+    # Test with sympify
+    sym_result = sympify('0.5/100')
+    print(f"sympify('0.5/100') = {sym_result}")
+
+    # Print the expected result
+    print(f"Expected result: 1/200")
+
+if __name__ == "__main__":
+    test_rational_conversion()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..76b1524a31
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,13 @@
+from sympy import Rational
+
+# Test case 1: Using string input
+result1 = Rational('0.5', '100')
+print(f"Rational('0.5', '100') = {result1}")
+
+# Test case 2: Using float input
+result2 = Rational(0.5, 100)
+print(f"Rational(0.5, 100) = {result2}")
+
+# Expected result should be the same for both cases
+print(f"Are they equal? {result1 == result2}")
+print(f"Expected result: 1/200")
\ No newline at end of file
diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py
index 52f7ea45ad..25f4f85bda 100644
--- a/sympy/core/numbers.py
+++ b/sympy/core/numbers.py
@@ -1587,6 +1587,16 @@ class Rational(Number):
 
     @cacheit
     def __new__(cls, p, q=None, gcd=None):
+        # Handle the case where both p and q are provided as strings
+        if q is not None and isinstance(p, str) and isinstance(q, str):
+            # If p is a decimal string, convert it to a float and use q as the denominator
+            if '.' in p and not '/' in p:
+                try:
+                    p_float = float(p)
+                    return Rational(p_float, int(q))
+                except (ValueError, TypeError):
+                    pass  # Continue with normal processing
+
         if q is None:
             if isinstance(p, Rational):
                 return p
