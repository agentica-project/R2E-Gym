diff --git a/direct_test.py b/direct_test.py
new file mode 100644
index 0000000000..149058ed97
--- /dev/null
+++ b/direct_test.py
@@ -0,0 +1,97 @@
+import django
+from django.db import models
+from django.conf import settings
+import time
+
+# Set up Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        ROOT_URLCONF='',
+        SECRET_KEY='fake-key',
+    )
+
+# Initialize Django
+django.setup()
+
+# Import the ImageField class
+from django.db.models.fields.files import ImageField
+
+# Create a class to track signal connections
+class SignalTracker:
+    def __init__(self):
+        self.connected = False
+
+    def track_signal(self, *args, **kwargs):
+        self.connected = True
+        print(f"Signal connected to {args[0].__class__.__name__}")
+
+# Create a tracker instance
+tracker = SignalTracker()
+
+# Monkey patch the update_dimension_fields method to track signal connections
+original_update_dimension_fields = ImageField.update_dimension_fields
+
+def patched_update_dimension_fields(self, instance, force=False, *args, **kwargs):
+    tracker.track_signal(self, instance, force, *args, **kwargs)
+    return original_update_dimension_fields(self, instance, force, *args, **kwargs)
+
+ImageField.update_dimension_fields = patched_update_dimension_fields
+
+# Define a model with an ImageField without width_field/height_field
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    image = ImageField(upload_to='images/')
+
+    class Meta:
+        app_label = 'test_app'
+
+# Define a model with an ImageField with width_field/height_field
+class TestModelWithDimensions(models.Model):
+    name = models.CharField(max_length=100)
+    image = ImageField(upload_to='images/', width_field='width', height_field='height')
+    width = models.PositiveIntegerField(null=True, blank=True, editable=False)
+    height = models.PositiveIntegerField(null=True, blank=True, editable=False)
+
+    class Meta:
+        app_label = 'test_app'
+
+# Check the field configurations
+image_field_no_dims = TestModel._meta.get_field('image')
+image_field_with_dims = TestModelWithDimensions._meta.get_field('image')
+
+print(f"TestModel width_field: {image_field_no_dims.width_field}")
+print(f"TestModel height_field: {image_field_no_dims.height_field}")
+print(f"TestModelWithDimensions width_field: {image_field_with_dims.width_field}")
+print(f"TestModelWithDimensions height_field: {image_field_with_dims.height_field}")
+
+# Reset the tracker
+tracker.connected = False
+
+# Create an instance of TestModel (no dimension fields)
+print("\nTesting TestModel (no dimension fields):")
+for i in range(5):
+    test_model = TestModel(name=f"Test {i}")
+print(f"Signal connected for TestModel: {tracker.connected}")
+
+# Reset the tracker
+tracker.connected = False
+
+# Create an instance of TestModelWithDimensions (with dimension fields)
+print("\nTesting TestModelWithDimensions (with dimension fields):")
+for i in range(5):
+    test_model_with_dims = TestModelWithDimensions(name=f"Test {i}")
+print(f"Signal connected for TestModelWithDimensions: {tracker.connected}")
+
+# Restore the original method
+ImageField.update_dimension_fields = original_update_dimension_fields
\ No newline at end of file
diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py
index 7f8eb128e1..4028c7fab7 100644
--- a/django/db/models/fields/files.py
+++ b/django/db/models/fields/files.py
@@ -441,7 +441,8 @@ class ImageField(FileField):
         # after their corresponding image field don't stay cleared by
         # Model.__init__, see bug #11196.
         # Only run post-initialization dimension update on non-abstract models
-        if not cls._meta.abstract:
+        # with width_field or height_field defined
+        if not cls._meta.abstract and (self.width_field or self.height_field):
             signals.post_init.connect(self.update_dimension_fields, sender=cls)
 
     def update_dimension_fields(self, instance, force=False, *args, **kwargs):
diff --git a/test_imagefield_perf.py b/test_imagefield_perf.py
new file mode 100644
index 0000000000..eb8bed0fc3
--- /dev/null
+++ b/test_imagefield_perf.py
@@ -0,0 +1,119 @@
+import time
+import signal
+import os
+import django
+from django.db import models
+from django.db.models.signals import post_init
+from django.conf import settings
+
+# Set up Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        ROOT_URLCONF='',
+        SECRET_KEY='fake-key',
+    )
+
+# Initialize Django
+django.setup()
+
+# Define a model with an ImageField without width_field/height_field
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    image = models.ImageField(upload_to='images/')
+
+    class Meta:
+        app_label = 'test_app'
+
+# Define a model with an ImageField with width_field/height_field
+class TestModelWithDimensions(models.Model):
+    name = models.CharField(max_length=100)
+    image = models.ImageField(upload_to='images/', width_field='width', height_field='height')
+    width = models.PositiveIntegerField(null=True, blank=True, editable=False)
+    height = models.PositiveIntegerField(null=True, blank=True, editable=False)
+
+    class Meta:
+        app_label = 'test_app'
+
+# Function to measure initialization time
+def measure_init_time(model_class, instances=1000):
+    # Create instances
+    start_time = time.time()
+    for i in range(instances):
+        model_class(name=f'Test {i}')
+    end_time = time.time()
+
+    return end_time - start_time
+
+# Function to check if post_init signals are connected
+def check_post_init_signals(model_class):
+    # Import the signal module
+    from django.db.models.signals import post_init
+
+    # Get all receivers for post_init
+    receivers = post_init.receivers
+
+    # Check if any receiver is connected to our model
+    for receiver in receivers:
+        receiver_func = receiver[0]
+        if hasattr(receiver_func, '__self__') and receiver_func.__self__ is not None:
+            if isinstance(receiver_func.__self__, model_class._meta.get_field('image').__class__):
+                return True
+
+    return False
+
+# Set a timeout handler
+def timeout_handler(signum, frame):
+    print("Timeout: Script took too long to execute")
+    exit(1)
+
+# Set timeout of 20 seconds
+signal.signal(signal.SIGALRM, timeout_handler)
+signal.alarm(20)
+
+# Run the test
+try:
+    # Check field configurations
+    image_field_no_dims = TestModel._meta.get_field('image')
+    image_field_with_dims = TestModelWithDimensions._meta.get_field('image')
+
+    print("Field configurations:")
+    print(f"Model without dimension fields: width_field={image_field_no_dims.width_field}, height_field={image_field_no_dims.height_field}")
+    print(f"Model with dimension fields: width_field={image_field_with_dims.width_field}, height_field={image_field_with_dims.height_field}")
+
+    # Check if post_init signals are connected
+    has_signal_no_dims = check_post_init_signals(TestModel)
+    has_signal_with_dims = check_post_init_signals(TestModelWithDimensions)
+
+    print("\nPost-init signal handlers:")
+    print(f"Model without dimension fields: {'Has post_init signal' if has_signal_no_dims else 'No post_init signal'}")
+    print(f"Model with dimension fields: {'Has post_init signal' if has_signal_with_dims else 'No post_init signal'}")
+
+    if has_signal_no_dims and not (image_field_no_dims.width_field or image_field_no_dims.height_field):
+        print("\nISSUE CONFIRMED: ImageField is adding post_init signal handlers even when width_field and height_field are not set!")
+
+    # Measure initialization time
+    print("\nMeasuring initialization time:")
+    time_no_dims = measure_init_time(TestModel, 10000)
+    print(f"Model without dimension fields: {time_no_dims:.6f} seconds")
+
+    time_with_dims = measure_init_time(TestModelWithDimensions, 10000)
+    print(f"Model with dimension fields: {time_with_dims:.6f} seconds")
+
+    print(f"\nPerformance ratio: {time_no_dims / time_with_dims:.2f}x")
+
+except Exception as e:
+    print(f"Error: {e}")
+finally:
+    # Disable the alarm
+    signal.alarm(0)
\ No newline at end of file
diff --git a/test_imagefield_signal.py b/test_imagefield_signal.py
new file mode 100644
index 0000000000..eccaada729
--- /dev/null
+++ b/test_imagefield_signal.py
@@ -0,0 +1,62 @@
+import django
+from django.db import models
+from django.conf import settings
+import inspect
+
+# Set up Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        ROOT_URLCONF='',
+        SECRET_KEY='fake-key',
+    )
+
+# Initialize Django
+django.setup()
+
+# Import the ImageField class
+from django.db.models.fields.files import ImageField
+
+# Create a simple model class for testing
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    image = ImageField(upload_to='images/')
+
+    class Meta:
+        app_label = 'test_app'
+
+# Create a model class with dimension fields
+class TestModelWithDimensions(models.Model):
+    name = models.CharField(max_length=100)
+    image = ImageField(upload_to='images/', width_field='width', height_field='height')
+    width = models.PositiveIntegerField(null=True, blank=True, editable=False)
+    height = models.PositiveIntegerField(null=True, blank=True, editable=False)
+
+    class Meta:
+        app_label = 'test_app'
+
+# Inspect the contribute_to_class method
+print("Inspecting ImageField.contribute_to_class:")
+print(inspect.getsource(ImageField.contribute_to_class))
+
+# Check if width_field and height_field affect signal connection
+print("\nChecking signal connection behavior:")
+image_field_no_dims = TestModel._meta.get_field('image')
+image_field_with_dims = TestModelWithDimensions._meta.get_field('image')
+
+print(f"Model without dimension fields: width_field={image_field_no_dims.width_field}, height_field={image_field_no_dims.height_field}")
+print(f"Model with dimension fields: width_field={image_field_with_dims.width_field}, height_field={image_field_with_dims.height_field}")
+
+# Let's look at the update_dimension_fields method
+print("\nInspecting update_dimension_fields method:")
+print(inspect.getsource(ImageField.update_dimension_fields))
\ No newline at end of file
diff --git a/verify_fix.py b/verify_fix.py
new file mode 100644
index 0000000000..ea9ab47985
--- /dev/null
+++ b/verify_fix.py
@@ -0,0 +1,119 @@
+import django
+from django.db import models
+from django.db.models.signals import post_init
+from django.conf import settings
+import time
+
+# Set up Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        ROOT_URLCONF='',
+        SECRET_KEY='fake-key',
+    )
+
+# Initialize Django
+django.setup()
+
+# Define a model with an ImageField without width_field/height_field
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    image = models.ImageField(upload_to='images/')
+
+    class Meta:
+        app_label = 'test_app'
+
+# Define a model with an ImageField with width_field/height_field
+class TestModelWithDimensions(models.Model):
+    name = models.CharField(max_length=100)
+    image = models.ImageField(upload_to='images/', width_field='width', height_field='height')
+    width = models.PositiveIntegerField(null=True, blank=True, editable=False)
+    height = models.PositiveIntegerField(null=True, blank=True, editable=False)
+
+    class Meta:
+        app_label = 'test_app'
+
+# Function to check if post_init signals are connected
+def check_post_init_signals():
+    # Let's check the field objects directly
+    image_field_no_dims = TestModel._meta.get_field('image')
+    image_field_with_dims = TestModelWithDimensions._meta.get_field('image')
+
+    print(f"TestModel image field: {image_field_no_dims}")
+    print(f"TestModelWithDimensions image field: {image_field_with_dims}")
+
+    print(f"TestModel width_field: {image_field_no_dims.width_field}")
+    print(f"TestModel height_field: {image_field_no_dims.height_field}")
+    print(f"TestModelWithDimensions width_field: {image_field_with_dims.width_field}")
+    print(f"TestModelWithDimensions height_field: {image_field_with_dims.height_field}")
+
+    # Get all receivers for post_init
+    receivers = post_init.receivers
+
+    # Check for TestModel
+    test_model_receivers = []
+    test_model_with_dims_receivers = []
+
+    for receiver in receivers:
+        if receiver[1] is TestModel:
+            test_model_receivers.append(receiver[0])
+        elif receiver[1] is TestModelWithDimensions:
+            test_model_with_dims_receivers.append(receiver[0])
+
+    print(f"Total post_init receivers: {len(receivers)}")
+    return test_model_receivers, test_model_with_dims_receivers
+
+# Function to measure initialization time
+def measure_init_time(model_class, instances=10000):
+    # Create instances
+    start_time = time.time()
+    for i in range(instances):
+        model_class(name=f'Test {i}')
+    end_time = time.time()
+
+    return end_time - start_time
+
+# Run the test
+print("Checking signal connection behavior:")
+test_model_receivers, test_model_with_dims_receivers = check_post_init_signals()
+
+print(f"TestModel (no dimension fields) has {len(test_model_receivers)} post_init receivers")
+print(f"TestModelWithDimensions (with dimension fields) has {len(test_model_with_dims_receivers)} post_init receivers")
+
+# Measure initialization time
+print("\nMeasuring initialization time:")
+time_no_dims = measure_init_time(TestModel)
+print(f"Model without dimension fields: {time_no_dims:.6f} seconds")
+
+time_with_dims = measure_init_time(TestModelWithDimensions)
+print(f"Model with dimension fields: {time_with_dims:.6f} seconds")
+
+print(f"\nPerformance ratio: {time_no_dims / time_with_dims:.2f}x")
+
+# Check if the fix is working correctly
+image_field_no_dims = TestModel._meta.get_field('image')
+image_field_with_dims = TestModelWithDimensions._meta.get_field('image')
+
+has_no_dims_signal = len(test_model_receivers) > 0
+has_with_dims_signal = len(test_model_with_dims_receivers) > 0
+
+print(f"\nSignal connection status:")
+print(f"TestModel (no dimension fields) has signal: {has_no_dims_signal}")
+print(f"TestModelWithDimensions (with dimension fields) has signal: {has_with_dims_signal}")
+
+if not has_no_dims_signal and has_with_dims_signal:
+    print("\nFIX VERIFIED: ImageField only adds post_init signal handlers when width_field or height_field is set!")
+elif not has_no_dims_signal and not has_with_dims_signal:
+    print("\nPARTIAL FIX: No signals are being added to either model. This might be due to how we're checking.")
+else:
+    print("\nFix not working as expected. Please check the implementation.")
\ No newline at end of file
