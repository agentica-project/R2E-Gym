diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100755
index 00000000..a2137d49
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,34 @@
+#!/usr/bin/env python
+# -*- coding: utf-8 -*-
+
+import requests
+import sys
+
+def test_binary_payload():
+    try:
+        # Test with UTF-8 encoded binary data
+        response = requests.put("http://httpbin.org/put", data=u"ööö".encode("utf-8"))
+        print("Test 1 - UTF-8 binary data: Success! Response status code:", response.status_code)
+
+        # Test with ASCII string
+        response = requests.put("http://httpbin.org/put", data="ascii string")
+        print("Test 2 - ASCII string: Success! Response status code:", response.status_code)
+
+        # Test with Unicode string
+        response = requests.put("http://httpbin.org/put", data=u"unicode string")
+        print("Test 3 - Unicode string: Success! Response status code:", response.status_code)
+
+        # Test with other binary data
+        response = requests.put("http://httpbin.org/put", data=b"\x00\x01\x02\x03")
+        print("Test 4 - Raw binary data: Success! Response status code:", response.status_code)
+
+        return True
+    except Exception as e:
+        print("Error:", e)
+        print("Error type:", type(e))
+        return False
+
+if __name__ == "__main__":
+    print("Testing binary payload with requests...")
+    success = test_binary_payload()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/requests/models.py b/requests/models.py
index 9c624d3c..5ef6334b 100644
--- a/requests/models.py
+++ b/requests/models.py
@@ -80,8 +80,11 @@ class RequestEncodingMixin(object):
         if parameters are supplied as a dict.
         """
 
-        if isinstance(data, (str, bytes)):
+        if isinstance(data, str):
             return to_native_string(data)
+        elif isinstance(data, bytes):
+            # Return binary data as-is
+            return data
         elif hasattr(data, 'read'):
             return data
         elif hasattr(data, '__iter__'):
diff --git a/test_binary_payload.py b/test_binary_payload.py
new file mode 100644
index 00000000..1c91eb83
--- /dev/null
+++ b/test_binary_payload.py
@@ -0,0 +1,30 @@
+#!/usr/bin/env python
+# -*- coding: utf-8 -*-
+
+import unittest
+import requests
+from requests.models import Request
+
+class TestBinaryPayload(unittest.TestCase):
+    def test_binary_data_in_request(self):
+        """Test that binary data is handled correctly in requests."""
+        # Test direct request
+        data = u"ööö".encode("utf-8")
+        request = Request('PUT', 'http://httpbin.org/put', data=data)
+        prepared = request.prepare()
+        self.assertEqual(prepared.body, data)
+
+        # Test with other binary data
+        data = b"\x00\x01\x02\x03"
+        request = Request('PUT', 'http://httpbin.org/put', data=data)
+        prepared = request.prepare()
+        self.assertEqual(prepared.body, data)
+
+        # Test with string data
+        data = "ascii string"
+        request = Request('PUT', 'http://httpbin.org/put', data=data)
+        prepared = request.prepare()
+        self.assertEqual(prepared.body, data)
+
+if __name__ == '__main__':
+    unittest.main()
\ No newline at end of file
