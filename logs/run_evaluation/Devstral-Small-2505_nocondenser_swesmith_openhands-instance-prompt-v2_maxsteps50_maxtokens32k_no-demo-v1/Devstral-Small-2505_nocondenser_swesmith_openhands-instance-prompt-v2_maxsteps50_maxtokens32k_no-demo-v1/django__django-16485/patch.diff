diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..acf77e2de1
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,78 @@
+from decimal import Decimal
+import django
+from django.conf import settings
+from django.template.defaultfilters import floatformat
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+        USE_I18N=True,
+        USE_L10N=True,
+        USE_TZ=True,
+    )
+    django.setup()
+
+# Test cases
+test_cases = [
+    # Original issue cases
+    ('0.00', 0, '0'),
+    (Decimal('0.00'), 0, '0'),
+
+    # Additional test cases
+    ('123.456', 0, '123'),
+    (Decimal('123.456'), 0, '123'),
+    ('0.123', 0, '0'),
+    (Decimal('0.123'), 0, '0'),
+    ('1.99', 0, '2'),
+    (Decimal('1.99'), 0, '2'),
+    ('-0.01', 0, '0'),
+    (Decimal('-0.01'), 0, '0'),
+    ('-1.99', 0, '-2'),
+    (Decimal('-1.99'), 0, '-2'),
+
+    # Original test cases from the test suite
+    (7.7, -1, '7.7'),
+    (7.0, -1, '7'),
+    (0.7, -1, '0.7'),
+    (-0.7, -1, '-0.7'),
+    (0.07, -1, '0.1'),
+    (-0.07, -1, '-0.1'),
+    (0.007, -1, '0.0'),
+    (0.0, -1, '0'),
+    (7.7, 0, '8'),  # This should still be '8' with our fix
+    (7.7, 3, '7.700'),
+    (6.000000, 3, '6.000'),
+    (6.200000, 3, '6.200'),
+    (6.200000, -3, '6.200'),
+    (13.1031, -3, '13.103'),
+    (11.1197, -2, '11.12'),
+    (11.0000, -2, '11'),
+    (11.000001, -2, '11.00'),
+    (8.2798, 3, '8.280'),
+    (5555.555, 2, '5555.56'),
+    (001.3000, 2, '1.30'),
+    (0.12345, 2, '0.12'),
+    (Decimal("555.555"), 2, '555.56'),
+    (Decimal("09.000"), -1, '9'),
+]
+
+# Run tests
+failed = False
+for value, precision, expected in test_cases:
+    try:
+        result = floatformat(value, precision)
+        if result != expected:
+            print(f"FAIL: floatformat({value!r}, {precision}) = {result!r}, expected {expected!r}")
+            failed = True
+        else:
+            print(f"PASS: floatformat({value!r}, {precision}) = {result!r}")
+    except Exception as e:
+        print(f"ERROR: floatformat({value!r}, {precision}) raised {type(e).__name__}: {e}")
+        failed = True
+
+if not failed:
+    print("\nAll tests passed!")
+else:
+    print("\nSome tests failed.")
\ No newline at end of file
diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 23c3a08c67..2c48492cd6 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -160,6 +160,27 @@ def floatformat(text, arg=-1):
             return ""
     try:
         p = int(arg)
+        # Handle the case when precision is 0
+        if p == 0:
+            # For zero precision, we need to round the number and display it without decimal places
+            # First, check if we need to round up
+            if d - int(d) >= 0.5:
+                d_for_format = int(d) + 1
+            else:
+                d_for_format = int(d)
+
+            # Handle negative numbers correctly
+            if d < 0 and d - int(d) <= -0.5:
+                d_for_format = int(d) - 1
+
+            return mark_safe(
+                formats.number_format(
+                    str(d_for_format),
+                    0,
+                    use_l10n=use_l10n,
+                    force_grouping=force_grouping,
+                )
+            )
     except ValueError:
         return input_val
 
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..62d36dd2f0
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,25 @@
+from decimal import Decimal
+import django
+from django.conf import settings
+from django.template.defaultfilters import floatformat
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        USE_I18N=True,
+        USE_L10N=True,
+        USE_TZ=True,
+    )
+    django.setup()
+
+try:
+    result1 = floatformat('0.00', 0)
+    print(f"floatformat('0.00', 0) = {result1}")
+except Exception as e:
+    print(f"Error with floatformat('0.00', 0): {type(e).__name__}: {e}")
+
+try:
+    result2 = floatformat(Decimal('0.00'), 0)
+    print(f"floatformat(Decimal('0.00'), 0) = {result2}")
+except Exception as e:
+    print(f"Error with floatformat(Decimal('0.00'), 0): {type(e).__name__}: {e}")
\ No newline at end of file
