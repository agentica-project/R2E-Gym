diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..cfe5b82760
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,40 @@
+from sympy.abc import x, y, z, a, b, c, m, n
+from sympy.solvers.diophantine import diophantine
+
+def test_diophantine_permutation(expr, syms1, syms2):
+    """Test that diophantine returns the same results for different symbol orders."""
+    result1 = diophantine(expr, syms=syms1, permute=True)
+    result2 = diophantine(expr, syms=syms2, permute=True)
+
+    # Create a mapping from syms2 to syms1
+    mapping = {s2: s1 for s1, s2 in zip(syms1, syms2)}
+
+    # Reorder result2 to match the order of syms1
+    reordered_result2 = set()
+    for t in result2:
+        reordered = tuple(mapping.get(s, s) for s in t)
+        reordered_result2.add(reordered)
+
+    equal = result1 == reordered_result2
+
+    print(f"Expression: {expr}")
+    print(f"Result with syms={syms1}: {result1}")
+    print(f"Result with syms={syms2}: {result2}")
+    print(f"Results are equal: {equal}")
+    print("-" * 50)
+    return equal
+
+# Test case 1: From the issue description
+expr1 = n**4 + m**4 - 2**4 - 3**4
+test1 = test_diophantine_permutation(expr1, (m, n), (n, m))
+
+# Test case 2: Another expression with different variables
+expr2 = x**2 + y**2 - 5**2
+test2 = test_diophantine_permutation(expr2, (x, y), (y, x))
+
+# Test case 3: Expression with three variables
+expr3 = a**3 + b**3 + c**3 - 6**3
+test3 = test_diophantine_permutation(expr3, (a, b, c), (c, b, a))
+
+# Overall result
+print(f"All tests passed: {test1 and test2 and test3}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..aa5a4145b2
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,16 @@
+from sympy.abc import m, n
+from sympy.solvers.diophantine import diophantine
+
+# Test case from the issue description
+expr = n**4 + m**4 - 2**4 - 3**4
+
+# Case 1: syms=(m, n)
+result1 = diophantine(expr, syms=(m, n), permute=True)
+print("Result with syms=(m, n):", result1)
+
+# Case 2: syms=(n, m)
+result2 = diophantine(expr, syms=(n, m), permute=True)
+print("Result with syms=(n, m):", result2)
+
+# Check if results are the same
+print("Results are equal:", result1 == result2)
\ No newline at end of file
diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py
index 6092e35dab..cf1fd514e6 100644
--- a/sympy/solvers/diophantine.py
+++ b/sympy/solvers/diophantine.py
@@ -181,8 +181,11 @@ def diophantine(eq, param=symbols("t", integer=True), syms=None,
             syms = [i for i in syms if i in var]
             if syms != var:
                 dict_sym_index = dict(zip(syms, range(len(syms))))
+                # Get solutions with original variable order
+                solutions = diophantine(eq, param=param, syms=None, permute=permute)
+                # Reorder solutions according to syms order
                 return {tuple([t[dict_sym_index[i]] for i in var])
-                            for t in diophantine(eq, param)}
+                            for t in solutions}
         n, d = eq.as_numer_denom()
         if n.is_number:
             return set()
