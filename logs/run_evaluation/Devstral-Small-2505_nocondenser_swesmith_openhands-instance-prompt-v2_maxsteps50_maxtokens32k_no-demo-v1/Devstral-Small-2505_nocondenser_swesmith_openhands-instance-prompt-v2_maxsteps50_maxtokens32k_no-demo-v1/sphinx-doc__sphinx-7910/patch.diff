diff --git a/setup.py b/setup.py
index a404f1fa5..2c6848797 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/ext/napoleon/__init__.py b/sphinx/ext/napoleon/__init__.py
index 10b1ff3a3..9a0286711 100644
--- a/sphinx/ext/napoleon/__init__.py
+++ b/sphinx/ext/napoleon/__init__.py
@@ -438,7 +438,21 @@ def _skip_member(app: Sphinx, what: str, name: str, obj: Any,
                         mod_path = cls_path.split('.')
                         cls = functools.reduce(getattr, mod_path, mod)
                     else:
-                        cls = obj.__globals__[cls_path]
+                        # Try to get the class from __globals__ first
+                        try:
+                            cls = obj.__globals__[cls_path]
+                        except (KeyError, AttributeError):
+                            # If that fails, try to get it from __qualname__
+                            qualname = getattr(obj, '__qualname__', '')
+                            if '.' in qualname:
+                                # Extract the class name from the qualname
+                                potential_cls_name = qualname.split('.')[0]
+                                if potential_cls_name in obj.__globals__:
+                                    cls = obj.__globals__[potential_cls_name]
+                                else:
+                                    raise KeyError
+                            else:
+                                raise KeyError
                 except Exception:
                     cls_is_owner = False
                 else:
diff --git a/test_complex_decorated_init.py b/test_complex_decorated_init.py
new file mode 100644
index 000000000..a7305bf60
--- /dev/null
+++ b/test_complex_decorated_init.py
@@ -0,0 +1,145 @@
+import functools
+import os
+import sys
+import tempfile
+import shutil
+from pathlib import Path
+
+# Create a temporary directory for our test
+temp_dir = tempfile.mkdtemp()
+try:
+    # Create a more complex module with multiple classes and decorated methods
+    module_path = os.path.join(temp_dir, "complex_module.py")
+    with open(module_path, "w") as f:
+        f.write("""
+import functools
+
+def simple_decorator(func):
+    \"\"\"A simple decorator that uses functools.wraps.\"\"\"
+    @functools.wraps(func)
+    def wrapper(*args, **kwargs):
+        return func(*args, **kwargs)
+    return wrapper
+
+def complex_decorator_with_args(arg1, arg2=None):
+    \"\"\"A more complex decorator that takes arguments.\"\"\"
+    def decorator(func):
+        @functools.wraps(func)
+        def wrapper(*args, **kwargs):
+            return func(*args, **kwargs)
+        return wrapper
+    return decorator
+
+class BaseClass:
+    \"\"\"A base class with a regular __init__ method.\"\"\"
+
+    def __init__(self, value):
+        \"\"\"Initialize the base class with a value.
+
+        Parameters
+        ----------
+        value : any
+            The value to initialize with.
+        \"\"\"
+        self.value = value
+
+class DerivedClass(BaseClass):
+    \"\"\"A derived class with a decorated __init__ method.\"\"\"
+
+    @simple_decorator
+    def __init__(self, value, extra):
+        \"\"\"Initialize the derived class with a value and extra.
+
+        Parameters
+        ----------
+        value : any
+            The value to initialize with.
+        extra : any
+            Additional value for the derived class.
+        \"\"\"
+        super().__init__(value)
+        self.extra = extra
+
+class MultipleDecoratorsClass:
+    \"\"\"A class with __init__ decorated with multiple decorators.\"\"\"
+
+    @simple_decorator
+    @complex_decorator_with_args('test')
+    def __init__(self, value1, value2=None):
+        \"\"\"Initialize with multiple values.
+
+        Parameters
+        ----------
+        value1 : any
+            The first value.
+        value2 : any, optional
+            The second value.
+        \"\"\"
+        self.value1 = value1
+        self.value2 = value2
+""")
+
+    # Create a conf.py for Sphinx
+    conf_path = os.path.join(temp_dir, "conf.py")
+    with open(conf_path, "w") as f:
+        f.write("""
+import os
+import sys
+sys.path.insert(0, os.path.abspath('.'))
+
+extensions = ['sphinx.ext.napoleon']
+napoleon_include_init_with_doc = True
+""")
+
+    # Create an index.rst file
+    index_path = os.path.join(temp_dir, "index.rst")
+    with open(index_path, "w") as f:
+        f.write("""
+.. toctree::
+   :maxdepth: 2
+
+Welcome to Complex Test's documentation!
+=======================================
+
+.. automodule:: complex_module
+   :members:
+""")
+
+    # Run Sphinx to generate documentation
+    os.chdir(temp_dir)
+    os.system("sphinx-quickstart -q -p ComplexTest -a 'Test Author' -v 1.0 -r 1.0 -d 1 -l en -q")
+    os.makedirs(os.path.join("_build"), exist_ok=True)
+    shutil.copy("conf.py", os.path.join("_build", "conf.py"))
+
+    # Build the documentation
+    os.system("sphinx-build -b html . _build/html")
+
+    # Check if all __init__ methods appear in the generated documentation
+    html_path = os.path.join(temp_dir, "_build", "html", "index.html")
+    if os.path.exists(html_path):
+        with open(html_path, "r") as f:
+            content = f.read()
+
+            # Check for BaseClass.__init__
+            if "initialize the base class with a value" in content.lower():
+                print("SUCCESS: BaseClass.__init__ appears in documentation")
+            else:
+                print("FAILURE: BaseClass.__init__ does not appear in documentation")
+
+            # Check for DerivedClass.__init__
+            if "initialize the derived class with a value and extra" in content.lower():
+                print("SUCCESS: DerivedClass.__init__ appears in documentation")
+            else:
+                print("FAILURE: DerivedClass.__init__ does not appear in documentation")
+
+            # Check for MultipleDecoratorsClass.__init__
+            if "initialize with multiple values" in content.lower():
+                print("SUCCESS: MultipleDecoratorsClass.__init__ appears in documentation")
+            else:
+                print("FAILURE: MultipleDecoratorsClass.__init__ does not appear in documentation")
+    else:
+        print(f"FAILURE: HTML file not found at {html_path}")
+
+finally:
+    # Clean up
+    shutil.rmtree(temp_dir)
\ No newline at end of file
diff --git a/test_decorated_init.py b/test_decorated_init.py
new file mode 100644
index 000000000..2312b92cc
--- /dev/null
+++ b/test_decorated_init.py
@@ -0,0 +1,103 @@
+import functools
+import os
+import sys
+import tempfile
+import shutil
+from pathlib import Path
+
+# Create a temporary directory for our test
+temp_dir = tempfile.mkdtemp()
+try:
+    # Create a simple module with a class that has a decorated __init__ method
+    module_path = os.path.join(temp_dir, "test_module.py")
+    with open(module_path, "w") as f:
+        f.write("""
+import functools
+
+def my_decorator(func):
+    \"\"\"A simple decorator that uses functools.wraps.\"\"\"
+    @functools.wraps(func)
+    def wrapper(*args, **kwargs):
+        return func(*args, **kwargs)
+    return wrapper
+
+class MyClass:
+    \"\"\"A test class with a decorated __init__ method.\"\"\"
+
+    @my_decorator
+    def __init__(self, value):
+        \"\"\"Initialize the class with a value.
+
+        Parameters
+        ----------
+        value : any
+            The value to initialize with.
+        \"\"\"
+        self.value = value
+
+    def regular_method(self):
+        \"\"\"A regular method.\"\"\"
+        return self.value
+""")
+
+    # Create a conf.py for Sphinx
+    conf_path = os.path.join(temp_dir, "conf.py")
+    with open(conf_path, "w") as f:
+        f.write("""
+import os
+import sys
+sys.path.insert(0, os.path.abspath('.'))
+
+extensions = ['sphinx.ext.napoleon']
+napoleon_include_init_with_doc = True
+""")
+
+    # Create an index.rst file
+    index_path = os.path.join(temp_dir, "index.rst")
+    with open(index_path, "w") as f:
+        f.write("""
+.. toctree::
+   :maxdepth: 2
+
+Welcome to Test's documentation!
+================================
+
+.. automodule:: test_module
+   :members:
+""")
+
+    # Run Sphinx to generate documentation
+    os.chdir(temp_dir)
+    os.system("sphinx-quickstart -q -p Test -a 'Test Author' -v 1.0 -r 1.0 -d 1 -l en -q")
+    os.makedirs(os.path.join("_build"), exist_ok=True)
+    shutil.copy("conf.py", os.path.join("_build", "conf.py"))
+
+    # Build the documentation
+    os.system("sphinx-build -b html . _build/html")
+
+    # Check if the __init__ method appears in the generated documentation
+    # First, let's see what files were generated
+    os.system(f"find {os.path.join(temp_dir, '_build', 'html')} -type f -name '*.html' | sort")
+
+    # Let's check the main index.html file
+    html_path = os.path.join(temp_dir, "_build", "html", "index.html")
+    if os.path.exists(html_path):
+        with open(html_path, "r") as f:
+            content = f.read()
+            print("Checking for __init__ method documentation...")
+            if "initialize the class with a value" in content.lower():
+                print("SUCCESS: Decorated __init__ method appears in documentation")
+            else:
+                print("FAILURE: Decorated __init__ method does not appear in documentation")
+
+            # Let's also check if the method is listed in the documentation
+            if "__init__" in content:
+                print("The __init__ method name is present in the documentation")
+            else:
+                print("WARNING: The __init__ method name is not present in the documentation")
+    else:
+        print(f"FAILURE: HTML file not found at {html_path}")
+
+finally:
+    # Clean up
+    shutil.rmtree(temp_dir)
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index ccfd60f84..c5ac3713f 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ extras =
 setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
 commands=
-    pytest --durations 25 {posargs}
+    pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
