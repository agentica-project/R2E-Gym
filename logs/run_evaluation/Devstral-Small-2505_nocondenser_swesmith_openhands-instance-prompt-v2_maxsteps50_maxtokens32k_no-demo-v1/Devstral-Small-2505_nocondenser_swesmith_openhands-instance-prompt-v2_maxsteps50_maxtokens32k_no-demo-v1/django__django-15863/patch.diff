diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..d6e5d4ed3c
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,72 @@
+from decimal import Decimal
+from django import setup
+from django.conf import settings
+from django.template import Template, Context
+
+# Configure Django settings
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+    },
+]
+settings.configure(TEMPLATES=TEMPLATES)
+setup()
+
+def test_case(value, precision, expected=None):
+    """Run a test case for the floatformat filter."""
+    if expected is None:
+        # If no expected value is provided, use the original value with the specified precision
+        if isinstance(value, Decimal):
+            expected = f"{value:.{precision}f}"
+        else:
+            expected = f"{float(value):.{precision}f}".rstrip('0').rstrip('.')
+
+    t = Template(f'{{{{ value|floatformat:{precision} }}}}')
+    c = Context({'value': value})
+    result = t.render(c).strip()
+
+    print(f"Value: {value!r}, Precision: {precision}")
+    print(f"Result: {result}")
+    print(f"Expected: {expected}")
+
+    if result == expected:
+        print("✅ Test passed")
+    else:
+        print(f"❌ Test failed: Expected '{expected}', got '{result}'")
+    print()
+
+# Test cases
+print("=== Testing with Decimal values ===")
+test_case(Decimal('42.12345678901234567890'), 20)
+test_case(Decimal('42.12345678901234567890'), 5)
+test_case(Decimal('42.0'), 5)
+test_case(Decimal('0.12345678901234567890'), 20)
+test_case(Decimal('0.0'), 5)
+
+print("=== Testing with float values ===")
+test_case(42.12345678901234567890, 20)
+test_case(42.12345678901234567890, 5)
+test_case(42.0, 5)
+test_case(0.12345678901234567890, 20)
+test_case(0.0, 5)
+
+print("=== Testing with integer values ===")
+test_case(42, 0)
+test_case(42, 5)
+test_case(0, 5)
+
+print("=== Testing with string values ===")
+test_case("42.12345678901234567890", 20)
+test_case("42.0", 5)
+
+print("=== Testing with negative values ===")
+test_case(Decimal('-42.12345678901234567890'), 20)
+test_case(-42.12345678901234567890, 20)
+
+print("=== Testing with very small values ===")
+test_case(Decimal('0.00000000000000000001'), 20)
+test_case(0.00000000000000000001, 20)
+
+print("=== Testing with very large values ===")
+test_case(Decimal('10000000000000000000000.12345678901234567890'), 20)
+test_case(10000000000000000000000.12345678901234567890, 20)
\ No newline at end of file
diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 7a5b28d159..c7c879c766 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -151,8 +151,12 @@ def floatformat(text, arg=-1):
             use_l10n = False
             arg = arg[:-1] or -1
     try:
-        input_val = repr(text)
-        d = Decimal(input_val)
+        # If text is already a Decimal, use it directly to preserve precision
+        if isinstance(text, Decimal):
+            d = text
+        else:
+            input_val = repr(text)
+            d = Decimal(input_val)
     except InvalidOperation:
         try:
             d = Decimal(str(float(text)))
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..e76198ee1b
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,31 @@
+from decimal import Decimal
+from django import setup
+from django.conf import settings
+from django.template import Template, Context
+
+# Configure Django settings
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+    },
+]
+settings.configure(TEMPLATES=TEMPLATES)
+setup()
+
+# Create a template with the floatformat filter
+t = Template('{{ value|floatformat:20 }}')
+
+# Create a context with a Decimal value
+c = Context({'value': Decimal('42.12345678901234567890')})
+
+# Render the template and print the result
+result = t.render(c)
+print(f"Original Decimal: {Decimal('42.12345678901234567890')}")
+print(f"Formatted result: {result}")
+
+# Check if the precision is maintained
+expected = '42.12345678901234567890'
+if result.strip() == expected:
+    print("✅ Test passed: Precision is maintained")
+else:
+    print(f"❌ Test failed: Expected '{expected}', got '{result.strip()}'")
\ No newline at end of file
