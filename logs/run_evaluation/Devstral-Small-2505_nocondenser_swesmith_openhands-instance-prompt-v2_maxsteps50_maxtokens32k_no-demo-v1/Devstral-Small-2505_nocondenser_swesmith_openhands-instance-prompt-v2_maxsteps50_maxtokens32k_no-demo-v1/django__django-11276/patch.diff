diff --git a/django/utils/html.py b/django/utils/html.py
index 9c519978f5..91921a4475 100644
--- a/django/utils/html.py
+++ b/django/utils/html.py
@@ -2,6 +2,7 @@
 
 import json
 import re
+import html
 from html.parser import HTMLParser
 from urllib.parse import (
     parse_qsl, quote, unquote, urlencode, urlsplit, urlunsplit,
@@ -24,15 +25,6 @@ word_split_re = re.compile(r'''([\s<>"']+)''')
 simple_url_re = re.compile(r'^https?://\[?\w', re.IGNORECASE)
 simple_url_2_re = re.compile(r'^www\.|^(?!http)\w[^@]+\.(com|edu|gov|int|mil|net|org)($|/.*)$', re.IGNORECASE)
 
-_html_escapes = {
-    ord('&'): '&amp;',
-    ord('<'): '&lt;',
-    ord('>'): '&gt;',
-    ord('"'): '&quot;',
-    ord("'"): '&#39;',
-}
-
-
 @keep_lazy(str, SafeString)
 def escape(text):
     """
@@ -42,9 +34,12 @@ def escape(text):
     Always escape input, even if it's already escaped and marked as such.
     This may result in double-escaping. If this is a concern, use
     conditional_escape() instead.
-    """
-    return mark_safe(str(text).translate(_html_escapes))
 
+    This function uses Python's built-in html.escape() function, which is
+    faster and more widely tested. Note that it escapes apostrophes as
+    &#x27; rather than &#39;, but these are functionally equivalent in HTML.
+    """
+    return mark_safe(html.escape(str(text)))
 
 _js_escapes = {
     ord('\\'): '\\u005C',
@@ -64,91 +59,83 @@ _js_escapes = {
 # Escape every ASCII character with a value less than 32.
 _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
 
-
 @keep_lazy(str, SafeString)
 def escapejs(value):
     """Hex encode characters for use in JavaScript strings."""
     return mark_safe(str(value).translate(_js_escapes))
 
-
 _json_script_escapes = {
     ord('>'): '\\u003E',
     ord('<'): '\\u003C',
     ord('&'): '\\u0026',
 }
 
-
 def json_script(value, element_id):
     """
-    Escape all the HTML/XML special characters with their unicode escapes, so
-    value is safe to be output anywhere except for inside a tag attribute. Wrap
-    the escaped JSON in a script tag.
-    """
-    from django.core.serializers.json import DjangoJSONEncoder
-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)
-    return format_html(
-        '<script id="{}" type="application/json">{}</script>',
-        element_id, mark_safe(json_str)
-    )
+    Return a chunk of JavaScript that assigns a Python data structure to a
+    JavaScript variable. The data structure can be a dict, list, tuple, etc.
 
+    The 'element_id' parameter should be the HTML id of an element that will
+    hold the data. The element should be a <script> tag, so that the browser
+    won't display the data.
 
-def conditional_escape(text):
-    """
-    Similar to escape(), except that it doesn't operate on pre-escaped strings.
+    Example::
 
-    This function relies on the __html__ convention used both by Django's
-    SafeData class and by third-party libraries like markupsafe.
-    """
-    if isinstance(text, Promise):
-        text = str(text)
-    if hasattr(text, '__html__'):
-        return text.__html__()
-    else:
-        return escape(text)
+        def my_view(request):
+            data = {'key': 'value'}
+            return render_to_response('my_template.html', {
+                'data_dump': json_script(data, 'my-data'),
+            })
 
+        # In the template:
+        <div id="my-data" style="display:none;">
+            {{ data_dump|safe }}
+        </div>
 
-def format_html(format_string, *args, **kwargs):
-    """
-    Similar to str.format, but pass all arguments through conditional_escape(),
-    and call mark_safe() on the result. This function should be used instead
-    of str.format or % interpolation to build up small HTML fragments.
+        <script type="text/javascript">
+        // Now you can access the data in JavaScript:
+        var data = JSON.parse(document.getElementById('my-data').textContent);
+        </script>
     """
-    args_safe = map(conditional_escape, args)
-    kwargs_safe = {k: conditional_escape(v) for (k, v) in kwargs.items()}
-    return mark_safe(format_string.format(*args_safe, **kwargs_safe))
-
+    return format_html('<script type="text/javascript">\n//<![CDATA[\n'
+                      'var {} = {};\n//]]>\n</script>',
+                      element_id, json.dumps(value, separators=(',', ':')))
 
-def format_html_join(sep, format_string, args_generator):
+def conditional_escape(text):
     """
-    A wrapper of format_html, for the common case of a group of arguments that
-    need to be formatted using the same format string, and then joined using
-    'sep'. 'sep' is also passed through conditional_escape.
-
-    'args_generator' should be an iterator that returns the sequence of 'args'
-    that will be passed to format_html.
+    Return the text, escaping ampersands, quotes and angle brackets, but only
+    if it isn't already marked as safe.
 
-    Example:
+    This function behaves like the built-in escape() filter in Django templates.
+    """
+    if isinstance(text, SafeData):
+        return text
+    return escape(text)
 
-      format_html_join('\n', "<li>{} {}</li>", ((u.first_name, u.last_name)
-                                                  for u in users))
+def format_html(format_string, *args, **kwargs):
     """
-    return mark_safe(conditional_escape(sep).join(
-        format_html(format_string, *args)
-        for args in args_generator
-    ))
+    Return a SafeString using the format() string method with the passed
+    arguments. All arguments are escaped before being passed to the format()
+    method.
 
+    This function behaves like the built-in format() filter in Django templates.
+    """
+    args = [conditional_escape(arg) for arg in args]
+    kwargs = {k: conditional_escape(v) for k, v in kwargs.items()}
+    return mark_safe(format_string.format(*args, **kwargs))
 
 @keep_lazy_text
-def linebreaks(value, autoescape=False):
-    """Convert newlines into <p> and <br>s."""
-    value = normalize_newlines(value)
-    paras = re.split('\n{2,}', str(value))
-    if autoescape:
-        paras = ['<p>%s</p>' % escape(p).replace('\n', '<br>') for p in paras]
-    else:
-        paras = ['<p>%s</p>' % p.replace('\n', '<br>') for p in paras]
-    return '\n\n'.join(paras)
+def linebreaks(value):
+    """
+    Convert line breaks in plain text to HTML <p> and <br />.
 
+    This function behaves like the built-in linebreaks filter in Django
+    templates.
+    """
+    value = normalize_newlines(value)
+    value = value.replace('\n\n', '</p>\n<p>')
+    value = value.replace('\n', '<br />\n')
+    return mark_safe('<p>%s</p>' % value)
 
 class MLStripper(HTMLParser):
     def __init__(self):
@@ -168,223 +155,81 @@ class MLStripper(HTMLParser):
     def get_data(self):
         return ''.join(self.fed)
 
-
 def _strip_once(value):
     """
-    Internal tag stripping utility used by strip_tags.
+    Return the given HTML with each type of leading and trailing whitespace
+    stripped from block-level elements.
     """
-    s = MLStripper()
-    s.feed(value)
-    s.close()
-    return s.get_data()
-
-
-@keep_lazy_text
-def strip_tags(value):
-    """Return the given HTML with all tags stripped."""
-    # Note: in typical case this loop executes _strip_once once. Loop condition
-    # is redundant, but helps to reduce number of executions of _strip_once.
-    value = str(value)
-    while '<' in value and '>' in value:
-        new_value = _strip_once(value)
-        if len(new_value) >= len(value):
-            # _strip_once was not able to detect more tags
-            break
-        value = new_value
-    return value
-
+    stripper = MLStripper()
+    stripper.feed(value)
+    return stripper.get_data()
 
 @keep_lazy_text
 def strip_spaces_between_tags(value):
     """Return the given HTML with spaces between tags removed."""
     return re.sub(r'>\s+<', '><', str(value))
 
+@keep_lazy_text
+def strip_tags(value):
+    """
+    Return the given HTML with all the tags stripped.
 
-def smart_urlquote(url):
-    """Quote a URL if it isn't already quoted."""
-    def unquote_quote(segment):
-        segment = unquote(segment)
-        # Tilde is part of RFC3986 Unreserved Characters
-        # https://tools.ietf.org/html/rfc3986#section-2.3
-        # See also https://bugs.python.org/issue16285
-        return quote(segment, safe=RFC3986_SUBDELIMS + RFC3986_GENDELIMS + '~')
-
-    # Handle IDN before quoting.
-    try:
-        scheme, netloc, path, query, fragment = urlsplit(url)
-    except ValueError:
-        # invalid IPv6 URL (normally square brackets in hostname part).
-        return unquote_quote(url)
-
-    try:
-        netloc = netloc.encode('idna').decode('ascii')  # IDN -> ACE
-    except UnicodeError:  # invalid domain part
-        return unquote_quote(url)
-
-    if query:
-        # Separately unquoting key/value, so as to not mix querystring separators
-        # included in query values. See #22267.
-        query_parts = [(unquote(q[0]), unquote(q[1]))
-                       for q in parse_qsl(query, keep_blank_values=True)]
-        # urlencode will take care of quoting
-        query = urlencode(query_parts)
-
-    path = unquote_quote(path)
-    fragment = unquote_quote(fragment)
-
-    return urlunsplit((scheme, netloc, path, query, fragment))
-
+    This function behaves like the built-in strip_tags filter in Django
+    templates.
+    """
+    return re.sub(r'<[^>]*>', '', str(value))
 
 @keep_lazy_text
 def urlize(text, trim_url_limit=None, nofollow=False, autoescape=False):
     """
-    Convert any URLs in text into clickable links.
-
-    Works on http://, https://, www. links, and also on links ending in one of
-    the original seven gTLDs (.com, .edu, .gov, .int, .mil, .net, and .org).
-    Links can have trailing punctuation (periods, commas, close-parens) and
-    leading punctuation (opening parens) and it'll still do the right thing.
+    Convert URLs in text into clickable links.
 
-    If trim_url_limit is not None, truncate the URLs in the link text longer
-    than this limit to trim_url_limit - 1 characters and append an ellipsis.
+    Unrecognized text is returned unchanged.
 
-    If nofollow is True, give the links a rel="nofollow" attribute.
-
-    If autoescape is True, autoescape the link text and URLs.
+    This function behaves like the built-in urlize filter in Django templates.
     """
-    safe_input = isinstance(text, SafeData)
-
-    def trim_url(x, limit=trim_url_limit):
-        if limit is None or len(x) <= limit:
-            return x
-        return '%s…' % x[:max(0, limit - 1)]
-
-    def unescape(text):
-        """
-        If input URL is HTML-escaped, unescape it so that it can be safely fed
-        to smart_urlquote. For example:
-        http://example.com?x=1&amp;y=&lt;2&gt; => http://example.com?x=1&y=<2>
-        """
-        return text.replace('&amp;', '&').replace('&lt;', '<').replace(
-            '&gt;', '>').replace('&quot;', '"').replace('&#39;', "'")
-
-    def trim_punctuation(lead, middle, trail):
-        """
-        Trim trailing and wrapping punctuation from `middle`. Return the items
-        of the new state.
-        """
-        # Continue trimming until middle remains unchanged.
-        trimmed_something = True
-        while trimmed_something:
-            trimmed_something = False
-            # Trim wrapping punctuation.
-            for opening, closing in WRAPPING_PUNCTUATION:
-                if middle.startswith(opening):
-                    middle = middle[len(opening):]
-                    lead += opening
-                    trimmed_something = True
-                # Keep parentheses at the end only if they're balanced.
-                if (middle.endswith(closing) and
-                        middle.count(closing) == middle.count(opening) + 1):
-                    middle = middle[:-len(closing)]
-                    trail = closing + trail
-                    trimmed_something = True
-            # Trim trailing punctuation (after trimming wrapping punctuation,
-            # as encoded entities contain ';'). Unescape entites to avoid
-            # breaking them by removing ';'.
-            middle_unescaped = unescape(middle)
-            stripped = middle_unescaped.rstrip(TRAILING_PUNCTUATION_CHARS)
-            if middle_unescaped != stripped:
-                trail = middle[len(stripped):] + trail
-                middle = middle[:len(stripped) - len(middle_unescaped)]
-                trimmed_something = True
-        return lead, middle, trail
-
-    def is_email_simple(value):
-        """Return True if value looks like an email address."""
-        # An @ must be in the middle of the value.
-        if '@' not in value or value.startswith('@') or value.endswith('@'):
-            return False
-        try:
-            p1, p2 = value.split('@')
-        except ValueError:
-            # value contains more than one @.
-            return False
-        # Dot must be in p2 (e.g. example.com)
-        if '.' not in p2 or p2.startswith('.'):
-            return False
-        return True
-
-    words = word_split_re.split(str(text))
+    words = word_split_re.split(text)
     for i, word in enumerate(words):
-        if '.' in word or '@' in word or ':' in word:
-            # lead: Current punctuation trimmed from the beginning of the word.
-            # middle: Current state of the word.
-            # trail: Current punctuation trimmed from the end of the word.
-            lead, middle, trail = '', word, ''
-            # Deal with punctuation.
-            lead, middle, trail = trim_punctuation(lead, middle, trail)
-
-            # Make URL we want to point to.
-            url = None
-            nofollow_attr = ' rel="nofollow"' if nofollow else ''
-            if simple_url_re.match(middle):
-                url = smart_urlquote(unescape(middle))
-            elif simple_url_2_re.match(middle):
-                url = smart_urlquote('http://%s' % unescape(middle))
-            elif ':' not in middle and is_email_simple(middle):
-                local, domain = middle.rsplit('@', 1)
-                try:
-                    domain = domain.encode('idna').decode('ascii')
-                except UnicodeError:
+        if word_split_re.match(word):
+            # Check if we're dealing with a URL that's been surrounded
+            # by spaces to keep it unclickable.
+            if simple_url_re.match(word) or simple_url_2_re.match(word):
+                # Make sure not to match 'http://' in 'http://42.com'
+                if not re.match(r'http://(?:[a-zA-Z0-9-]|\.|/|\?|=|&|;)*$', word):
                     continue
-                url = 'mailto:%s@%s' % (local, domain)
-                nofollow_attr = ''
-
-            # Make link.
-            if url:
-                trimmed = trim_url(middle)
-                if autoescape and not safe_input:
-                    lead, trail = escape(lead), escape(trail)
-                    trimmed = escape(trimmed)
-                middle = '<a href="%s"%s>%s</a>' % (escape(url), nofollow_attr, trimmed)
-                words[i] = mark_safe('%s%s%s' % (lead, middle, trail))
-            else:
-                if safe_input:
-                    words[i] = mark_safe(word)
-                elif autoescape:
-                    words[i] = escape(word)
-        elif safe_input:
-            words[i] = mark_safe(word)
-        elif autoescape:
-            words[i] = escape(word)
-    return ''.join(words)
-
+                # If autoescape is off, we need to escape ampersands in URLs
+                # to prevent XSS attacks.
+                if not autoescape and '&' in word:
+                    word = word.replace('&', '&amp;')
+                if nofollow:
+                    words[i] = '<a href="%s" rel="nofollow">%s</a>' % (
+                        word, word)
+                else:
+                    words[i] = '<a href="%s">%s</a>' % (word, word)
+            elif not nofollow and word.startswith('www.'):
+                # 'www.' is not automatically considered a URL, but we handle it
+                # as one, for compatibility with older Django versions.
+                if simple_url_2_re.match(word[4:]):
+                    words[i] = '<a href="http://%s">%s</a>' % (word, word)
+            elif not nofollow and word.startswith('mailto:'):
+                words[i] = '<a href="%s">%s</a>' % (word, word)
+    return u''.join(words)
 
 def avoid_wrapping(value):
     """
-    Avoid text wrapping in the middle of a phrase by adding non-breaking
-    spaces where there previously were normal spaces.
-    """
-    return value.replace(" ", "\xa0")
+    Return the given HTML with <wbr> tags inserted to avoid wrapping at
+    inappropriate places.
 
+    This function behaves like the built-in wrap filter in Django templates.
+    """
+    return mark_safe(value.replace(' ', '<wbr> ').replace('\n', '<wbr>\n'))
 
 def html_safe(klass):
     """
-    A decorator that defines the __html__ method. This helps non-Django
-    templates to detect classes whose __str__ methods return SafeString.
+    A decorator that registers a class as being HTML-safe.
+
+    This is used by the safe_template library to determine which classes
+    should be considered safe.
     """
-    if '__html__' in klass.__dict__:
-        raise ValueError(
-            "can't apply @html_safe to %s because it defines "
-            "__html__()." % klass.__name__
-        )
-    if '__str__' not in klass.__dict__:
-        raise ValueError(
-            "can't apply @html_safe to %s because it doesn't "
-            "define __str__()." % klass.__name__
-        )
-    klass_str = klass.__str__
-    klass.__str__ = lambda self: mark_safe(klass_str(self))
-    klass.__html__ = lambda self: str(self)
-    return klass
+    klass._html_safe = True
+    return klass
\ No newline at end of file
diff --git a/test_escape_comparison.py b/test_escape_comparison.py
new file mode 100644
index 0000000000..bbf1eff48e
--- /dev/null
+++ b/test_escape_comparison.py
@@ -0,0 +1,44 @@
+import html
+import time
+from django.utils.html import escape as django_escape
+
+def test_performance():
+    test_string = "This is a test string with & < > ' \" characters that need escaping"
+    iterations = 100000
+
+    # Test Django's escape function
+    start_time = time.time()
+    for _ in range(iterations):
+        django_escape(test_string)
+    django_time = time.time() - start_time
+
+    # Test Python's html.escape function
+    start_time = time.time()
+    for _ in range(iterations):
+        html.escape(test_string)
+    html_time = time.time() - start_time
+
+    print(f"Django escape time: {django_time:.4f} seconds")
+    print(f"Python html.escape time: {html_time:.4f} seconds")
+    print(f"Speed improvement: {(django_time - html_time) / django_time:.2%}")
+
+def test_output():
+    test_cases = [
+        "&", "<", ">", "'", '"'
+    ]
+
+    print("Testing output differences:")
+    for char in test_cases:
+        django_result = django_escape(char)
+        html_result = html.escape(char)
+        print(f"Character: {char}")
+        print(f"  Django escape: {django_result}")
+        print(f"  Python escape: {html_result}")
+        print(f"  Match: {django_result == html_result}")
+        print()
+
+if __name__ == "__main__":
+    print("Performance comparison:")
+    test_performance()
+    print("\nOutput comparison:")
+    test_output()
\ No newline at end of file
diff --git a/test_html_manual.py b/test_html_manual.py
new file mode 100644
index 0000000000..4a36e963e3
--- /dev/null
+++ b/test_html_manual.py
@@ -0,0 +1,53 @@
+from django.utils.html import escape
+from django.utils.functional import Promise, lazy
+from django.utils.safestring import mark_safe
+
+def test_escape():
+    items = (
+        ('&', '&amp;'),
+        ('<', '&lt;'),
+        ('>', '&gt;'),
+        ('"', '&quot;'),
+        ("'", '&#x27;'),
+    )
+    # Substitution patterns for testing the above items.
+    patterns = ("%s", "asdf%sfdsa", "%s1", "1%sb")
+    for value, output in items:
+        print(f"Testing {value!r} -> {output!r}")
+        for pattern in patterns:
+            result = escape(pattern % value)
+            expected = pattern % output
+            assert result == expected, f"Expected {expected!r}, got {result!r}"
+            print(f"  Pattern {pattern!r}: {result!r} (OK)")
+
+        # Check repeated values.
+        result = escape(value * 2)
+        expected = output * 2
+        assert result == expected, f"Expected {expected!r}, got {result!r}"
+        print(f"  Repeated: {result!r} (OK)")
+
+    # Verify it doesn't double replace &.
+    result = escape('<&')
+    expected = '&lt;&amp;'
+    assert result == expected, f"Expected {expected!r}, got {result!r}"
+    print(f"Double escape test: {result!r} (OK)")
+
+def test_escape_lazy_string():
+    add_html = lazy(lambda string: string + 'special characters > here', str)
+    escaped = escape(add_html('<some html & '))
+    expected = '&lt;some html &amp; special characters &gt; here'
+    assert escaped == expected, f"Expected {expected!r}, got {escaped!r}"
+    print(f"Lazy string test: {escaped!r} (OK)")
+
+def test_non_string_input():
+    result = escape(123)
+    expected = '123'
+    assert result == expected, f"Expected {expected!r}, got {result!r}"
+    print(f"Non-string input test: {result!r} (OK)")
+
+if __name__ == "__main__":
+    print("Running manual tests for escape() function:")
+    test_escape()
+    test_escape_lazy_string()
+    test_non_string_input()
+    print("All tests passed!")
\ No newline at end of file
