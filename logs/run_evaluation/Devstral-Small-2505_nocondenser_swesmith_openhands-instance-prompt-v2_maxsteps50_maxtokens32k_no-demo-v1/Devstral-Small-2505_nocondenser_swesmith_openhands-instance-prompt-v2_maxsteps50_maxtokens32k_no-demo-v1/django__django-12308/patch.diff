diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py
index e4ddc8f017..06d077dffb 100644
--- a/django/contrib/admin/utils.py
+++ b/django/contrib/admin/utils.py
@@ -398,6 +398,10 @@ def display_for_field(value, field, empty_value_display):
         return formats.number_format(value)
     elif isinstance(field, models.FileField) and value:
         return format_html('<a href="{}">{}</a>', value.url, value)
+    elif hasattr(field, 'form_class') and field.form_class.__name__ == 'JSONField':
+        # Use the JSONField's prepare_value method to format the value correctly
+        form_field = field.formfield()
+        return form_field.prepare_value(value)
     else:
         return display_for_value(value, empty_value_display)
 
diff --git a/reproduce_jsonfield_issue.py b/reproduce_jsonfield_issue.py
new file mode 100644
index 0000000000..2b88ee4aa3
--- /dev/null
+++ b/reproduce_jsonfield_issue.py
@@ -0,0 +1,68 @@
+import json
+from django.db import models
+from django.contrib.admin.utils import display_for_field, display_for_value
+from django.forms.fields import JSONField, InvalidJSONInput
+
+# Create a sample JSON value
+json_value = {"foo": "bar"}
+
+# Create an invalid JSON input
+invalid_json = InvalidJSONInput("invalid json")
+
+# Create a more realistic mock JSONField that mimics the real one
+class MockJSONField(models.Field):
+    def __init__(self, *args, **kwargs):
+        super().__init__(*args, **kwargs)
+        self.form_class = JSONField
+
+    def formfield(self, **kwargs):
+        defaults = {}
+        defaults.update(kwargs)
+        return self.form_class(**defaults)
+
+# Create a mock field
+field = MockJSONField()
+
+# Display the value using the implementation
+print("Current display_for_field output:")
+current_output = display_for_field(json_value, field, "")
+print(repr(current_output))
+
+# Display the value using the JSONField's prepare_value method
+print("\nJSONField prepare_value output:")
+form_field = field.formfield()
+expected_output = form_field.prepare_value(json_value)
+print(repr(expected_output))
+
+# Show the difference
+print("\nDifference:")
+print(f"Current: {current_output}")
+print(f"Expected: {expected_output}")
+
+# Check if the outputs are the same
+print(f"Are they equal? {current_output == expected_output}")
+
+# Check if the outputs are valid JSON
+try:
+    json.loads(current_output)
+    print("Current output is valid JSON")
+except:
+    print("Current output is NOT valid JSON")
+
+try:
+    json.loads(expected_output)
+    print("Expected output is valid JSON")
+except:
+    print("Expected output is NOT valid JSON")
+
+print("\n--- Testing with invalid JSON input ---")
+# Display the invalid JSON value using the implementation
+current_output = display_for_field(invalid_json, field, "")
+print(f"Current: {repr(current_output)}")
+
+# Display the invalid JSON value using the JSONField's prepare_value method
+expected_output = form_field.prepare_value(invalid_json)
+print(f"Expected: {repr(expected_output)}")
+
+# Check if the outputs are the same
+print(f"Are they equal? {current_output == expected_output}")
\ No newline at end of file
