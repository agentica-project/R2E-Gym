diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py
index 92fe4affb9..095bfeb53c 100644
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -277,6 +277,8 @@ class Collector:
             if self.can_fast_delete(instance):
                 with transaction.mark_for_rollback_on_error():
                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)
+                # Set the PK to None for the instance
+                setattr(instance, model._meta.pk.attname, None)
                 return count, {model._meta.label: count}
 
         with transaction.atomic(using=self.using, savepoint=False):
diff --git a/test_delete_pk.py b/test_delete_pk.py
new file mode 100644
index 0000000000..7357b965df
--- /dev/null
+++ b/test_delete_pk.py
@@ -0,0 +1,36 @@
+import os
+import sys
+import django
+from django.db import models
+
+# Set up Django
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+os.environ.setdefault('SECRET_KEY', 'fake-key-for-testing')
+django.setup()
+
+# Define a simple model with no dependencies
+class SimpleModel(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'test_app'
+
+# Test the delete method
+def test_delete_pk():
+    # Create an instance
+    instance = SimpleModel(name="Test")
+    instance.pk = 1  # Manually set PK to simulate saved instance
+
+    print(f"Before delete, PK: {instance.pk}")
+
+    # Delete the instance
+    instance.delete()
+
+    print(f"After delete, PK: {instance.pk}")
+
+    # Check if PK is None
+    assert instance.pk is None, f"PK should be None after delete, but got {instance.pk}"
+    print("Test passed! PK is correctly set to None after delete.")
+
+if __name__ == "__main__":
+    test_delete_pk()
\ No newline at end of file
diff --git a/test_delete_pk_simple.py b/test_delete_pk_simple.py
new file mode 100644
index 0000000000..fbb8f982bf
--- /dev/null
+++ b/test_delete_pk_simple.py
@@ -0,0 +1,65 @@
+import sys
+import os
+sys.path.insert(0, '/testbed')
+
+from django.db.models.deletion import Collector
+from django.db import models
+
+# Create a mock model class
+class MockModel:
+    _meta = type('Meta', (), {'label': 'test_app.simplemodel', 'pk': type('PK', (), {'attname': 'pk'})})
+
+    def __init__(self, pk=1):
+        self.pk = pk
+        self._state = type('State', (), {'using': None})
+
+# Create a mock Collector class that mimics the behavior of the real one
+class MockCollector(Collector):
+    def __init__(self):
+        super().__init__(using=None)
+        self.data = {}
+
+    def can_fast_delete(self, instance):
+        return True
+
+    def delete(self):
+        # This is the code we're testing - the fast delete optimization
+        model = MockModel
+        instances = [MockModel()]
+        if len(self.data) == 1 and len(instances) == 1:
+            instance = list(instances)[0]
+            if self.can_fast_delete(instance):
+                # Simulate the delete operation
+                count = 1
+                # This is the fix - set the PK to None
+                setattr(instance, model._meta.pk.attname, None)
+                return count, {model._meta.label: count}
+
+        # This code is never reached in the fast delete case
+        for model, instances in self.data.items():
+            for instance in instances:
+                setattr(instance, model._meta.pk.attname, None)
+        return 0, {}
+
+# Test the delete method
+def test_delete_pk():
+    # Create an instance
+    instance = MockModel(pk=1)
+    print(f"Before delete, PK: {instance.pk}")
+
+    # Get the model meta
+    model = MockModel
+
+    # Simulate the fix - set the PK to None
+    setattr(instance, model._meta.pk.attname, None)
+
+    print(f"After delete, PK: {instance.pk}")
+
+    # Check if PK is None
+    if instance.pk is None:
+        print("Test passed! PK is correctly set to None after delete.")
+    else:
+        print(f"Test failed! PK should be None after delete, but got {instance.pk}")
+
+if __name__ == "__main__":
+    test_delete_pk()
\ No newline at end of file
diff --git a/test_django_delete.py b/test_django_delete.py
new file mode 100644
index 0000000000..81c97148b1
--- /dev/null
+++ b/test_django_delete.py
@@ -0,0 +1,57 @@
+import os
+import sys
+import django
+from django.db import models
+from django.db.models.deletion import Collector
+from django.db import transaction
+
+# Set up Django
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+os.environ.setdefault('SECRET_KEY', 'fake-key-for-testing')
+os.environ.setdefault('INSTALLED_APPS', 'django.contrib.contenttypes')
+
+# Setup Django
+django.setup()
+
+# Create a test model
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'test_app'
+
+# Create a test for the delete method
+def test_delete_pk():
+    # Create an instance
+    instance = TestModel(name="Test")
+    instance.pk = 1  # Manually set PK to simulate saved instance
+
+    print(f"Before delete, PK: {instance.pk}")
+
+    # Create a collector
+    collector = Collector(using=None)
+    collector.data = {TestModel: [instance]}  # Add our instance to the collector
+
+    # Execute the delete method
+    with transaction.atomic(using=None, savepoint=False):
+        # This is the code we're testing - the fast delete optimization
+        model = TestModel
+        instances = [instance]
+        if len(collector.data) == 1 and len(instances) == 1:
+            instance = list(instances)[0]
+            # Simulate can_fast_delete returning True
+            if True:
+                # Simulate the delete operation
+                count = 1
+                # This is the fix - set the PK to None
+                setattr(instance, model._meta.pk.attname, None)
+                print(f"After delete, PK: {instance.pk}")
+
+                # Check if PK is None
+                if instance.pk is None:
+                    print("Test passed! PK is correctly set to None after delete.")
+                else:
+                    print(f"Test failed! PK should be None after delete, but got {instance.pk}")
+
+if __name__ == "__main__":
+    test_delete_pk()
\ No newline at end of file
