diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..89c860c596
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,22 @@
+from sympy import Symbol, Rational, pi, asin, ConditionSet, Contains, Interval, imageset, Lambda, S, Eq
+
+# Create the variables
+x, y, z, n = Symbol('x'), Symbol('y'), Symbol('z'), Symbol('n')
+
+# Test case 1: ConditionSet with FiniteSet
+print("Test case 1: ConditionSet with FiniteSet")
+solveset = ConditionSet(x, Eq(x**2, y), Interval(-1, 1))
+print("Original:", solveset)
+print("After subs(y, Rational(1,3)):", solveset.subs(y, Rational(1,3)))
+
+# Test case 2: ConditionSet with ImageSet
+print("\nTest case 2: ConditionSet with ImageSet")
+imgset = imageset(Lambda(n, 2*n*pi + asin(y)), S.Integers)
+print("Original ImageSet:", imgset)
+print("After subs(y, Rational(1,3)):", imgset.subs(y, Rational(1,3)))
+
+condset_with_imgset = ConditionSet(x, Contains(y, Interval(-1,1)), imgset)
+print("Original ConditionSet with ImageSet:", condset_with_imgset)
+print("After subs(y, Rational(1,3)):", condset_with_imgset.subs(y, Rational(1,3)))
+print("After xreplace({y: Rational(1,3)}):", condset_with_imgset.xreplace({y: Rational(1,3)}))
+print("After subs({y: Rational(1,3)}, simultaneous=True):", condset_with_imgset.subs({y: Rational(1,3)}, simultaneous=True))
\ No newline at end of file
diff --git a/sympy/sets/conditionset.py b/sympy/sets/conditionset.py
index 118eda6f77..2ec8699cf9 100644
--- a/sympy/sets/conditionset.py
+++ b/sympy/sets/conditionset.py
@@ -206,6 +206,8 @@ def as_relational(self, other):
             other), self.base_set.contains(other))
 
     def _eval_subs(self, old, new):
+        from sympy.sets.fancysets import ImageSet
+
         if not isinstance(self.sym, Expr):
             # Don't do anything with the equation set syntax;
             # that should go away, eventually.
@@ -244,6 +246,12 @@ def _eval_subs(self, old, new):
         base = self.base_set.subs(old, new)
         if cond is S.true:
             return ConditionSet(new, Contains(new, base), base)
+        # If the base set is an ImageSet and the substitution is not for the bound variable,
+        # we need to be careful not to replace the bound variable with the substituted value
+        if isinstance(base, ImageSet) and old != sym:
+            # Return the original ConditionSet with the substituted base set
+            # but keep the original sym and cond
+            return self.func(sym, self.condition, base)
         return self.func(self.sym, cond, base)
 
     def dummy_eq(self, other, symbol=None):
