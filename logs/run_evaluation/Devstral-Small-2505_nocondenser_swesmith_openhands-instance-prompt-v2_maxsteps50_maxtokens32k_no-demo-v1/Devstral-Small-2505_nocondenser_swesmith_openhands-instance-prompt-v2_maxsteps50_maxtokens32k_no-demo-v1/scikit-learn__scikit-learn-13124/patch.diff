diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 000000000..455fce43c
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,64 @@
+import numpy as np
+from sklearn.model_selection import StratifiedKFold
+
+def test_stratified_kfold_shuffle():
+    """Test that StratifiedKFold with shuffle=True produces different splits with different random seeds."""
+    # Create a dataset with two classes
+    samples_per_class = 10
+    X = np.linspace(0, samples_per_class*2-1, samples_per_class * 2)
+    y = np.concatenate((np.ones(samples_per_class), np.zeros(samples_per_class)), axis=0)
+
+    # Test with shuffle=False
+    k_fold_no_shuffle = StratifiedKFold(n_splits=5, shuffle=False, random_state=1)
+    splits_no_shuffle = list(k_fold_no_shuffle.split(X, y))
+
+    # Test with shuffle=True and different random seeds
+    k_fold_shuffle1 = StratifiedKFold(n_splits=5, shuffle=True, random_state=1)
+    splits_shuffle1 = list(k_fold_shuffle1.split(X, y))
+
+    k_fold_shuffle2 = StratifiedKFold(n_splits=5, shuffle=True, random_state=2)
+    splits_shuffle2 = list(k_fold_shuffle2.split(X, y))
+
+    # Test with same random seed should produce same splits
+    k_fold_shuffle1_again = StratifiedKFold(n_splits=5, shuffle=True, random_state=1)
+    splits_shuffle1_again = list(k_fold_shuffle1_again.split(X, y))
+
+    # Check that different random seeds produce different splits
+    different_splits = False
+    for i in range(5):
+        if not np.array_equal(splits_shuffle1[i], splits_shuffle2[i]):
+            different_splits = True
+            break
+
+    # Check that same random seed produces same splits
+    same_splits = True
+    for i in range(5):
+        if not np.array_equal(splits_shuffle1[i], splits_shuffle1_again[i]):
+            same_splits = False
+            break
+
+    print("Test results:")
+    print(f"Different random seeds produce different splits: {different_splits}")
+    print(f"Same random seed produces same splits: {same_splits}")
+
+    # Print some examples of the splits
+    print("\nExample splits with shuffle=False:")
+    for i, (train_idx, test_idx) in enumerate(splits_no_shuffle[:2]):
+        print(f"Fold {i}:")
+        print(f"  Test indices: {sorted(test_idx)}")
+
+    print("\nExample splits with shuffle=True, random_state=1:")
+    for i, (train_idx, test_idx) in enumerate(splits_shuffle1[:2]):
+        print(f"Fold {i}:")
+        print(f"  Test indices: {sorted(test_idx)}")
+
+    print("\nExample splits with shuffle=True, random_state=2:")
+    for i, (train_idx, test_idx) in enumerate(splits_shuffle2[:2]):
+        print(f"Fold {i}:")
+        print(f"  Test indices: {sorted(test_idx)}")
+
+    return different_splits and same_splits
+
+if __name__ == "__main__":
+    result = test_stratified_kfold_shuffle()
+    print(f"\nTest passed: {result}")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..3344c2030
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,40 @@
+import numpy as np
+from sklearn.model_selection import StratifiedKFold
+
+RANDOM_SEED = 1
+
+samples_per_class = 10
+X = np.linspace(0, samples_per_class*2-1, samples_per_class * 2)
+y = np.concatenate((np.ones(samples_per_class), np.zeros(samples_per_class)), axis=0)
+
+print("X:", X)
+print("y:", y)
+print()
+
+print('shuffle = False\n')
+
+k_fold = StratifiedKFold(n_splits=10, shuffle=False, random_state=RANDOM_SEED)
+for fold_n, (train_idx, test_idx) in enumerate(k_fold.split(X, y)):
+    print(f"Fold {fold_n}:")
+    print("Train indices:", train_idx)
+    print("Test indices:", test_idx)
+    print()
+
+print('\nshuffle = True, Random seed =', RANDOM_SEED, '\n')
+
+k_fold = StratifiedKFold(n_splits=10, shuffle=True, random_state=RANDOM_SEED)
+for fold_n, (train_idx, test_idx) in enumerate(k_fold.split(X, y)):
+    print(f"Fold {fold_n}:")
+    print("Train indices:", train_idx)
+    print("Test indices:", test_idx)
+    print()
+
+RANDOM_SEED += 1
+print('\nshuffle = True, Random seed =', RANDOM_SEED, '\n')
+
+k_fold = StratifiedKFold(n_splits=10, shuffle=True, random_state=RANDOM_SEED)
+for fold_n, (train_idx, test_idx) in enumerate(k_fold.split(X, y)):
+    print(f"Fold {fold_n}:")
+    print("Train indices:", train_idx)
+    print("Test indices:", test_idx)
+    print()
\ No newline at end of file
diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py
index 24394f869..c2f156791 100644
--- a/sklearn/model_selection/_split.py
+++ b/sklearn/model_selection/_split.py
@@ -620,7 +620,7 @@ class StratifiedKFold(_BaseKFold):
         super().__init__(n_splits, shuffle, random_state)
 
     def _make_test_folds(self, X, y=None):
-        rng = self.random_state
+        rng = check_random_state(self.random_state)
         y = np.asarray(y)
         type_of_target_y = type_of_target(y)
         allowed_target_types = ('binary', 'multiclass')
@@ -645,29 +645,37 @@ class StratifiedKFold(_BaseKFold):
                            " be less than n_splits=%d."
                            % (min_groups, self.n_splits)), Warning)
 
-        # pre-assign each sample to a test fold index using individual KFold
-        # splitting strategies for each class so as to respect the balance of
-        # classes
-        # NOTE: Passing the data corresponding to ith class say X[y==class_i]
-        # will break when the data is not 100% stratifiable for all classes.
-        # So we pass np.zeroes(max(c, n_splits)) as data to the KFold
+        # Create a list to store the indices for each class
+        class_indices = []
+        class_sizes = []
+
+        # Get indices for each class
+        for cls in unique_y:
+            indices = np.where(y == cls)[0]
+            class_indices.append(indices)
+            class_sizes.append(len(indices))
+
+        # If shuffle is True, shuffle the indices for each class
+        if self.shuffle:
+            for i, indices in enumerate(class_indices):
+                rng.shuffle(indices)
+
+        # Create KFold instances for each class
         per_cls_cvs = [
-            KFold(self.n_splits, shuffle=self.shuffle,
+            KFold(self.n_splits, shuffle=False,  # Shuffling is done above
                   random_state=rng).split(np.zeros(max(count, self.n_splits)))
             for count in y_counts]
 
         test_folds = np.zeros(n_samples, dtype=np.int)
         for test_fold_indices, per_cls_splits in enumerate(zip(*per_cls_cvs)):
-            for cls, (_, test_split) in zip(unique_y, per_cls_splits):
-                cls_test_folds = test_folds[y == cls]
-                # the test split can be too big because we used
-                # KFold(...).split(X[:max(c, n_splits)]) when data is not 100%
-                # stratifiable for all the classes
-                # (we use a warning instead of raising an exception)
-                # If this is the case, let's trim it:
-                test_split = test_split[test_split < len(cls_test_folds)]
-                cls_test_folds[test_split] = test_fold_indices
-                test_folds[y == cls] = cls_test_folds
+            for cls_idx, (_, test_split) in enumerate(per_cls_splits):
+                cls = unique_y[cls_idx]
+                cls_indices = class_indices[cls_idx]
+
+                # Map test_split indices to the original indices
+                test_indices = cls_indices[test_split]
+
+                test_folds[test_indices] = test_fold_indices
 
         return test_folds
 
