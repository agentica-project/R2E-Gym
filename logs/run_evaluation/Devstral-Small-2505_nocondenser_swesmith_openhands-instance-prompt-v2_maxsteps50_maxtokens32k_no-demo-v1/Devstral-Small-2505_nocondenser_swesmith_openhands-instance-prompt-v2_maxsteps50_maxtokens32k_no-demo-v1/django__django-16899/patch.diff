diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py
index c395b0bde2..bbd0f9d76f 100644
--- a/django/contrib/admin/checks.py
+++ b/django/contrib/admin/checks.py
@@ -771,10 +771,11 @@ class BaseModelAdminChecks:
             except FieldDoesNotExist:
                 return [
                     checks.Error(
-                        "The value of '%s' is not a callable, an attribute of "
+                        "The value of '%s' refers to '%s', which is not a callable, an attribute of "
                         "'%s', or an attribute of '%s'."
                         % (
                             label,
+                            field_name,
                             obj.__class__.__name__,
                             obj.model._meta.label,
                         ),
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..e69c7617be
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,33 @@
+import sys
+import os
+import django
+from django.db import models
+from django.contrib import admin
+from django.contrib.admin.checks import ModelAdminChecks
+
+# Set up Django
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+django.setup()
+
+# Define a simple model for testing
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'test_app'
+        verbose_name = "Test Model"
+
+# Create a ModelAdmin with an invalid readonly_fields value
+class TestAdmin(admin.ModelAdmin):
+    model = TestModel
+    readonly_fields = ["nonexistent_field"]
+
+# Run the check and print the error message
+def run_check():
+    admin_checker = ModelAdminChecks()
+    errors = admin_checker._check_readonly_fields(TestAdmin)
+    for error in errors:
+        print(f"Error: {error}")
+
+if __name__ == "__main__":
+    run_check()
\ No newline at end of file
diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py
index 4d171ed737..e26d0aedd0 100644
--- a/tests/admin_checks/tests.py
+++ b/tests/admin_checks/tests.py
@@ -798,7 +798,7 @@ class SystemChecksTestCase(SimpleTestCase):
         errors = SongAdmin(Song, AdminSite()).check()
         expected = [
             checks.Error(
-                "The value of 'readonly_fields[1]' is not a callable, an attribute "
+                "The value of 'readonly_fields[1]' refers to 'nonexistent', which is not a callable, an attribute "
                 "of 'SongAdmin', or an attribute of 'admin_checks.Song'.",
                 obj=SongAdmin,
                 id="admin.E035",
@@ -814,7 +814,7 @@ class SystemChecksTestCase(SimpleTestCase):
         errors = CityInline(State, AdminSite()).check()
         expected = [
             checks.Error(
-                "The value of 'readonly_fields[0]' is not a callable, an attribute "
+                "The value of 'readonly_fields[0]' refers to 'i_dont_exist', which is not a callable, an attribute "
                 "of 'CityInline', or an attribute of 'admin_checks.City'.",
                 obj=CityInline,
                 id="admin.E035",
diff --git a/verify_fix.py b/verify_fix.py
new file mode 100644
index 0000000000..5035437f17
--- /dev/null
+++ b/verify_fix.py
@@ -0,0 +1,51 @@
+import sys
+import os
+import django
+from django.db import models
+from django.contrib import admin
+from django.contrib.admin.checks import ModelAdminChecks
+from django.core import checks
+
+# Set up Django
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+django.setup()
+
+# Create a simple model for testing
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'test_app'
+        verbose_name = "Test Model"
+
+# Create a ModelAdmin with an invalid readonly_fields value
+class TestAdmin(admin.ModelAdmin):
+    model = TestModel
+    readonly_fields = ["nonexistent_field"]
+
+# Create a mock object for testing
+class MockObj:
+    def __init__(self):
+        self.model = TestModel
+        self.__class__ = type('TestAdmin', (), {})
+
+# Test the error message
+def test_error_message():
+    admin_checker = ModelAdminChecks()
+
+    # Test the specific method that generates the error message
+    mock_obj = MockObj()
+    errors = admin_checker._check_readonly_fields_item(mock_obj, "nonexistent_field", "readonly_fields[0]")
+
+    # Print the error message
+    for error in errors:
+        print(f"Error message: {error}")
+
+    # Verify the field name is included in the error message
+    error_message = str(errors[0])
+    assert "nonexistent_field" in error_message, "Field name not included in error message"
+    assert "readonly_fields[0]" in error_message, "Label not included in error message"
+    print("Test passed! The field name is included in the error message.")
+
+if __name__ == "__main__":
+    test_error_message()
\ No newline at end of file
