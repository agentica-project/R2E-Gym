diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..f1a32cdf
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,46 @@
+#!/usr/bin/env python
+# Script to verify the fix for binary string methods
+
+import sys
+import requests
+from requests.sessions import Session
+from requests.compat import builtin_str
+
+def test_binary_method():
+    """Test using a binary string as the HTTP method."""
+    # Create a session
+    session = Session()
+
+    # Try to use a binary string as the method
+    method = b'GET'
+
+    # Print the original method
+    print(f"Original method: {method}, type: {type(method)}")
+
+    # Try to make a request with the binary method
+    try:
+        response = session.request(method, 'https://httpbin.org/get')
+        print(f"Response status: {response.status_code}")
+        print(f"Response text: {response.text}")
+    except Exception as e:
+        print(f"Error: {e}")
+
+    # Let's try with a string method for comparison
+    try:
+        string_method = 'GET'
+        response = session.request(string_method, 'https://httpbin.org/get')
+        print(f"Response with string method status: {response.status_code}")
+        print(f"Response text: {response.text}")
+    except Exception as e:
+        print(f"Error with string method: {e}")
+
+    # Test with other HTTP methods
+    for test_method in [b'POST', b'PUT', b'DELETE', b'HEAD', b'OPTIONS', b'PATCH']:
+        try:
+            response = session.request(test_method, 'https://httpbin.org/get')
+            print(f"Response with {test_method} method status: {response.status_code}")
+        except Exception as e:
+            print(f"Error with {test_method} method: {e}")
+
+if __name__ == "__main__":
+    test_binary_method()
\ No newline at end of file
diff --git a/requests/sessions.py b/requests/sessions.py
index d701ff2e..be05d8ae 100644
--- a/requests/sessions.py
+++ b/requests/sessions.py
@@ -205,7 +205,7 @@ class SessionRedirectMixin(object):
 
         if 'Authorization' in headers:
             # If we get redirected to a new host, we should strip out any
-            # authentication headers.
+            #Â authentication headers.
             original_parsed = urlparse(response.request.url)
             redirect_parsed = urlparse(url)
 
@@ -425,7 +425,11 @@ class Session(SessionRedirectMixin):
             If Tuple, ('cert', 'key') pair.
         """
 
-        method = builtin_str(method)
+        # Handle binary strings properly
+        if isinstance(method, bytes):
+            method = method.decode('ascii')
+        else:
+            method = builtin_str(method)
 
         # Create the Request.
         req = Request(
diff --git a/verify_fix.py b/verify_fix.py
new file mode 100644
index 00000000..bef7d3f9
--- /dev/null
+++ b/verify_fix.py
@@ -0,0 +1,38 @@
+#!/usr/bin/env python
+# Script to verify the fix for binary string methods
+
+import sys
+import requests
+from requests.sessions import Session
+
+def test_binary_methods():
+    """Test various binary string HTTP methods."""
+    session = Session()
+
+    # Test all common HTTP methods as binary strings
+    binary_methods = [
+        b'GET', b'POST', b'PUT', b'DELETE', b'HEAD',
+        b'OPTIONS', b'PATCH', b'TRACE', b'CONNECT'
+    ]
+
+    print("Testing binary string HTTP methods:")
+    print("-" * 40)
+
+    for method in binary_methods:
+        try:
+            # Use a URL that accepts all HTTP methods
+            response = session.request(method, 'https://httpbin.org/get')
+
+            # Check if the response indicates the method was accepted
+            if response.status_code == 200:
+                print(f"✓ {method} - Success (status: {response.status_code})")
+            else:
+                print(f"! {method} - Unexpected status: {response.status_code}")
+        except Exception as e:
+            print(f"✗ {method} - Error: {e}")
+
+    print("-" * 40)
+    print("Test completed.")
+
+if __name__ == "__main__":
+    test_binary_methods()
\ No newline at end of file
