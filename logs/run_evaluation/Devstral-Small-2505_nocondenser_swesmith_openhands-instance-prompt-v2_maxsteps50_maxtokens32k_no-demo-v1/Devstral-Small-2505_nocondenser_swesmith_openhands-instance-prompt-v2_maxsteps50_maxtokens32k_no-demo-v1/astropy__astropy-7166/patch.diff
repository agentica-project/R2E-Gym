diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py
index de3fb01d18..cceaeb957f 100644
--- a/astropy/utils/misc.py
+++ b/astropy/utils/misc.py
@@ -528,7 +528,7 @@ class InheritDocstrings(type):
                 not key.startswith('_'))
 
         for key, val in dct.items():
-            if (inspect.isfunction(val) and
+            if ((inspect.isfunction(val) or isinstance(val, property)) and
                 is_public_member(key) and
                 val.__doc__ is None):
                 for base in cls.__mro__[1:]:
diff --git a/inspect_property.py b/inspect_property.py
new file mode 100644
index 0000000000..6e087949b7
--- /dev/null
+++ b/inspect_property.py
@@ -0,0 +1,37 @@
+#!/usr/bin/env python
+# Script to inspect properties and how they're detected
+
+import inspect
+
+class TestClass:
+    @property
+    def prop(self):
+        """Property docstring."""
+        return "property value"
+
+    def method(self):
+        """Method docstring."""
+        return "method value"
+
+# Get the property and method objects
+prop = TestClass.prop
+method = TestClass.method
+
+# Check various inspect functions
+print("Property inspection:")
+print("inspect.isfunction(prop):", inspect.isfunction(prop))
+print("inspect.ismethod(prop):", inspect.ismethod(prop))
+print("inspect.ismethoddescriptor(prop):", inspect.ismethoddescriptor(prop))
+print("inspect.isdatadescriptor(prop):", inspect.isdatadescriptor(prop))
+print("inspect.isgetsetdescriptor(prop):", inspect.isgetsetdescriptor(prop))
+print("inspect.ismemberdescriptor(prop):", inspect.ismemberdescriptor(prop))
+print("type(prop):", type(prop))
+print("hasattr(prop, '__get__'):", hasattr(prop, '__get__'))
+print("isinstance(prop, property):", isinstance(prop, property))
+print()
+
+print("Method inspection:")
+print("inspect.isfunction(method):", inspect.isfunction(method))
+print("inspect.ismethod(method):", inspect.ismethod(method))
+print("inspect.ismethoddescriptor(method):", inspect.ismethoddescriptor(method))
+print("type(method):", type(method))
\ No newline at end of file
diff --git a/reproduce_property_docstring_issue.py b/reproduce_property_docstring_issue.py
new file mode 100644
index 0000000000..d48763d595
--- /dev/null
+++ b/reproduce_property_docstring_issue.py
@@ -0,0 +1,33 @@
+#!/usr/bin/env python
+# Script to reproduce the issue with InheritDocstrings not working for properties
+
+from astropy.utils.misc import InheritDocstrings
+
+class Base(metaclass=InheritDocstrings):
+    @property
+    def prop(self):
+        """This is a property docstring in the base class."""
+        return "base value"
+
+class Derived(Base):
+    @property
+    def prop(self):
+        return "derived value"
+
+# Check if the docstring is inherited
+print("Base.prop.__doc__:", Base.prop.__doc__)
+print("Derived.prop.__doc__:", Derived.prop.__doc__)
+
+# For comparison, let's also test with a method
+class BaseMethod(metaclass=InheritDocstrings):
+    def method(self):
+        """This is a method docstring in the base class."""
+        return "base value"
+
+class DerivedMethod(BaseMethod):
+    def method(self):
+        return "derived value"
+
+# Check if the docstring is inherited for methods
+print("\nBaseMethod.method.__doc__:", BaseMethod.method.__doc__)
+print("DerivedMethod.method.__doc__:", DerivedMethod.method.__doc__)
\ No newline at end of file
diff --git a/test_property_inherit_docstrings.py b/test_property_inherit_docstrings.py
new file mode 100644
index 0000000000..ef520a9fba
--- /dev/null
+++ b/test_property_inherit_docstrings.py
@@ -0,0 +1,40 @@
+#!/usr/bin/env python
+# Test for property docstring inheritance with InheritDocstrings metaclass
+
+import pytest
+from astropy.utils.misc import InheritDocstrings
+
+def test_property_docstring_inheritance():
+    """Test that property docstrings are inherited correctly."""
+    class Base(metaclass=InheritDocstrings):
+        @property
+        def prop(self):
+            """This is a property docstring in the base class."""
+            return "base value"
+
+    class Derived(Base):
+        @property
+        def prop(self):
+            return "derived value"
+
+    # Check if the docstring is inherited
+    assert Base.prop.__doc__ == "This is a property docstring in the base class."
+    assert Derived.prop.__doc__ == "This is a property docstring in the base class."
+
+    # Test with a method for comparison
+    class BaseMethod(metaclass=InheritDocstrings):
+        def method(self):
+            """This is a method docstring in the base class."""
+            return "base value"
+
+    class DerivedMethod(BaseMethod):
+        def method(self):
+            return "derived value"
+
+    # Check if the docstring is inherited for methods
+    assert BaseMethod.method.__doc__ == "This is a method docstring in the base class."
+    assert DerivedMethod.method.__doc__ == "This is a method docstring in the base class."
+
+if __name__ == "__main__":
+    test_property_docstring_inheritance()
+    print("All tests passed!")
\ No newline at end of file
