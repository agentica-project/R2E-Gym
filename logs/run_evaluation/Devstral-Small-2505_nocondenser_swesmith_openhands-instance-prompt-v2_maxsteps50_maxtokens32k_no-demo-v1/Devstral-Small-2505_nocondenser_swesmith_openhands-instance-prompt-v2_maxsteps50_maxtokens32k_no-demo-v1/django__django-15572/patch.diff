diff --git a/django/template/autoreload.py b/django/template/autoreload.py
index 84c8554165..917d4e5340 100644
--- a/django/template/autoreload.py
+++ b/django/template/autoreload.py
@@ -17,7 +17,10 @@ def get_template_directories():
         if not isinstance(backend, DjangoTemplates):
             continue
 
-        items.update(cwd / to_path(dir) for dir in backend.engine.dirs)
+        # Filter out empty strings from backend.engine.dirs
+        for dir in backend.engine.dirs:
+            if dir:  # Skip empty strings
+                items.add(cwd / to_path(dir))
 
         for loader in backend.engine.template_loaders:
             if not hasattr(loader, "get_dirs"):
@@ -25,7 +28,7 @@ def get_template_directories():
             items.update(
                 cwd / to_path(directory)
                 for directory in loader.get_dirs()
-                if not is_django_path(directory)
+                if not is_django_path(directory) and directory  # Skip empty strings
             )
     return items
 
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..c41f133b76
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,22 @@
+import os
+import sys
+from pathlib import Path
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, '/testbed')
+
+# Let's directly test the behavior of Path with empty string
+print("Testing Path behavior with empty string...")
+print(f"Path('') resolves to: {Path('')}")
+print(f"Path.cwd() / '' resolves to: {Path.cwd() / ''}")
+print(f"Path('/') == Path('')? {Path('/') == Path('')}")
+
+# Now let's look at the code in django/template/autoreload.py
+print("\nExamining the issue in django/template/autoreload.py:")
+with open('/testbed/django/template/autoreload.py', 'r') as f:
+    content = f.read()
+    print(content)
+
+print("\nThe issue occurs because when an empty string is in TEMPLATES['DIRS'],")
+print("Path.cwd() / '' normalizes to the current working directory, which causes")
+print("template_changed() to always return True, preventing proper autoreload.")
\ No newline at end of file
diff --git a/subdir/test_file.txt b/subdir/test_file.txt
new file mode 100644
index 0000000000..3f3f005b29
--- /dev/null
+++ b/subdir/test_file.txt
@@ -0,0 +1 @@
+Test content
\ No newline at end of file
diff --git a/test_cwd_file.txt b/test_cwd_file.txt
new file mode 100644
index 0000000000..3f3f005b29
--- /dev/null
+++ b/test_cwd_file.txt
@@ -0,0 +1 @@
+Test content
\ No newline at end of file
diff --git a/test_empty_dir.py b/test_empty_dir.py
new file mode 100644
index 0000000000..1f1162d071
--- /dev/null
+++ b/test_empty_dir.py
@@ -0,0 +1,43 @@
+import os
+import sys
+from pathlib import Path
+import tempfile
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, '/testbed')
+
+# Test the behavior of Path with empty string
+print("Testing Path behavior with empty string...")
+print(f"Path('') resolves to: {Path('')}")
+print(f"Path.cwd() / '' resolves to: {Path.cwd() / ''}")
+print(f"Path('/') == Path('')? {Path('/') == Path('')}")
+
+# Create a temporary file outside the current directory
+temp_dir = tempfile.mkdtemp(prefix="django_test_")
+temp_file = Path(temp_dir) / "test_file.txt"
+temp_file.write_text("Test content")
+
+# Simulate the behavior in template_changed function
+cwd = Path.cwd()
+template_dir = cwd / ''  # This is what happens when DIRS contains an empty string
+
+print(f"\nSimulating template_changed with empty string in DIRS:")
+print(f"Current working directory: {cwd}")
+print(f"Template directory: {template_dir}")
+print(f"Temp file path: {temp_file}")
+
+# Check if the temp file is considered to be in the template directory
+print(f"Template directory parents: {list(template_dir.parents)}")
+print(f"Temp file parents: {list(temp_file.parents)}")
+
+# The issue is that when checking if template_dir is in file_path.parents,
+# it's checking if template_dir is a parent of file_path, not the other way around
+print(f"Is {template_dir} in {temp_file.parents}? {template_dir in temp_file.parents}")
+
+# Let's also check the reverse (which is what the code is actually doing)
+print(f"Is {temp_file} in {template_dir.parents}? {temp_file in template_dir.parents}")
+
+print("\nThe issue is that when an empty string is in TEMPLATES['DIRS'],")
+print("Path.cwd() / '' normalizes to the current working directory,")
+print("which means any file path will have this directory as a parent,")
+print("causing template_changed() to always return True.")
\ No newline at end of file
diff --git a/test_template_changed.py b/test_template_changed.py
new file mode 100644
index 0000000000..623f80d0cd
--- /dev/null
+++ b/test_template_changed.py
@@ -0,0 +1,50 @@
+import os
+import sys
+from pathlib import Path
+import tempfile
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, '/testbed')
+
+# Create a temporary file outside the current directory
+temp_dir = tempfile.mkdtemp(prefix="django_test_")
+temp_file = Path(temp_dir) / "test_file.txt"
+temp_file.write_text("Test content")
+
+# Simulate the template_changed function with an empty string in DIRS
+def simulate_template_changed(file_path):
+    cwd = Path.cwd()
+    template_dirs = [cwd / '']  # This is what happens when DIRS contains an empty string
+
+    print(f"Simulating template_changed with file_path: {file_path}")
+    print(f"Template directories: {template_dirs}")
+
+    # This is the key check in the template_changed function
+    for template_dir in template_dirs:
+        if template_dir in file_path.parents:
+            print(f"Found match: {template_dir} is in {file_path.parents}")
+            return True
+
+    print("No match found")
+    return False
+
+print("Testing template_changed with empty string in DIRS:")
+print(f"Current working directory: {Path.cwd()}")
+print(f"Temp file path: {temp_file}")
+
+# Test with the temp file
+result = simulate_template_changed(temp_file)
+print(f"Result: {result}")
+
+# Test with a file in the current directory
+cwd_file = Path.cwd() / "test_cwd_file.txt"
+with open(cwd_file, "w") as f:
+    f.write("Test content")
+
+result = simulate_template_changed(cwd_file)
+print(f"Result with file in CWD: {result}")
+
+print("\nThe issue is that when an empty string is in TEMPLATES['DIRS'],")
+print("Path.cwd() / '' normalizes to the current working directory,")
+print("which means any file path will have this directory as a parent,")
+print("causing template_changed() to always return True.")
\ No newline at end of file
diff --git a/test_template_changed_2.py b/test_template_changed_2.py
new file mode 100644
index 0000000000..4b8587c12c
--- /dev/null
+++ b/test_template_changed_2.py
@@ -0,0 +1,58 @@
+import os
+import sys
+from pathlib import Path
+import tempfile
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, '/testbed')
+
+# Create a temporary file outside the current directory
+temp_dir = tempfile.mkdtemp(prefix="django_test_")
+temp_file = Path(temp_dir) / "test_file.txt"
+temp_file.write_text("Test content")
+
+# Create a subdirectory in the current directory
+subdir = Path.cwd() / "subdir"
+subdir.mkdir(exist_ok=True)
+subdir_file = subdir / "test_file.txt"
+with open(subdir_file, "w") as f:
+    f.write("Test content")
+
+# Simulate the template_changed function with an empty string in DIRS
+def simulate_template_changed(file_path):
+    cwd = Path.cwd()
+    template_dirs = [cwd / '']  # This is what happens when DIRS contains an empty string
+
+    print(f"Simulating template_changed with file_path: {file_path}")
+    print(f"Template directories: {template_dirs}")
+    print(f"File path parents: {list(file_path.parents)}")
+
+    # This is the key check in the template_changed function
+    for template_dir in template_dirs:
+        print(f"Checking if {template_dir} is in {file_path.parents}")
+        if template_dir in file_path.parents:
+            print(f"Found match: {template_dir} is in {file_path.parents}")
+            return True
+
+    print("No match found")
+    return False
+
+print("Testing template_changed with empty string in DIRS:")
+print(f"Current working directory: {Path.cwd()}")
+
+# Test with files in different locations
+test_files = [
+    temp_file,  # Outside CWD
+    subdir_file,  # In subdirectory of CWD
+    Path.cwd() / "test_cwd_file.txt"  # Directly in CWD
+]
+
+for file_path in test_files:
+    print("\n" + "-" * 50)
+    result = simulate_template_changed(file_path)
+    print(f"Result for {file_path}: {result}")
+
+print("\nThe issue is that when an empty string is in TEMPLATES['DIRS'],")
+print("Path.cwd() / '' normalizes to the current working directory,")
+print("which means any file path within the current directory will have this directory as a parent,")
+print("causing template_changed() to always return True for files in the current directory.")
\ No newline at end of file
diff --git a/verify_fix.py b/verify_fix.py
new file mode 100644
index 0000000000..56a9c3b97a
--- /dev/null
+++ b/verify_fix.py
@@ -0,0 +1,54 @@
+import os
+import sys
+from pathlib import Path
+import tempfile
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, '/testbed')
+
+from django.template.autoreload import get_template_directories
+
+# Mock the engines.all() function to return a list with a backend that has an empty DIRS
+class MockBackend:
+    def __init__(self):
+        self.engine = MockEngine()
+
+class MockEngine:
+    def __init__(self):
+        self.dirs = ['', '/valid/path']  # This includes an empty string
+
+    def __iter__(self):
+        return iter([])
+
+class MockLoader:
+    def get_dirs(self):
+        return ['', '/another/valid/path']  # This also includes an empty string
+
+    def __iter__(self):
+        return iter([])
+
+# Mock the template_loaders attribute
+MockEngine.template_loaders = [MockLoader()]
+
+# Mock the engines.all() function
+import django.template.engines
+from django.template.backends.django import DjangoTemplates
+original_all = django.template.engines.all
+django.template.engines.all = lambda: [MockBackend()]
+
+# Test the fixed get_template_directories function
+print("Testing fixed get_template_directories with empty string in DIRS...")
+directories = get_template_directories()
+print(f"Template directories: {directories}")
+
+# Check if any empty strings or root directories are in the result
+cwd = Path.cwd()
+if cwd in directories:
+    print("ISSUE NOT FIXED: The current working directory is still in the template directories")
+elif Path('/') in directories:
+    print("ISSUE NOT FIXED: The root directory is still in the template directories")
+else:
+    print("FIX VERIFIED: No empty strings or root directories in the template directories")
+
+# Restore the original function
+django.template.engines.all = original_all
\ No newline at end of file
diff --git a/verify_fix_django.py b/verify_fix_django.py
new file mode 100644
index 0000000000..23d8330c67
--- /dev/null
+++ b/verify_fix_django.py
@@ -0,0 +1,63 @@
+import os
+import sys
+from pathlib import Path
+import tempfile
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, '/testbed')
+
+from django.conf import settings
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    INSTALLED_APPS=[
+        'django.template',
+    ],
+    TEMPLATES=[
+        {
+            'BACKEND': 'django.template.backends.django.DjangoTemplates',
+            'DIRS': ['', '/valid/path'],  # Include an empty string
+            'APP_DIRS': True,
+        }
+    ]
+)
+
+# Import the autoreload module after settings are configured
+from django.template import autoreload
+
+# Create a temporary file to test with
+temp_dir = tempfile.mkdtemp(prefix="django_test_")
+temp_file = Path(temp_dir) / "test_file.txt"
+temp_file.write_text("Test content")
+
+# Create a file in the current directory
+cwd_file = Path.cwd() / "test_cwd_file.txt"
+with open(cwd_file, "w") as f:
+    f.write("Test content")
+
+# Test the get_template_directories function
+print("Testing get_template_directories with empty string in DIRS...")
+directories = autoreload.get_template_directories()
+print(f"Template directories: {directories}")
+
+# Check if any empty strings or root directories are in the result
+cwd = Path.cwd()
+if cwd in directories:
+    print("ISSUE NOT FIXED: The current working directory is still in the template directories")
+elif Path('/') in directories:
+    print("ISSUE NOT FIXED: The root directory is still in the template directories")
+else:
+    print("FIX VERIFIED: No empty strings or root directories in the template directories")
+
+# Test the template_changed function
+print("\nTesting template_changed function...")
+print(f"Testing with file outside CWD: {temp_file}")
+result = autoreload.template_changed(None, temp_file)
+print(f"Result: {result}")
+
+print(f"\nTesting with file in CWD: {cwd_file}")
+result = autoreload.template_changed(None, cwd_file)
+print(f"Result: {result}")
+
+print("\nThe fix has been verified successfully!")
\ No newline at end of file
diff --git a/verify_fix_simple.py b/verify_fix_simple.py
new file mode 100644
index 0000000000..7740093601
--- /dev/null
+++ b/verify_fix_simple.py
@@ -0,0 +1,111 @@
+import os
+import sys
+from pathlib import Path
+import tempfile
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, '/testbed')
+
+# Let's directly test the behavior of our fix
+print("Testing the fix for empty strings in template directories...")
+
+# Create a mock function that simulates the fixed get_template_directories
+def mock_get_template_directories():
+    cwd = Path.cwd()
+    items = set()
+
+    # Simulate template directories with empty strings
+    template_dirs = ['', '/valid/path']
+
+    # Apply the fix: filter out empty strings
+    for dir in template_dirs:
+        if dir:  # Skip empty strings
+            items.add(cwd / Path(dir))
+
+    return items
+
+# Test the mock function
+directories = mock_get_template_directories()
+print(f"Template directories after fix: {directories}")
+
+# Check if any empty strings or root directories are in the result
+cwd = Path.cwd()
+if cwd in directories:
+    print("ISSUE NOT FIXED: The current working directory is still in the template directories")
+elif Path('/') in directories:
+    print("ISSUE NOT FIXED: The root directory is still in the template directories")
+else:
+    print("FIX VERIFIED: No empty strings or root directories in the template directories")
+
+# Now let's test the actual function
+from django.template.autoreload import get_template_directories
+
+# Create a mock class to simulate the behavior
+class MockPath:
+    def __init__(self, path):
+        self.path = path
+
+    def __truediv__(self, other):
+        if isinstance(other, str) and other == '':
+            return Path.cwd()  # Simulate Path.cwd() / ''
+        return Path(self.path + '/' + other)
+
+    def __fspath__(self, obj):
+        return str(obj)
+
+# Replace Path.cwd() with our mock
+import builtins
+original_cwd = Path.cwd
+Path.cwd = lambda: MockPath('/mock/cwd')
+
+# Replace to_path with a mock that just returns the path
+import django.utils._os
+original_to_path = django.utils._os.to_path
+django.utils._os.to_path = lambda x: x
+
+# Create a mock engines.all() function
+class MockBackend:
+    def __init__(self):
+        self.engine = MockEngine()
+
+class MockEngine:
+    def __init__(self):
+        self.dirs = ['', '/valid/path']
+
+class MockLoader:
+    def get_dirs(self):
+        return ['', '/another/valid/path']
+
+# Mock the template_loaders attribute
+MockEngine.template_loaders = [MockLoader()]
+
+# Mock the is_django_path function
+import django.utils.autoreload
+original_is_django_path = django.utils.autoreload.is_django_path
+django.utils.autoreload.is_django_path = lambda x: False
+
+# Mock the engines.all() function
+import django.template
+django.template.engines = type('MockEngines', (), {'all': lambda: [MockBackend()]})
+django.template.backends.django = type('MockDjangoTemplates', (), {'DjangoTemplates': lambda x: True})
+
+# Test the actual function
+print("\nTesting the actual get_template_directories function...")
+try:
+    directories = get_template_directories()
+    print(f"Template directories: {directories}")
+
+    # Check if any empty strings or root directories are in the result
+    if Path('/mock/cwd') in directories:
+        print("ISSUE NOT FIXED: The current working directory is still in the template directories")
+    elif Path('/') in directories:
+        print("ISSUE NOT FIXED: The root directory is still in the template directories")
+    else:
+        print("FIX VERIFIED: No empty strings or root directories in the template directories")
+except Exception as e:
+    print(f"Error testing the actual function: {e}")
+
+# Restore the original functions
+Path.cwd = original_cwd
+django.utils._os.to_path = original_to_path
+django.utils.autoreload.is_django_path = original_is_django_path
\ No newline at end of file
