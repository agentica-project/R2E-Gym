diff --git a/asgi_test.py b/asgi_test.py
new file mode 100644
index 0000000000..3fca0b7d43
--- /dev/null
+++ b/asgi_test.py
@@ -0,0 +1,104 @@
+import os
+import sys
+import asyncio
+from pathlib import Path
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, os.path.abspath('/testbed'))
+
+from django.conf import settings
+from django.core.exceptions import MiddlewareNotUsed
+from django.http import HttpResponse
+from django.urls import path
+from django.views import View
+
+# Configure settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='dummy',
+        ROOT_URLCONF='asgi_test',
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'django.contrib.sessions',
+            'django.contrib.messages',
+            'django.contrib.staticfiles',
+        ],
+        MIDDLEWARE=[
+            'asgi_test.DummyMiddleware',
+            'django.middleware.security.SecurityMiddleware',
+            'django.contrib.sessions.middleware.SessionMiddleware',
+            'django.middleware.common.CommonMiddleware',
+            'django.middleware.csrf.CsrfViewMiddleware',
+            'django.contrib.auth.middleware.AuthenticationMiddleware',
+            'django.contrib.messages.middleware.MessageMiddleware',
+            'django.middleware.clickjacking.XFrameOptionsMiddleware',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        SESSION_ENGINE='django.contrib.sessions.backends.file',
+        SESSION_FILE_PATH=Path('/tmp/nonexistent/sessions.bin'),  # Intentionally broken
+        ASGI_APPLICATION='asgi_test.application',
+    )
+
+# Create a dummy middleware that raises MiddlewareNotUsed
+class DummyMiddleware:
+    def __init__(self, get_response):
+        raise MiddlewareNotUsed()
+
+# Define a simple view
+class SimpleView(View):
+    async def __call__(self, request):
+        return HttpResponse("Hello, world!")
+
+# Define URL patterns
+urlpatterns = [
+    path('test/', SimpleView.as_view()),
+]
+
+# Create an ASGI application
+from django.core.asgi import get_asgi_application
+
+application = get_asgi_application()
+
+# Create a simple ASGI client to test the application
+async def test_application():
+    from asgiref.testing import ApplicationCommunicator
+
+    async def receive():
+        return {}
+
+    class MockSend:
+        def __call__(self, message):
+            print(f"Received message: {message}")
+            return {}
+
+    mock_send = MockSend()
+    communicator = ApplicationCommunicator(application, receive, mock_send)
+
+    await communicator.send_input({
+        'type': 'http.request',
+        'body': b'',
+        'more_body': False,
+        'headers': [
+            [b'host', b'example.com'],
+            [b'accept', b'*/*'],
+            [b'path', b'/test/'],
+        ],
+    })
+
+    try:
+        await communicator.receive_output()
+        print("Request completed successfully")
+    except Exception as e:
+        print(f"Error: {type(e).__name__}: {e}")
+
+if __name__ == "__main__":
+    loop = asyncio.get_event_loop()
+    loop.run_until_complete(test_application())
\ No newline at end of file
diff --git a/direct_test.py b/direct_test.py
new file mode 100644
index 0000000000..fcf8aafb01
--- /dev/null
+++ b/direct_test.py
@@ -0,0 +1,87 @@
+import os
+import sys
+import asyncio
+from pathlib import Path
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, os.path.abspath('/testbed'))
+
+from django.conf import settings
+from django.core.exceptions import MiddlewareNotUsed
+from django.http import HttpResponse
+
+# Configure settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='dummy',
+        ROOT_URLCONF='django.urls',
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'django.contrib.sessions',
+            'django.contrib.messages',
+            'django.contrib.staticfiles',
+        ],
+        MIDDLEWARE=[
+            'direct_test.DummyMiddleware',
+            'django.middleware.security.SecurityMiddleware',
+            'django.contrib.sessions.middleware.SessionMiddleware',
+            'django.middleware.common.CommonMiddleware',
+            'django.middleware.csrf.CsrfViewMiddleware',
+            'django.contrib.auth.middleware.AuthenticationMiddleware',
+            'django.contrib.messages.middleware.MessageMiddleware',
+            'django.middleware.clickjacking.XFrameOptionsMiddleware',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        SESSION_ENGINE='django.contrib.sessions.backends.file',
+        SESSION_FILE_PATH=Path('/tmp/nonexistent/sessions.bin'),  # Intentionally broken
+    )
+
+# Create a dummy middleware that raises MiddlewareNotUsed
+class DummyMiddleware:
+    def __init__(self, get_response):
+        raise MiddlewareNotUsed()
+
+# Test the fix directly
+from django.core.handlers.base import BaseHandler
+import inspect
+
+def test_middleware_not_used():
+    handler = BaseHandler()
+    # Set up the middleware list with our dummy middleware
+    settings.MIDDLEWARE = [
+        'direct_test.DummyMiddleware',
+        'django.middleware.security.SecurityMiddleware',
+    ]
+
+    # Test with is_async=True to simulate ASGI
+    try:
+        handler.load_middleware(is_async=True)
+        print("Middleware loaded successfully")
+
+        # Check if the middleware chain was properly built
+        middleware_chain = handler._middleware_chain
+
+        # Verify that the middleware chain is a coroutine function (async compatible)
+        if asyncio.iscoroutinefunction(middleware_chain):
+            print("Middleware chain is properly async-compatible")
+        else:
+            print("WARNING: Middleware chain is not async-compatible")
+
+        # Print the middleware chain for debugging
+        print(f"Middleware chain type: {type(middleware_chain).__name__}")
+        if hasattr(middleware_chain, '__qualname__'):
+            print(f"Middleware chain qualname: {middleware_chain.__qualname__}")
+
+    except Exception as e:
+        print(f"Error loading middleware: {type(e).__name__}: {e}")
+
+if __name__ == "__main__":
+    test_middleware_not_used()
\ No newline at end of file
diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py
index 8e8c3da06a..f7dcac6bf3 100644
--- a/django/core/handlers/base.py
+++ b/django/core/handlers/base.py
@@ -50,6 +50,8 @@ class BaseHandler:
             else:
                 middleware_is_async = middleware_can_async
             try:
+                # Store the current handler before potentially adapting it
+                original_handler = handler
                 # Adapt handler, if needed.
                 handler = self.adapt_method_mode(
                     middleware_is_async, handler, handler_is_async,
@@ -62,6 +64,8 @@ class BaseHandler:
                         logger.debug('MiddlewareNotUsed(%r): %s', middleware_path, exc)
                     else:
                         logger.debug('MiddlewareNotUsed: %r', middleware_path)
+                # Restore the original handler to avoid "poisoning" the middleware chain
+                handler = original_handler
                 continue
 
             if mw_instance is None:
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..fe2cccaec8
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,84 @@
+import os
+import sys
+import asyncio
+from pathlib import Path
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, os.path.abspath('/testbed'))
+
+from django.conf import settings
+from django.core.asgi import get_asgi_application
+from django.core.exceptions import MiddlewareNotUsed
+from django.http import HttpResponse
+
+# Configure settings
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='dummy',
+    ROOT_URLCONF='django.urls',
+    INSTALLED_APPS=[
+        'django.contrib.admin',
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+        'django.contrib.sessions',
+        'django.contrib.messages',
+        'django.contrib.staticfiles',
+    ],
+    MIDDLEWARE=[
+        'reproduce_issue.DummyMiddleware',
+        'django.middleware.security.SecurityMiddleware',
+        'django.contrib.sessions.middleware.SessionMiddleware',
+        'django.middleware.common.CommonMiddleware',
+        'django.middleware.csrf.CsrfViewMiddleware',
+        'django.contrib.auth.middleware.AuthenticationMiddleware',
+        'django.contrib.messages.middleware.MessageMiddleware',
+        'django.middleware.clickjacking.XFrameOptionsMiddleware',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    SESSION_ENGINE='django.contrib.sessions.backends.file',
+    SESSION_FILE_PATH=Path('/tmp/nonexistent/sessions.bin'),  # Intentionally broken
+)
+
+# Create a dummy middleware that raises MiddlewareNotUsed
+class DummyMiddleware:
+    def __init__(self, get_response):
+        raise MiddlewareNotUsed()
+
+# Create a simple ASGI application
+application = get_asgi_application()
+
+# Create a simple ASGI client to test the application
+async def test_application():
+    from asgiref.testing import ApplicationCommunicator
+
+    async def receive():
+        return {}
+
+    async def send(message):
+        print(f"Received message: {message}")
+
+    communicator = ApplicationCommunicator(application, receive, send)
+
+    await communicator.send_input({
+        'type': 'http.request',
+        'body': b'',
+        'more_body': False,
+        'headers': [
+            [b'host', b'example.com'],
+            [b'accept', b'*/*'],
+        ],
+    })
+
+    try:
+        await communicator.receive_output()
+        print("Request completed successfully")
+    except Exception as e:
+        print(f"Error: {type(e).__name__}: {e}")
+
+if __name__ == "__main__":
+    asyncio.run(test_application())
\ No newline at end of file
diff --git a/reproduce_issue_full.py b/reproduce_issue_full.py
new file mode 100644
index 0000000000..3b8e9d16db
--- /dev/null
+++ b/reproduce_issue_full.py
@@ -0,0 +1,104 @@
+import os
+import sys
+import asyncio
+from pathlib import Path
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, os.path.abspath('/testbed'))
+
+from django.conf import settings
+from django.core.exceptions import MiddlewareNotUsed
+from django.http import HttpResponse
+from django.urls import path
+from django.views import View
+
+# Configure settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='dummy',
+        ROOT_URLCONF='reproduce_issue_full',
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'django.contrib.sessions',
+            'django.contrib.messages',
+            'django.contrib.staticfiles',
+        ],
+        MIDDLEWARE=[
+            'reproduce_issue_full.DummyMiddleware',
+            'django.middleware.security.SecurityMiddleware',
+            'django.contrib.sessions.middleware.SessionMiddleware',
+            'django.middleware.common.CommonMiddleware',
+            'django.middleware.csrf.CsrfViewMiddleware',
+            'django.contrib.auth.middleware.AuthenticationMiddleware',
+            'django.contrib.messages.middleware.MessageMiddleware',
+            'django.middleware.clickjacking.XFrameOptionsMiddleware',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        SESSION_ENGINE='django.contrib.sessions.backends.file',
+        SESSION_FILE_PATH=Path('/tmp/nonexistent/sessions.bin'),  # Intentionally broken
+        ASGI_APPLICATION='reproduce_issue_full.application',
+    )
+
+# Create a dummy middleware that raises MiddlewareNotUsed
+class DummyMiddleware:
+    def __init__(self, get_response):
+        raise MiddlewareNotUsed()
+
+# Define a simple view
+class SimpleView(View):
+    def get(self, request, *args, **kwargs):
+        return HttpResponse("Hello, world!")
+
+# Define URL patterns
+urlpatterns = [
+    path('test/', SimpleView.as_view()),
+]
+
+# Create an ASGI application
+from django.core.asgi import get_asgi_application
+
+application = get_asgi_application()
+
+# Create a simple ASGI client to test the application
+async def test_application():
+    from asgiref.testing import ApplicationCommunicator
+
+    async def receive():
+        return {}
+
+    class MockSend:
+        def __call__(self, message):
+            print(f"Received message: {message}")
+            return {}
+
+    mock_send = MockSend()
+    communicator = ApplicationCommunicator(application, receive, mock_send)
+
+    await communicator.send_input({
+        'type': 'http.request',
+        'body': b'',
+        'more_body': False,
+        'headers': [
+            [b'host', b'example.com'],
+            [b'accept', b'*/*'],
+            [b'path', b'/test/'],
+        ],
+    })
+
+    try:
+        await communicator.receive_output()
+        print("Request completed successfully")
+    except Exception as e:
+        print(f"Error: {type(e).__name__}: {e}")
+
+if __name__ == "__main__":
+    loop = asyncio.get_event_loop()
+    loop.run_until_complete(test_application())
\ No newline at end of file
diff --git a/reproduce_issue_simple.py b/reproduce_issue_simple.py
new file mode 100644
index 0000000000..bb44565161
--- /dev/null
+++ b/reproduce_issue_simple.py
@@ -0,0 +1,64 @@
+import os
+import sys
+import asyncio
+from pathlib import Path
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, os.path.abspath('/testbed'))
+
+from django.conf import settings
+from django.core.exceptions import MiddlewareNotUsed
+from django.http import HttpResponse
+
+# Configure settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='dummy',
+        ROOT_URLCONF='django.urls',
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'django.contrib.sessions',
+            'django.contrib.messages',
+            'django.contrib.staticfiles',
+        ],
+        MIDDLEWARE=[
+            'reproduce_issue_simple.DummyMiddleware',
+            'django.middleware.security.SecurityMiddleware',
+            'django.contrib.sessions.middleware.SessionMiddleware',
+            'django.middleware.common.CommonMiddleware',
+            'django.middleware.csrf.CsrfViewMiddleware',
+            'django.contrib.auth.middleware.AuthenticationMiddleware',
+            'django.contrib.messages.middleware.MessageMiddleware',
+            'django.middleware.clickjacking.XFrameOptionsMiddleware',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        SESSION_ENGINE='django.contrib.sessions.backends.file',
+        SESSION_FILE_PATH=Path('/tmp/nonexistent/sessions.bin'),  # Intentionally broken
+    )
+
+# Create a dummy middleware that raises MiddlewareNotUsed
+class DummyMiddleware:
+    def __init__(self, get_response):
+        raise MiddlewareNotUsed()
+
+# Create a simple ASGI application
+async def test_application():
+    from django.core.asgi import get_asgi_application
+
+    try:
+        application = get_asgi_application()
+        print("Application created successfully")
+    except Exception as e:
+        print(f"Error creating application: {type(e).__name__}: {e}")
+
+if __name__ == "__main__":
+    loop = asyncio.get_event_loop()
+    loop.run_until_complete(test_application())
\ No newline at end of file
diff --git a/test_with_client.py b/test_with_client.py
new file mode 100644
index 0000000000..1c7a996640
--- /dev/null
+++ b/test_with_client.py
@@ -0,0 +1,83 @@
+import os
+import sys
+import asyncio
+from pathlib import Path
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, os.path.abspath('/testbed'))
+
+from django.conf import settings
+from django.core.exceptions import MiddlewareNotUsed
+from django.http import HttpResponse
+from django.urls import path
+from django.views import View
+
+# Configure settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='dummy',
+        ROOT_URLCONF='test_with_client',
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'django.contrib.sessions',
+            'django.contrib.messages',
+            'django.contrib.staticfiles',
+        ],
+        MIDDLEWARE=[
+            'test_with_client.DummyMiddleware',
+            'django.middleware.security.SecurityMiddleware',
+            'django.contrib.sessions.middleware.SessionMiddleware',
+            'django.middleware.common.CommonMiddleware',
+            'django.middleware.csrf.CsrfViewMiddleware',
+            'django.contrib.auth.middleware.AuthenticationMiddleware',
+            'django.contrib.messages.middleware.MessageMiddleware',
+            'django.middleware.clickjacking.XFrameOptionsMiddleware',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        SESSION_ENGINE='django.contrib.sessions.backends.file',
+        SESSION_FILE_PATH=Path('/tmp/nonexistent/sessions.bin'),  # Intentionally broken
+    )
+
+# Create a dummy middleware that raises MiddlewareNotUsed
+class DummyMiddleware:
+    def __init__(self, get_response):
+        raise MiddlewareNotUsed()
+
+# Define a simple view
+class SimpleView(View):
+    def get(self, request, *args, **kwargs):
+        return HttpResponse("Hello, world!")
+
+# Define URL patterns
+urlpatterns = [
+    path('test/', SimpleView.as_view()),
+]
+
+# Test with Django's test client
+def test_with_client():
+    from django.test import Client, override_settings
+    from django.apps import apps
+    from django.core.management import call_command
+
+    # Setup the app registry
+    call_command('check', interactive=False)
+
+    client = Client()
+
+    try:
+        response = client.get('/test/')
+        print(f"Response status code: {response.status_code}")
+        print(f"Response content: {response.content.decode()}")
+    except Exception as e:
+        print(f"Error making request: {type(e).__name__}: {e}")
+
+if __name__ == "__main__":
+    test_with_client()
\ No newline at end of file
diff --git a/tests/middleware/test_middleware_not_used.py b/tests/middleware/test_middleware_not_used.py
new file mode 100644
index 0000000000..efd0cb7222
--- /dev/null
+++ b/tests/middleware/test_middleware_not_used.py
@@ -0,0 +1,55 @@
+import os
+import sys
+from pathlib import Path
+
+from django.conf import settings
+from django.core.exceptions import MiddlewareNotUsed
+from django.http import HttpResponse
+from django.test import SimpleTestCase, override_settings
+from django.urls import path
+from django.views import View
+
+# Create a dummy middleware that raises MiddlewareNotUsed
+class DummyMiddleware:
+    def __init__(self, get_response):
+        raise MiddlewareNotUsed()
+
+# Define a simple view
+class SimpleView(View):
+    def get(self, request, *args, **kwargs):
+        return HttpResponse("Hello, world!")
+
+# Define URL patterns
+urlpatterns = [
+    path('test/', SimpleView.as_view()),
+]
+
+@override_settings(
+    ROOT_URLCONF='tests.middleware.test_middleware_not_used',
+    MIDDLEWARE=[
+        'tests.middleware.test_middleware_not_used.DummyMiddleware',
+        'django.middleware.security.SecurityMiddleware',
+        'django.contrib.sessions.middleware.SessionMiddleware',
+        'django.middleware.common.CommonMiddleware',
+        'django.middleware.csrf.CsrfViewMiddleware',
+        'django.contrib.auth.middleware.AuthenticationMiddleware',
+        'django.contrib.messages.middleware.MessageMiddleware',
+        'django.middleware.clickjacking.XFrameOptionsMiddleware',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    SESSION_ENGINE='django.contrib.sessions.backends.file',
+    SESSION_FILE_PATH=Path('/tmp/nonexistent/sessions.bin'),  # Intentionally broken
+)
+class MiddlewareNotUsedTest(SimpleTestCase):
+    def test_middleware_not_used(self):
+        """Test that MiddlewareNotUsed works correctly in ASGI context."""
+        # This test will pass if our fix works correctly
+        # It will fail with TypeError if the fix is not applied
+        response = self.client.get('/test/')
+        # We expect a 500 error due to the broken session path
+        self.assertEqual(response.status_code, 500)
\ No newline at end of file
