diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100755
index 000000000..644980bea
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,66 @@
+#!/usr/bin/env python3
+import os
+import sys
+import tempfile
+import subprocess
+import shutil
+import time
+
+# Create a temporary directory
+temp_dir = tempfile.mkdtemp()
+print(f"Created temporary directory: {temp_dir}")
+
+try:
+    # First run: create a Sphinx project
+    print("\n=== First run: Creating Sphinx project ===")
+    subprocess.run(["sphinx-quickstart", "-q", "-p", "TestProject", "-a", "TestAuthor", temp_dir],
+                  check=True, capture_output=True)
+
+    # Verify conf.py exists
+    conf_path = os.path.join(temp_dir, "conf.py")
+    if not os.path.exists(conf_path):
+        print(f"Error: conf.py not found at {conf_path}")
+        sys.exit(1)
+
+    print(f"conf.py created at {conf_path}")
+
+    # Second run: try to run sphinx-quickstart again in the same directory
+    print("\n=== Second run: Running sphinx-quickstart again ===")
+
+    # Use a different approach to simulate user input
+    p = subprocess.Popen(["sphinx-quickstart", temp_dir],
+                         stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
+                         text=True, bufsize=1)
+
+    # Give it a moment to start
+    time.sleep(1)
+
+    # Send an empty line (Enter key) to simulate user pressing Enter
+    p.stdin.write("\n")
+    p.stdin.flush()
+
+    # Give it a moment to process
+    time.sleep(1)
+
+    # Send Ctrl+C to interrupt if it's still running
+    p.terminate()
+
+    # Get the output
+    stdout, stderr = p.communicate()
+
+    print(f"Return code: {p.returncode}")
+    print("Output:")
+    print(stdout)
+    print("Error:")
+    print(stderr)
+
+    # Check if the error message is present
+    if "Please enter a valid path name" in stderr:
+        print("\nIssue reproduced: User gets 'Please enter a valid path name' error when pressing Enter")
+    else:
+        print("\nIssue not reproduced: Unexpected behavior")
+
+finally:
+    # Clean up
+    shutil.rmtree(temp_dir)
+    print(f"\nRemoved temporary directory: {temp_dir}")
\ No newline at end of file
diff --git a/setup.py b/setup.py
index 206ff4ad4..4bb5faeb1 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 6):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.14,<0.18',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/cmd/quickstart.py b/sphinx/cmd/quickstart.py
index a40a21073..d5b588dbd 100644
--- a/sphinx/cmd/quickstart.py
+++ b/sphinx/cmd/quickstart.py
@@ -222,10 +222,12 @@ def ask_user(d: Dict) -> None:
                       'selected root path.')))
         print(__('sphinx-quickstart will not overwrite existing Sphinx projects.'))
         print()
-        d['path'] = do_prompt(__('Please enter a new root path (or just Enter to exit)'),
-                              '', is_path)
-        if not d['path']:
-            sys.exit(1)
+        new_path = do_prompt(__('Please enter a new root path (or just Enter to exit)'),
+                             '', allow_empty)
+        if not new_path:
+            sys.exit(0)  # Exit gracefully
+        d['path'] = do_prompt(__('Please enter a valid path name'),
+                              new_path, is_path)
 
     if 'sep' not in d:
         print()
diff --git a/test_cli.py b/test_cli.py
new file mode 100644
index 000000000..8d37b94ed
--- /dev/null
+++ b/test_cli.py
@@ -0,0 +1,68 @@
+#!/usr/bin/env python3
+import os
+import sys
+import tempfile
+import subprocess
+import shutil
+import time
+
+# Create a temporary directory
+temp_dir = tempfile.mkdtemp()
+print(f"Created temporary directory: {temp_dir}")
+
+try:
+    # First run: create a Sphinx project
+    print("\n=== First run: Creating Sphinx project ===")
+    subprocess.run(["sphinx-quickstart", "-q", "-p", "TestProject", "-a", "TestAuthor", temp_dir],
+                  check=True, capture_output=True)
+
+    # Verify conf.py exists
+    conf_path = os.path.join(temp_dir, "conf.py")
+    if not os.path.exists(conf_path):
+        print(f"Error: conf.py not found at {conf_path}")
+        sys.exit(1)
+
+    print(f"conf.py created at {conf_path}")
+
+    # Second run: try to run sphinx-quickstart again in the same directory
+    print("\n=== Second run: Running sphinx-quickstart again ===")
+
+    # Use expect-like behavior to simulate user input
+    p = subprocess.Popen(["sphinx-quickstart", temp_dir],
+                         stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
+                         text=True, bufsize=1)
+
+    # Give it a moment to start
+    time.sleep(1)
+
+    # Send an empty line (Enter key) to simulate user pressing Enter
+    p.stdin.write("\n")
+    p.stdin.flush()
+
+    # Give it a moment to process
+    time.sleep(1)
+
+    # Terminate the process if it's still running
+    if p.poll() is None:
+        p.terminate()
+
+    # Get the output
+    stdout, stderr = p.communicate()
+
+    print(f"Return code: {p.returncode}")
+    print("Output:")
+    print(stdout)
+    print("Error:")
+    print(stderr)
+
+    # Check if the error message is present
+    if "Please enter a valid path name" in stderr:
+        print("\nFAIL: User still gets 'Please enter a valid path name' error when pressing Enter")
+        sys.exit(1)
+    else:
+        print("\nSUCCESS: The fix works correctly")
+
+finally:
+    # Clean up
+    shutil.rmtree(temp_dir)
+    print(f"\nRemoved temporary directory: {temp_dir}")
\ No newline at end of file
diff --git a/test_quickstart_path.py b/test_quickstart_path.py
new file mode 100644
index 000000000..da11d2b88
--- /dev/null
+++ b/test_quickstart_path.py
@@ -0,0 +1,65 @@
+#!/usr/bin/env python3
+import os
+import sys
+import tempfile
+import shutil
+import subprocess
+from sphinx.cmd import quickstart as qs
+
+# Create a temporary directory
+temp_dir = tempfile.mkdtemp()
+print(f"Created temporary directory: {temp_dir}")
+
+try:
+    # First run: create a Sphinx project
+    print("\n=== First run: Creating Sphinx project ===")
+    # Use sphinx-quickstart command directly to create a project
+    subprocess.run(["sphinx-quickstart", "-q", "-p", "TestProject", "-a", "TestAuthor", temp_dir],
+                  check=True, capture_output=True)
+
+    # Verify conf.py exists
+    conf_path = os.path.join(temp_dir, "conf.py")
+    if not os.path.exists(conf_path):
+        print(f"Error: conf.py not found at {conf_path}")
+        sys.exit(1)
+
+    print(f"conf.py created at {conf_path}")
+
+    # Second run: test the path validation directly
+    print("\n=== Second run: Testing path validation ===")
+
+    # Store the original term_input function
+    original_term_input = qs.term_input
+
+    # Create a mock input function that returns an empty string (simulating pressing Enter)
+    inputs = [""]
+    def mock_input(prompt):
+        print(f"Prompt: {prompt}")
+        return inputs.pop(0)
+
+    # Replace the term_input function with our mock
+    qs.term_input = mock_input
+
+    # Create a dictionary with the path set to the temp directory
+    d = {'path': temp_dir}
+
+    try:
+        # This should now exit gracefully when Enter is pressed
+        qs.ask_user(d)
+        print("No error was raised - this is unexpected")
+    except SystemExit as e:
+        print(f"SystemExit raised with code: {e.code}")
+        if e.code == 0:
+            print("Success: The program exited gracefully with code 0")
+        else:
+            print(f"Warning: The program exited with code {e.code}, not 0")
+    except Exception as e:
+        print(f"Other exception raised: {type(e).__name__}: {e}")
+
+    # Restore the original term_input function
+    qs.term_input = original_term_input
+
+finally:
+    # Clean up
+    shutil.rmtree(temp_dir)
+    print(f"\nRemoved temporary directory: {temp_dir}")
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index a363e187f..3b8bc12d0 100644
--- a/tox.ini
+++ b/tox.ini
@@ -27,7 +27,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
