diff --git a/setup.py b/setup.py
index 8d40de1a8..03f325278 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/test_viewcode_epub.py b/test_viewcode_epub.py
new file mode 100644
index 000000000..54c2a2125
--- /dev/null
+++ b/test_viewcode_epub.py
@@ -0,0 +1,137 @@
+import os
+import shutil
+import subprocess
+import tempfile
+
+def test_viewcode_epub():
+    """Test that viewcode doesn't create pages for epub when viewcode_enable_epub=False."""
+    # Create a temporary directory for the test
+    temp_dir = tempfile.mkdtemp()
+    try:
+        # Create a simple Sphinx project
+        src_dir = os.path.join(temp_dir, 'src')
+        os.makedirs(src_dir)
+
+        # Create a simple Python module
+        module_path = os.path.join(src_dir, 'mymodule.py')
+        with open(module_path, 'w') as f:
+            f.write('def hello():\n    return "Hello, world!"\n')
+
+        # Create conf.py
+        conf_path = os.path.join(src_dir, 'conf.py')
+        with open(conf_path, 'w') as f:
+            f.write("""
+import os
+import sys
+sys.path.insert(0, os.path.abspath('.'))
+
+project = 'Test Project'
+copyright = '2023, Test Author'
+author = 'Test Author'
+version = '0.1'
+release = '0.1'
+
+extensions = ['sphinx.ext.viewcode', 'sphinx.ext.autodoc']
+viewcode_enable_epub = False
+
+# Add the source directory to sys.path
+import sys
+sys.path.insert(0, '.')
+
+# General settings
+templates_path = ['_templates']
+exclude_patterns = []
+
+# Enable verbose output
+verbosity = 2
+""")
+
+        # Create index.rst
+        index_path = os.path.join(src_dir, 'index.rst')
+        with open(index_path, 'w') as f:
+            f.write("""
+.. toctree::
+   :maxdepth: 2
+   :caption: Contents:
+
+Welcome to Test Project's documentation!
+=======================================
+
+.. automodule:: mymodule
+   :members:
+
+.. only:: html
+
+   HTML-specific content
+   ---------------------
+
+.. only:: epub
+
+   EPUB-specific content
+   ---------------------
+""")
+
+        # Create Makefile
+        makefile_path = os.path.join(src_dir, 'Makefile')
+        with open(makefile_path, 'w') as f:
+            f.write("""
+SPHINXOPTS   = -D viewcode_enable_epub=False
+SPHINXBUILD = sphinx-build
+PAPER        =
+
+.PHONY: help clean html epub
+
+help:
+\t@$(SPHINXBUILD) -M help "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)
+
+clean:
+\t-rm -rf $(BUILDDIR)/*
+
+html:
+\t$(SPHINXBUILD) -M html "$(SOURCEDIR)" "$(BUILDDIR)/html" $(SPHINXOPTS) $(O)
+
+epub:
+\t$(SPHINXBUILD) -M epub "$(SOURCEDIR)" "$(BUILDDIR)/epub" $(SPHINXOPTS) $(O)
+
+SOURCEDIR    = .
+BUILDDIR     = _build
+""")
+
+        # Change to the source directory
+        os.chdir(src_dir)
+
+        # Build both HTML and EPUB
+        subprocess.run(['make', 'clean'], check=True)
+        subprocess.run(['make', 'html', 'epub'], check=True)
+
+        # Check if module pages were created in the HTML output (they should be)
+        html_modules_dir = os.path.join(src_dir, '_build', 'html', '_modules')
+        print(f"HTML modules dir exists: {os.path.exists(html_modules_dir)}")
+        if os.path.exists(html_modules_dir):
+            print("HTML modules directory contents:")
+            for root, dirs, files in os.walk(html_modules_dir):
+                for file in files:
+                    print(f"  {os.path.join(root, file)}")
+        else:
+            print('ERROR: Module pages were not created for HTML')
+            return False
+
+        # Check if module pages were created in the EPUB output (they should not be)
+        epub_modules_dir = os.path.join(src_dir, '_build', 'epub', '_modules')
+        if os.path.exists(epub_modules_dir):
+            print('ERROR: Module pages were created for EPUB despite viewcode_enable_epub=False')
+            # List the contents of the modules directory
+            for root, dirs, files in os.walk(epub_modules_dir):
+                for file in files:
+                    print(f'Found file: {os.path.join(root, file)}')
+            return False
+        else:
+            print('SUCCESS: No module pages were created for EPUB')
+            return True
+
+    finally:
+        # Clean up
+        shutil.rmtree(temp_dir)
+
+if __name__ == '__main__':
+    test_viewcode_epub()
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index 21a0faec3..be1a9127e 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
