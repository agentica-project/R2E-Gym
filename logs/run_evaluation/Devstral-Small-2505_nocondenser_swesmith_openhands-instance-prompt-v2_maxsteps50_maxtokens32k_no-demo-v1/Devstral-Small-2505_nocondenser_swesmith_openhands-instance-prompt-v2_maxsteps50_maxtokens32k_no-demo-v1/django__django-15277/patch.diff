diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index f30b523346..88c9ca9f28 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1010,7 +1010,8 @@ class CharField(Field):
     def __init__(self, *args, db_collation=None, **kwargs):
         super().__init__(*args, **kwargs)
         self.db_collation = db_collation
-        self.validators.append(validators.MaxLengthValidator(self.max_length))
+        if self.max_length is not None:
+            self.validators.append(validators.MaxLengthValidator(self.max_length))
 
     def check(self, **kwargs):
         databases = kwargs.get('databases') or []
diff --git a/test_value_resolve.py b/test_value_resolve.py
new file mode 100644
index 0000000000..8e45a89047
--- /dev/null
+++ b/test_value_resolve.py
@@ -0,0 +1,24 @@
+import time
+from django.db.models import Value
+
+def test_value_resolve_performance():
+    # Test the current behavior
+    x = Value('test')
+    start_time = time.time()
+    for _ in range(100000):
+        y = x._resolve_output_field()
+    end_time = time.time()
+
+    print(f"Time taken for 100,000 calls: {(end_time - start_time) * 1000:.2f} ms")
+    print(f"Average time per call: {((end_time - start_time) / 100000) * 1000000:.2f} Âµs")
+
+    # Check if validators are present
+    y = x._resolve_output_field()
+    print(f"Number of validators: {len(y.validators)}")
+    if y.validators:
+        print(f"Validator type: {type(y.validators[0]).__name__}")
+    else:
+        print("No validators present (as expected)")
+
+if __name__ == "__main__":
+    test_value_resolve_performance()
\ No newline at end of file
