diff --git a/django/utils/formats.py b/django/utils/formats.py
index 3f38322d84..51c1f0573d 100644
--- a/django/utils/formats.py
+++ b/django/utils/formats.py
@@ -106,6 +106,10 @@ def get_format(format_type, lang=None, use_l10n=None):
     If use_l10n is provided and is not None, it forces the value to
     be localized (or not), overriding the value of settings.USE_L10N.
     """
+    # Ensure format_type is a string (handles lazy strings)
+    if not isinstance(format_type, str):
+        format_type = str(format_type)
+
     if use_l10n is None:
         try:
             use_l10n = settings._USE_L10N_INTERNAL
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..fb1b5b7fd4
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,46 @@
+import datetime
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'django.contrib.sessions',
+            'django.contrib.messages',
+            'django.contrib.staticfiles',
+        ],
+        LANGUAGE_CODE='en-us',
+        TIME_ZONE='UTC',
+        USE_I18N=True,
+        USE_L10N=True,
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.utils.formats import get_format
+from django.utils.translation import gettext_lazy as _
+
+# Create a date object
+date_obj = datetime.date(2023, 1, 1)
+
+# Try to use a lazy string with get_format
+try:
+    # This should fail with TypeError: getattr(): attribute name must be string
+    format_str = _('Y-m-d')
+    result = get_format(format_str)
+    print(f"Success! get_format handled lazy string: {result}")
+except TypeError as e:
+    print(f"Error: {e}")
+
+# Now try with a non-lazy string for comparison
+try:
+    format_str = 'Y-m-d'
+    result = get_format(format_str)
+    print(f"Success with non-lazy string: {result}")
+except Exception as e:
+    print(f"Error with non-lazy string: {e}")
\ No newline at end of file
diff --git a/test_date_filter_with_lazy.py b/test_date_filter_with_lazy.py
new file mode 100644
index 0000000000..9ebb25bf4b
--- /dev/null
+++ b/test_date_filter_with_lazy.py
@@ -0,0 +1,75 @@
+import datetime
+import django
+from django.conf import settings
+from django.template import Context, Template
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'django.contrib.sessions',
+            'django.contrib.messages',
+            'django.contrib.staticfiles',
+        ],
+        LANGUAGE_CODE='en-us',
+        TIME_ZONE='UTC',
+        USE_I18N=True,
+        USE_L10N=True,
+        USE_TZ=True,
+        TEMPLATES=[
+            {
+                'BACKEND': 'django.template.backends.django.DjangoTemplates',
+                'DIRS': [],
+                'APP_DIRS': True,
+                'OPTIONS': {
+                    'context_processors': [
+                        'django.template.context_processors.debug',
+                        'django.template.context_processors.request',
+                        'django.contrib.auth.context_processors.auth',
+                        'django.contrib.messages.context_processors.messages',
+                    ],
+                },
+            },
+        ],
+    )
+    django.setup()
+
+from django.utils.formats import get_format
+from django.utils.translation import gettext_lazy as _
+
+# Create a date object
+date_obj = datetime.date(2023, 1, 1)
+
+# Test 1: Direct use of get_format with lazy string
+print("Test 1: Direct use of get_format with lazy string")
+try:
+    format_str = _('Y-m-d')
+    result = get_format(format_str)
+    print(f"Success! get_format handled lazy string: {result}")
+except TypeError as e:
+    print(f"Error: {e}")
+
+# Test 2: Use date filter in template with lazy string
+print("\nTest 2: Use date filter in template with lazy string")
+template_str = "{% load i18n %}{{ my_date|date:_('Y-m-d') }}"
+context = Context({'my_date': date_obj})
+try:
+    template = Template(template_str)
+    result = template.render(context)
+    print(f"Success! Template rendered with lazy string: {result}")
+except Exception as e:
+    print(f"Error: {e}")
+
+# Test 3: Use date filter in template with non-lazy string (for comparison)
+print("\nTest 3: Use date filter in template with non-lazy string")
+template_str = "{% load i18n %}{{ my_date|date:'Y-m-d' }}"
+context = Context({'my_date': date_obj})
+try:
+    template = Template(template_str)
+    result = template.render(context)
+    print(f"Success! Template rendered with non-lazy string: {result}")
+except Exception as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/tests/utils_tests/test_formats.py b/tests/utils_tests/test_formats.py
new file mode 100644
index 0000000000..a188b16973
--- /dev/null
+++ b/tests/utils_tests/test_formats.py
@@ -0,0 +1,52 @@
+from datetime import date
+
+from django.test import SimpleTestCase, override_settings, TestCase
+from django.template import Context, Template
+from django.utils.formats import get_format
+from django.utils.translation import gettext_lazy as _
+
+@override_settings(USE_L10N=True)
+class FormatsTests(SimpleTestCase):
+    def test_get_format_with_lazy_string(self):
+        """Test that get_format handles lazy strings correctly."""
+        format_str = _('Y-m-d')
+        result = get_format(format_str)
+        self.assertEqual(result, 'Y-m-d')
+
+    def test_get_format_with_non_lazy_string(self):
+        """Test that get_format still works with non-lazy strings."""
+        format_str = 'Y-m-d'
+        result = get_format(format_str)
+        self.assertEqual(result, 'Y-m-d')
+
+@override_settings(
+    USE_L10N=True,
+    TEMPLATES=[
+        {
+            'BACKEND': 'django.template.backends.django.DjangoTemplates',
+            'DIRS': [],
+            'APP_DIRS': True,
+            'OPTIONS': {
+                'context_processors': [],
+            },
+        },
+    ]
+)
+class DateFilterTests(TestCase):
+    def test_date_filter_with_lazy_string(self):
+        """Test that the date filter handles lazy strings correctly."""
+        date_obj = date(2023, 1, 1)
+        template_str = "{{ my_date|date:_('Y-m-d') }}"
+        context = Context({'my_date': date_obj})
+        template = Template(template_str)
+        result = template.render(context)
+        self.assertEqual(result, '2023-01-01')
+
+    def test_date_filter_with_non_lazy_string(self):
+        """Test that the date filter still works with non-lazy strings."""
+        date_obj = date(2023, 1, 1)
+        template_str = "{{ my_date|date:'Y-m-d' }}"
+        context = Context({'my_date': date_obj})
+        template = Template(template_str)
+        result = template.render(context)
+        self.assertEqual(result, '2023-01-01')
\ No newline at end of file
