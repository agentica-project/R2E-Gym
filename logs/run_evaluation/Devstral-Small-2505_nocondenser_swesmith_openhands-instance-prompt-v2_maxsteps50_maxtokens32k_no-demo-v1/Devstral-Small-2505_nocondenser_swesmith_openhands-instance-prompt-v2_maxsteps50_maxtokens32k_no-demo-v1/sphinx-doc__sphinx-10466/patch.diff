diff --git a/sphinx/builders/gettext.py b/sphinx/builders/gettext.py
index e8bc547b7..9a9e81f0f 100644
--- a/sphinx/builders/gettext.py
+++ b/sphinx/builders/gettext.py
@@ -32,9 +32,14 @@ class Message:
     """An entry of translatable message."""
     def __init__(self, text: str, locations: List[Tuple[str, int]], uuids: List[str]):
         self.text = text
-        self.locations = locations
+        # self.locations = locations
+        self.locations = self.uniqueLocation(locations)
         self.uuids = uuids
 
+    def uniqueLocation(self, locations: List[Tuple[str, int]]):
+        loc_set = set(locations)
+        return list(loc_set)
+
 
 class Catalog:
     """Catalog of translatable messages."""
@@ -53,7 +58,11 @@ class Catalog:
         if msg not in self.metadata:  # faster lookup in hash
             self.messages.append(msg)
             self.metadata[msg] = []
-        self.metadata[msg].append((origin.source, origin.line, origin.uid))  # type: ignore
+
+        # Check if the position is already in the metadata
+        position = (origin.source, origin.line, origin.uid)
+        if position not in self.metadata[msg]:
+            self.metadata[msg].append(position)  # type: ignore
 
     def __iter__(self) -> Generator[Message, None, None]:
         for message in self.messages:
diff --git a/test_message_duplicates.py b/test_message_duplicates.py
new file mode 100644
index 000000000..f21654507
--- /dev/null
+++ b/test_message_duplicates.py
@@ -0,0 +1,34 @@
+#!/usr/bin/env python3
+"""
+Test script to reproduce the issue with duplicate locations in Message objects.
+"""
+
+from sphinx.builders.gettext import Message
+
+def test_message_with_duplicate_locations():
+    """Test that Message deduplicates locations."""
+    # Create a list of locations with duplicates
+    locations = [
+        ("file1.rst", 10),
+        ("file2.rst", 20),
+        ("file1.rst", 10),  # duplicate
+        ("file3.rst", 30),
+        ("file2.rst", 20),  # duplicate
+    ]
+
+    # Create a Message object with the duplicate locations
+    message = Message("Test message", locations, [])
+
+    # Check if locations are deduplicated
+    unique_locations = list(set(locations))
+    print(f"Original locations: {locations}")
+    print(f"Unique locations: {unique_locations}")
+    print(f"Message locations: {message.locations}")
+
+    # The message.locations should be equal to unique_locations
+    assert message.locations == unique_locations, "Locations are not deduplicated"
+
+    print("Test passed!")
+
+if __name__ == "__main__":
+    test_message_with_duplicate_locations()
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index 105a02597..90ada0821 100644
--- a/tox.ini
+++ b/tox.ini
@@ -29,7 +29,7 @@ setenv =
     PYTHONWARNINGS = all
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -X warn_default_encoding -m pytest --durations 25 {posargs}
+    python -X dev -X warn_default_encoding -m pytest -rA --durations 25 {posargs}
 
 [testenv:du-latest]
 commands =
