diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..8904ded0e
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,9 @@
+import pytest
+import logging
+
+def test_foo(caplog):
+    caplog.set_level(42)
+
+def test_bar(caplog):
+    print(f"Handler level: {caplog.handler.level}")
+    assert caplog.handler.level == logging.NOTSET, f"Expected NOTSET (0), got {caplog.handler.level}"
\ No newline at end of file
diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py
index 11031f2f2..29f32a50f 100644
--- a/src/_pytest/logging.py
+++ b/src/_pytest/logging.py
@@ -354,8 +354,13 @@ class LogCaptureFixture:
         """
         # restore log levels
         for logger_name, level in self._initial_logger_levels.items():
-            logger = logging.getLogger(logger_name)
-            logger.setLevel(level)
+            if logger_name is None:
+                # This is the handler level
+                self.handler.setLevel(level)
+            else:
+                # This is a logger level
+                logger = logging.getLogger(logger_name)
+                logger.setLevel(level)
 
     @property
     def handler(self) -> LogCaptureHandler:
@@ -434,6 +439,10 @@ class LogCaptureFixture:
         # save the original log-level to restore it during teardown
         self._initial_logger_levels.setdefault(logger, logger_obj.level)
         logger_obj.setLevel(level)
+        # Save and restore the handler level as well
+        if None not in self._initial_logger_levels:
+            # Only save the initial handler level once
+            self._initial_logger_levels[None] = logging.NOTSET
         self.handler.setLevel(level)
 
     @contextmanager
@@ -471,7 +480,11 @@ def caplog(request: FixtureRequest) -> Generator[LogCaptureFixture, None, None]:
     * caplog.clear()         -> clear captured records and formatted log output string
     """
     result = LogCaptureFixture(request.node)
+    # Save the initial handler level
+    result._initial_logger_levels[None] = result.handler.level
     yield result
+    # Restore the handler level to its initial value
+    result.handler.setLevel(result._initial_logger_levels[None])
     result._finalize()
 
 
