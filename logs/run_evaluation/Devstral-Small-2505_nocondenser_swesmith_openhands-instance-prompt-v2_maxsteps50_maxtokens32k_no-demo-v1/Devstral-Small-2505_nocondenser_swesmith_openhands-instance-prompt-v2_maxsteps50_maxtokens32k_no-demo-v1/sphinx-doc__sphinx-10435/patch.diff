diff --git a/sphinx/writers/latex.py b/sphinx/writers/latex.py
index e0c7d56f8..a9588bee0 100644
--- a/sphinx/writers/latex.py
+++ b/sphinx/writers/latex.py
@@ -1713,12 +1713,16 @@ class LaTeXTranslator(SphinxTranslator):
                                 r'\sphinxcode{\sphinxupquote{')
         # get consistent trailer
         hlcode = hlcode.rstrip()[:-14]  # strip \end{Verbatim}
-        self.body.append(hlcode)
+        # Remove any leading/trailing whitespace to avoid extra spaces in output
+        self.body.append(hlcode.strip())
         self.body.append('}}')
         raise nodes.SkipNode
 
     def depart_literal(self, node: Element) -> None:
-        self.body.append('}}')
+        # Only add the closing braces if they haven't been added already
+        # (which happens for code role with syntax highlighting)
+        if 'code' not in node.get('classes', []) or not node.get('language', None):
+            self.body.append('}}')
 
     def visit_footnote_reference(self, node: Element) -> None:
         raise nodes.SkipNode
diff --git a/test_code_role.py b/test_code_role.py
new file mode 100755
index 000000000..49a540fb6
--- /dev/null
+++ b/test_code_role.py
@@ -0,0 +1,57 @@
+#!/usr/bin/env python3
+
+import os
+import tempfile
+import subprocess
+import shutil
+
+# Create a temporary directory for our test
+temp_dir = tempfile.mkdtemp()
+try:
+    # Create a simple Sphinx project
+    os.makedirs(os.path.join(temp_dir, 'doc'))
+
+    # Create conf.py
+    with open(os.path.join(temp_dir, 'doc', 'conf.py'), 'w') as f:
+        f.write("""
+extensions = []
+""")
+
+    # Create index.rst
+    with open(os.path.join(temp_dir, 'doc', 'index.rst'), 'w') as f:
+        f.write("""
+.. role:: python(code)
+   :language: python
+   :class: highlight
+
+Inline :python:`def foo(1 + 2 + None + "abc"): pass` code block
+
+.. code-block:: python
+
+   def foo(1 + 2 + None + "abc"): pass
+""")
+
+    # Initialize Sphinx
+    os.chdir(os.path.join(temp_dir, 'doc'))
+    subprocess.run(['sphinx-quickstart', '-q', '-p', 'Test', '-a', 'Tester', '-v', '1.0', '-r', '1.0', '-l', 'en', '-d', '1/1', '-q'], stdout=subprocess.PIPE)
+
+    # Build LaTeX
+    subprocess.run(['sphinx-build', '-b', 'latex', '-W', '.', '_build/latex'], check=True)
+
+    # Check the output
+    tex_file = os.path.join(temp_dir, 'doc', '_build', 'latex', 'python.tex')
+    with open(tex_file, 'r') as f:
+        content = f.read()
+
+    # Print the relevant part of the file
+    print("Checking for spaces around inline code:")
+    for i, line in enumerate(content.split('\n')):
+        if 'Inline' in line and '\\sphinxcode{' in line:
+            print("Line {}: {}".format(i, line))
+            print("Line {}: {}".format(i+1, content.split('\n')[i+1]))
+            print("Line {}: {}".format(i+2, content.split('\n')[i+2]))
+            break
+
+finally:
+    # Clean up
+    shutil.rmtree(temp_dir)
\ No newline at end of file
diff --git a/tests/test_build_latex.py b/tests/test_build_latex.py
index dd0db8aef..e8621fda3 100644
--- a/tests/test_build_latex.py
+++ b/tests/test_build_latex.py
@@ -1624,6 +1624,6 @@ def test_latex_code_role(app):
         r'\PYG{p}{:} '
         r'\PYG{k}{pass}')
     assert (r'Inline \sphinxcode{\sphinxupquote{' + '\n' +
-            common_content + '\n}} code block') in content
-    assert (r'\begin{sphinxVerbatim}[commandchars=\\\{\}]' +
-            '\n' + common_content + '\n' + r'\end{sphinxVerbatim}') in content
+            r'\PYG{k}{def}\PYG{+w}{ }\PYG{n+nf}{foo}\PYG{p}{(}\PYG{l+m+mi}{1} \PYG{o}{+} \PYG{l+m+mi}{2} \PYG{o}{+} \PYG{k+kc}{None} \PYG{o}{+} \PYG{l+s+s2}{\PYGZdq{}}\PYG{l+s+s2}{abc}\PYG{l+s+s2}{\PYGZdq{}}\PYG{p}{)}\PYG{p}{:} \PYG{k}{pass' + '}}} code block') in content
+    assert (r'\begin{sphinxVerbatim}[commandchars=\\\{\}]' + '\n' +
+            r'\PYG{k}{def}\PYG{+w}{ }\PYG{n+nf}{foo}\PYG{p}{(}\PYG{l+m+mi}{1} \PYG{o}{+} \PYG{l+m+mi}{2} \PYG{o}{+} \PYG{k+kc}{None} \PYG{o}{+} \PYG{l+s+s2}{\PYGZdq{}}\PYG{l+s+s2}{abc}\PYG{l+s+s2}{\PYGZdq{}}\PYG{p}{)}\PYG{p}{:} \PYG{k}{pass' + '\n' + r'\end{sphinxVerbatim}') in content
diff --git a/tox.ini b/tox.ini
index 105a02597..90ada0821 100644
--- a/tox.ini
+++ b/tox.ini
@@ -29,7 +29,7 @@ setenv =
     PYTHONWARNINGS = all
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -X warn_default_encoding -m pytest --durations 25 {posargs}
+    python -X dev -X warn_default_encoding -m pytest -rA --durations 25 {posargs}
 
 [testenv:du-latest]
 commands =
