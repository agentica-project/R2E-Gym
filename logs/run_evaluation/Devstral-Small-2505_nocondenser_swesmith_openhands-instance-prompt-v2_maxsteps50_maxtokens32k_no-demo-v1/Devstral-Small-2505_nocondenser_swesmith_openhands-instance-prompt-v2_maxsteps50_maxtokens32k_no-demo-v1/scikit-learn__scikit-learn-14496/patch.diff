diff --git a/reproduce_optics_float_min_samples.py b/reproduce_optics_float_min_samples.py
new file mode 100644
index 000000000..5c1a0e662
--- /dev/null
+++ b/reproduce_optics_float_min_samples.py
@@ -0,0 +1,16 @@
+import numpy as np
+from sklearn.cluster import OPTICS
+
+# Create some simple data
+data = np.random.rand(100, 2)
+
+# Try to use OPTICS with min_samples as a float
+try:
+    clust = OPTICS(metric='minkowski', n_jobs=-1, min_samples=0.1)
+    clust.fit(data)
+    print("Success! The issue is fixed.")
+except TypeError as e:
+    if "n_neighbors does not take" in str(e):
+        print("Reproduced the issue: " + str(e))
+    else:
+        print("Different error occurred: " + str(e))
\ No newline at end of file
diff --git a/sklearn/cluster/optics_.py b/sklearn/cluster/optics_.py
index 4f7eb11ab..228d88c4e 100755
--- a/sklearn/cluster/optics_.py
+++ b/sklearn/cluster/optics_.py
@@ -437,7 +437,7 @@ if metric=’precomputed’.
     n_samples = X.shape[0]
     _validate_size(min_samples, n_samples, 'min_samples')
     if min_samples <= 1:
-        min_samples = max(2, min_samples * n_samples)
+        min_samples = int(round(max(2, min_samples * n_samples)))
 
     # Start all points as 'unprocessed' ##
     reachability_ = np.empty(n_samples)
diff --git a/test_optics_float_min_samples.py b/test_optics_float_min_samples.py
new file mode 100644
index 000000000..c6aae7078
--- /dev/null
+++ b/test_optics_float_min_samples.py
@@ -0,0 +1,25 @@
+import numpy as np
+from sklearn.cluster import OPTICS
+
+# Create some simple data
+data = np.random.rand(100, 2)
+
+# Test with different float values for min_samples
+float_min_samples_values = [0.1, 0.25, 0.5, 0.75, 1.0]
+
+for min_samples in float_min_samples_values:
+    try:
+        clust = OPTICS(metric='minkowski', n_jobs=-1, min_samples=min_samples)
+        clust.fit(data)
+        labels = clust.labels_
+        print(f"Success with min_samples={min_samples}, got {len(np.unique(labels))} clusters")
+    except Exception as e:
+        print(f"Error with min_samples={min_samples}: {str(e)}")
+
+# Also test with a very small float value
+try:
+    clust = OPTICS(metric='minkowski', n_jobs=-1, min_samples=0.001)
+    clust.fit(data)
+    print(f"Success with min_samples=0.001")
+except Exception as e:
+    print(f"Error with min_samples=0.001: {str(e)}")
\ No newline at end of file
