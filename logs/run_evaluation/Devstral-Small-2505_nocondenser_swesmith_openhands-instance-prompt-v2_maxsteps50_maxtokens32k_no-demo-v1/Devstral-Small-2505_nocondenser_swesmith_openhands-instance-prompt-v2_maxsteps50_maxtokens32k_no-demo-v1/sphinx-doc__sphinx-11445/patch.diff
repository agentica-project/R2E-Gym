diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100755
index 000000000..062735287
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,83 @@
+#!/usr/bin/env python3
+import os
+import shutil
+import subprocess
+import tempfile
+
+def setup_test_environment():
+    # Create a temporary directory
+    temp_dir = tempfile.mkdtemp()
+    doc_dir = os.path.join(temp_dir, "docs")
+
+    # Create the directory structure
+    os.makedirs(doc_dir)
+
+    # Run sphinx-quickstart
+    subprocess.run([
+        "sphinx-quickstart", "--no-sep", "--project", "mypackage", "--author", "me",
+        "-v", "0.1.0", "--release", "0.1.0", "--language", "en", doc_dir
+    ], check=True)
+
+    # Create index.rst
+    with open(os.path.join(doc_dir, "index.rst"), "w") as f:
+        f.write("""Welcome
+=======
+
+.. toctree::
+
+   mypackage
+""")
+
+    # Create mypackage.rst with domain directive
+    with open(os.path.join(doc_dir, "mypackage.rst"), "w") as f:
+        f.write(""":mod:`mypackage2`
+=================
+
+Content
+
+Subheading
+----------
+""")
+
+    # Add rst_prolog to conf.py
+    conf_py_path = os.path.join(doc_dir, "conf.py")
+    with open(conf_py_path, "a") as f:
+        f.write("""\n
+rst_prolog = \"\"\"
+.. |psf| replace:: Python Software Foundation
+\"\"\"
+""")
+
+    return temp_dir, doc_dir
+
+def build_and_check(temp_dir, doc_dir):
+    # Build the documentation
+    build_dir = os.path.join(temp_dir, "_build")
+    subprocess.run(["sphinx-build", "-b", "html", doc_dir, build_dir], check=True)
+
+    # Check if the heading is in the output
+    index_html_path = os.path.join(build_dir, "index.html")
+    with open(index_html_path, "r") as f:
+        content = f.read()
+
+    # Check if "mypackage2" is in the output
+    if "mypackage2" in content:
+        print("SUCCESS: Heading is present in the output")
+    else:
+        print("FAILURE: Heading is missing from the output")
+        print("Content of index.html:")
+        print(content[:1000])  # Print first 1000 chars for context
+
+def cleanup(temp_dir):
+    # Clean up the temporary directory
+    shutil.rmtree(temp_dir)
+
+def main():
+    temp_dir, doc_dir = setup_test_environment()
+    try:
+        build_and_check(temp_dir, doc_dir)
+    finally:
+        cleanup(temp_dir)
+
+if __name__ == "__main__":
+    main()
\ No newline at end of file
diff --git a/sphinx/transforms/__init__.py b/sphinx/transforms/__init__.py
index f36473084..bf7a03bc4 100644
--- a/sphinx/transforms/__init__.py
+++ b/sphinx/transforms/__init__.py
@@ -295,6 +295,16 @@ class SphinxContentsFilter(ContentsFilter):
     def visit_image(self, node: nodes.image) -> None:
         raise nodes.SkipNode
 
+    def visit_pending_xref(self, node):
+        # Process domain directives in headings properly
+        if hasattr(node, 'get') and node.get('refdomain'):
+            # This is a domain directive reference, process its children
+            self.parent.append(node.deepcopy())
+        else:
+            # For other pending xrefs, just process children but skip the node
+            self.parent.append(node.deepcopy())
+        raise nodes.SkipNode
+
 
 class SphinxSmartQuotes(SmartQuotes, SphinxTransform):
     """
diff --git a/tox.ini b/tox.ini
index 512aa5f74..84c8093a3 100644
--- a/tox.ini
+++ b/tox.ini
@@ -24,7 +24,7 @@ setenv =
     PYTHONWARNINGS = error
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -X warn_default_encoding -m pytest --durations 25 {posargs}
+    python -X dev -X warn_default_encoding -m pytest -rA --durations 25 {posargs}
 
 [testenv:docs]
 basepython = python3
