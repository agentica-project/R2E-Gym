diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 000000000..8714fda1c
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,79 @@
+from sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor
+from sklearn.tree.export import export_text
+from sklearn.datasets import load_iris, load_boston
+import numpy as np
+
+def test_single_feature():
+    """Test export_text with a single feature."""
+    print("Testing with a single feature...")
+
+    # Test with classification
+    X, y = load_iris(return_X_y=True)
+    X = X[:, 0].reshape(-1, 1)
+    tree = DecisionTreeClassifier()
+    tree.fit(X, y)
+    text = export_text(tree, feature_names=['sepal_length'])
+    print("Single feature classification tree:")
+    print(text[:200] + "...")  # Print first 200 chars
+
+    # Test with regression
+    X, y = load_boston(return_X_y=True)
+    X = X[:, 0].reshape(-1, 1)
+    tree = DecisionTreeRegressor()
+    tree.fit(X, y)
+    text = export_text(tree, feature_names=['CRIM'])
+    print("\nSingle feature regression tree:")
+    print(text[:200] + "...")  # Print first 200 chars
+
+    print("\nSingle feature tests passed!")
+
+def test_multiple_features():
+    """Test export_text with multiple features."""
+    print("\nTesting with multiple features...")
+
+    # Test with classification
+    X, y = load_iris(return_X_y=True)
+    tree = DecisionTreeClassifier(max_depth=2)
+    tree.fit(X, y)
+    text = export_text(tree, feature_names=['sepal_length', 'sepal_width', 'petal_length', 'petal_width'])
+    print("Multiple feature classification tree:")
+    print(text[:200] + "...")  # Print first 200 chars
+
+    # Test with regression
+    X, y = load_boston(return_X_y=True)
+    tree = DecisionTreeRegressor(max_depth=2)
+    tree.fit(X, y)
+    text = export_text(tree, feature_names=['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT'])
+    print("\nMultiple feature regression tree:")
+    print(text[:200] + "...")  # Print first 200 chars
+
+    print("\nMultiple feature tests passed!")
+
+def test_edge_cases():
+    """Test export_text with edge cases."""
+    print("\nTesting edge cases...")
+
+    # Test with a single sample
+    X = np.array([[1.0]])
+    y = np.array([0])
+    tree = DecisionTreeClassifier()
+    tree.fit(X, y)
+    text = export_text(tree, feature_names=['feature'])
+    print("Single sample tree:")
+    print(text)
+
+    # Test with a tree that only has a root node (max_depth=1)
+    X, y = load_iris(return_X_y=True)
+    tree = DecisionTreeClassifier(max_depth=1)
+    tree.fit(X, y)
+    text = export_text(tree, feature_names=['sepal_length', 'sepal_width', 'petal_length', 'petal_width'])
+    print("\nTree with only root node:")
+    print(text)
+
+    print("\nEdge case tests passed!")
+
+if __name__ == "__main__":
+    test_single_feature()
+    test_multiple_features()
+    test_edge_cases()
+    print("\nAll tests passed!")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..7aa5b1f54
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,32 @@
+from sklearn.tree import DecisionTreeClassifier
+from sklearn.tree.export import export_text
+from sklearn.datasets import load_iris
+import numpy as np
+
+# Load iris dataset but use only one feature
+X, y = load_iris(return_X_y=True)
+X = X[:, 0].reshape(-1, 1)
+
+# Train a decision tree classifier
+tree = DecisionTreeClassifier()
+tree.fit(X, y)
+
+# Print tree structure for debugging
+tree_ = tree.tree_
+print(f"tree_.feature: {tree_.feature}")
+print(f"tree_.threshold: {tree_.threshold}")
+print(f"tree_.value: {tree_.value}")
+print(f"tree_.n_features: {tree_.n_features}")
+
+# Simulate how feature_names_ is created
+feature_names = ['sepal_length']
+feature_names_ = [feature_names[i] for i in tree_.feature if i >= 0]
+print(f"feature_names_: {feature_names_[:10]}... (truncated)")
+
+# Try to export the tree as text
+try:
+    tree_text = export_text(tree, feature_names=['sepal_length'])
+    print("Success! Tree text:")
+    print(tree_text)
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {e}")
\ No newline at end of file
diff --git a/sklearn/tree/export.py b/sklearn/tree/export.py
index 1fe11e596..0315025d1 100644
--- a/sklearn/tree/export.py
+++ b/sklearn/tree/export.py
@@ -890,9 +890,11 @@ def export_text(decision_tree, feature_names=None, max_depth=10,
         value_fmt = "{}{} value: {}\n"
 
     if feature_names:
-        feature_names_ = [feature_names[i] for i in tree_.feature]
+        # Create a mapping from feature index to feature name
+        feature_names_ = feature_names
     else:
-        feature_names_ = ["feature_{}".format(i) for i in tree_.feature]
+        # Create generic feature names
+        feature_names_ = ["feature_{}".format(i) for i in range(tree_.n_features)]
 
     export_text.report = ""
 
@@ -928,7 +930,8 @@ def export_text(decision_tree, feature_names=None, max_depth=10,
             info_fmt_right = info_fmt
 
             if tree_.feature[node] != _tree.TREE_UNDEFINED:
-                name = feature_names_[node]
+                feature_idx = tree_.feature[node]
+                name = feature_names_[feature_idx]
                 threshold = tree_.threshold[node]
                 threshold = "{1:.{0}f}".format(decimals, threshold)
                 export_text.report += right_child_fmt.format(indent,
