diff --git a/debug_issue.py b/debug_issue.py
new file mode 100644
index 00000000..2c83d0fa
--- /dev/null
+++ b/debug_issue.py
@@ -0,0 +1,50 @@
+import seaborn as sns
+import seaborn.objects as so
+import matplotlib.pyplot as plt
+import matplotlib.ticker as ticker
+
+# Load the penguins dataset and convert body mass to milligrams
+penguins = sns.load_dataset("penguins")
+penguins["body_mass_mg"] = penguins["body_mass_g"] * 1000
+
+# Create the plot with the issue
+plot = (
+    so.Plot(
+        penguins, x="bill_length_mm", y="bill_depth_mm",
+        color="species", pointsize="body_mass_mg",
+    )
+    .add(so.Dot())
+)
+
+# Get the plotter object
+plotter = plot._plot()
+
+# Access the formatter used for the pointsize scale
+scales = plotter._scales
+pointsize_scale = scales["pointsize"]
+
+# Print information about the scale and formatter
+print("Pointsize scale legend:", pointsize_scale._legend)
+print("Pointsize scale values:", pointsize_scale.values)
+
+# Create a ScalarFormatter and check its offset
+formatter = ticker.ScalarFormatter()
+print("\nScalarFormatter offset:", formatter.get_offset())
+
+# Create a plot with large values to trigger offset
+fig, ax = plt.subplots()
+ax.scatter([1, 2, 3], [1e6, 2e6, 3e6])
+ax.xaxis.set_major_formatter(formatter)
+ax.yaxis.set_major_formatter(formatter)
+
+# Force redraw to compute offsets
+fig.canvas.draw()
+
+print("\nX axis offset:", ax.xaxis.get_major_formatter().get_offset())
+print("Y axis offset:", ax.yaxis.get_major_formatter().get_offset())
+print("X axis tick labels:", ax.xaxis.get_major_formatter().format_ticks([1e6, 2e6, 3e6]))
+print("Y axis tick labels:", ax.yaxis.get_major_formatter().format_ticks([1e6, 2e6, 3e6]))
+
+# Save the plot to a file
+plot.save("legend_issue_debug.png")
+print("\nPlot saved to legend_issue_debug.png")
\ No newline at end of file
diff --git a/fix_scales.py b/fix_scales.py
new file mode 100644
index 00000000..e73bd7d8
--- /dev/null
+++ b/fix_scales.py
@@ -0,0 +1,36 @@
+with open('seaborn/_core/scales.py', 'r') as f:
+    content = f.read()
+
+# Replace the problematic line with a better implementation
+new_code = '''# Get the offset from the formatter and apply it to the labels if needed
+            offset = axis.major.formatter.get_offset()
+            if offset and isinstance(offset, (int, float)):
+                # Create formatted labels with the offset
+                from matplotlib.ticker import ScalarFormatter
+                if isinstance(axis.major.formatter, ScalarFormatter):
+                    # Format the original values with the offset
+                    formatted_labels = []
+                    for val in locs:
+                        scaled_val = val / offset
+                        offset_exp = int(np.log10(abs(offset)))
+                        formatted_val = f"{scaled_val:.1g}e{offset_exp}"
+                        formatted_labels.append(formatted_val)
+                    labels = formatted_labels'''
+
+old_code = '''# Get the offset from the formatter and apply it to the labels if needed
+            offset = axis.major.formatter.get_offset()
+            if offset and isinstance(offset, (int, float)):
+                # Create formatted labels with the offset
+                from matplotlib.ticker import ScalarFormatter
+                if isinstance(axis.major.formatter, ScalarFormatter):
+                    # Format the original values with the offset
+                    formatted_labels = []
+                    for val in locs:
+                        formatted_val = f"{val / offset:.1g}Ã—10^{int(np.log10(abs(offset)))}"
+                        formatted_labels.append(formatted_val)
+                    labels = formatted_labels'''
+
+content = content.replace(old_code, new_code)
+
+with open('seaborn/_core/scales.py', 'w') as f:
+    f.write(content)
diff --git a/legend_issue.png b/legend_issue.png
new file mode 100644
index 00000000..cb527350
Binary files /dev/null and b/legend_issue.png differ
diff --git a/legend_issue_debug.png b/legend_issue_debug.png
new file mode 100644
index 00000000..cb527350
Binary files /dev/null and b/legend_issue_debug.png differ
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..4ab297cf
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,20 @@
+import seaborn as sns
+import seaborn.objects as so
+import matplotlib.pyplot as plt
+
+# Load the penguins dataset and convert body mass to milligrams
+penguins = sns.load_dataset("penguins")
+penguins["body_mass_mg"] = penguins["body_mass_g"] * 1000
+
+# Create the plot with the issue
+plot = (
+    so.Plot(
+        penguins, x="bill_length_mm", y="bill_depth_mm",
+        color="species", pointsize="body_mass_mg",
+    )
+    .add(so.Dot())
+)
+
+# Save the plot to a file
+plot.save("legend_issue.png")
+print("Plot saved to legend_issue.png")
\ No newline at end of file
diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py
index 55874bf2..1a7c3054 100644
--- a/seaborn/_core/scales.py
+++ b/seaborn/_core/scales.py
@@ -379,6 +379,22 @@ class ContinuousBase(Scale):
             locs = axis.major.locator()
             locs = locs[(vmin <= locs) & (locs <= vmax)]
             labels = axis.major.formatter.format_ticks(locs)
+
+            # Get the offset from the formatter and apply it to the labels if needed
+            offset = axis.major.formatter.get_offset()
+            if offset and isinstance(offset, (int, float)):
+                # Create formatted labels with the offset
+                from matplotlib.ticker import ScalarFormatter
+                if isinstance(axis.major.formatter, ScalarFormatter):
+                    # Format the original values with the offset
+                    formatted_labels = []
+                    for val in locs:
+                        scaled_val = val / offset
+                        offset_exp = int(np.log10(abs(offset)))
+                        formatted_val = f"{scaled_val:.1g}e{offset_exp}"
+                        formatted_labels.append(formatted_val)
+                    labels = formatted_labels
+
             new._legend = list(locs), list(labels)
 
         return new
diff --git a/verify_fix.py b/verify_fix.py
new file mode 100644
index 00000000..c6455716
--- /dev/null
+++ b/verify_fix.py
@@ -0,0 +1,27 @@
+import seaborn as sns
+import seaborn.objects as so
+import matplotlib.pyplot as plt
+import numpy as np
+
+# Load the penguins dataset and convert body mass to milligrams
+penguins = sns.load_dataset("penguins")
+penguins["body_mass_mg"] = penguins["body_mass_g"] * 1000
+
+# Create the plot with the issue
+plot = (
+    so.Plot(
+        penguins, x="bill_length_mm", y="bill_depth_mm",
+        color="species", pointsize="body_mass_mg",
+    )
+    .add(so.Dot())
+)
+
+# Save the plot to a file
+plot.save("legend_fixed.png")
+print("Plot saved to legend_fixed.png")
+
+# Get the plotter object to check the legend values
+plotter = plot._plot()
+scales = plotter._scales
+pointsize_scale = scales["pointsize"]
+print("\nFixed pointsize scale legend:", pointsize_scale._legend)
\ No newline at end of file
