diff --git a/test_readonly_password_hash.py b/test_readonly_password_hash.py
new file mode 100644
index 0000000000..0ab6262c2f
--- /dev/null
+++ b/test_readonly_password_hash.py
@@ -0,0 +1,47 @@
+import unittest
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        SECRET_KEY='fake-key',
+    )
+    django.setup()
+
+from django import forms
+from django.contrib.auth.forms import ReadOnlyPasswordHashField, UserChangeForm
+from django.contrib.auth.models import User
+from django.test import override_settings, TestCase
+
+class TestReadOnlyPasswordHashField(TestCase):
+    """Test the ReadOnlyPasswordHashField behavior."""
+
+    def test_readonly_password_hash_field_not_disabled_by_default(self):
+        """Test that ReadOnlyPasswordHashField is not disabled by default."""
+        field = ReadOnlyPasswordHashField()
+        self.assertFalse(field.disabled)
+
+    def test_user_change_form_clean_password(self):
+        """Test that UserChangeForm's clean_password method returns initial value."""
+        user = User.objects.create_user(username='testuser', password='testpassword')
+        form = UserChangeForm(instance=user)
+
+        # Test that clean_password returns the initial value
+        self.assertIn('password', form.initial)
+        clean_password = form.clean_password()
+        self.assertEqual(clean_password, form.initial['password'])
+
+if __name__ == '__main__':
+    unittest.main()
\ No newline at end of file
