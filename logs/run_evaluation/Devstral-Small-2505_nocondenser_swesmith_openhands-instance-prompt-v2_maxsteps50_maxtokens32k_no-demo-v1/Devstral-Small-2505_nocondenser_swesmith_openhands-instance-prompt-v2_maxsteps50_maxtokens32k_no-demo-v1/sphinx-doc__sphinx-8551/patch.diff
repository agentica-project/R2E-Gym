diff --git a/setup.py b/setup.py
index 8d40de1a8..03f325278 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py
index 79d7e4f46..92e167151 100644
--- a/sphinx/domains/python.py
+++ b/sphinx/domains/python.py
@@ -1315,6 +1315,21 @@ class PythonDomain(Domain):
         else:
             return make_refnode(builder, fromdocname, obj[0], obj[1], contnode, name)
 
+    def process_field_xref(self, pnode: pending_xref) -> None:
+        """Set the current module and class context for field xrefs.
+
+        This ensures that unqualified names in :type: and :rtype: fields
+        are resolved correctly based on the current module context.
+        """
+        # Get the current module from the environment
+        if hasattr(pnode, 'document') and pnode.document and hasattr(pnode.document, 'settings'):
+            env = pnode.document.settings.env
+            if env and hasattr(env, 'ref_context'):
+                # Set the module context from the environment
+                modname = env.ref_context.get('py:module')
+                if modname:
+                    pnode['py:module'] = modname
+
     def resolve_any_xref(self, env: BuildEnvironment, fromdocname: str, builder: Builder,
                          target: str, node: pending_xref, contnode: Element
                          ) -> List[Tuple[str, Element]]:
diff --git a/test_type_rtype_xref.py b/test_type_rtype_xref.py
new file mode 100755
index 000000000..1894532b2
--- /dev/null
+++ b/test_type_rtype_xref.py
@@ -0,0 +1,99 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+import tempfile
+import shutil
+from pathlib import Path
+
+# Create a temporary directory for the test
+test_dir = Path(tempfile.mkdtemp())
+print(f"Created test directory: {test_dir}")
+
+try:
+    # Create a simple Sphinx project structure
+    project_dir = test_dir / "test_project"
+    project_dir.mkdir()
+
+    # Create conf.py
+    with open(project_dir / "conf.py", "w") as f:
+        f.write("""
+extensions = []
+""")
+
+    # Create index.rst
+    with open(project_dir / "index.rst", "w") as f:
+        f.write("""
+.. py:class:: mod.A
+.. py:class:: mod.submod.A
+
+.. py:function:: f()
+
+    - :py:class:`mod.A`
+    - :py:class:`mod.submod.A`
+
+    :param mod.A a:
+    :param mod.submod.A b:
+    :rtype: mod.A
+    :rtype: mod.submod.A
+
+.. py:currentmodule:: mod
+
+.. py:function:: f()
+
+    - :py:class:`A`
+    - :py:class:`mod.A`
+    - :py:class:`mod.submod.A`
+
+    :param A a:
+    :param mod.A b:
+    :param mod.submod.A c:
+    :rtype: A
+    :rtype: mod.A
+    :rtype: mod.submod.A
+
+.. py:currentmodule:: mod.submod
+
+.. py:function:: f()
+
+    - :py:class:`A`
+    - :py:class:`mod.A`
+    - :py:class:`mod.submod.A`
+
+    :param A a: BUG: links to mod.A instead of mod.submod.A
+    :param mod.A b:
+    :param mod.submod.A c:
+    :rtype: A
+    :rtype: mod.A
+    :rtype: mod.submod.A
+""")
+
+    # Run Sphinx-build to process the file
+    cmd = f"cd {project_dir} && python -m sphinx -M html . _build"
+    print(f"Running command: {cmd}")
+    import subprocess
+    process = subprocess.Popen(cmd, shell=True, stderr=subprocess.PIPE, stdout=subprocess.PIPE)
+    stdout, stderr = process.communicate()
+    exit_code = process.returncode
+
+    stderr_str = stderr.decode('utf-8')
+    stdout_str = stdout.decode('utf-8')
+
+    print(f"STDOUT: {stdout_str}")
+    print(f"STDERR: {stderr_str}")
+
+    if exit_code != 0:
+        print(f"Sphinx build failed with exit code {exit_code}")
+        sys.exit(1)
+
+    # Check for warnings in the output
+    # Capture warnings from stderr
+    if "more than one target found for cross-reference 'A'" in stderr_str:
+        print("✗ Test failed: Found ambiguous reference warnings")
+    else:
+        print("✓ Test passed: No ambiguous reference warnings found")
+
+finally:
+    # Clean up
+    shutil.rmtree(test_dir)
+    print(f"Removed test directory: {test_dir}")
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index dbb705a3a..9f4fc3a32 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
