diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py
index b8efb9f881..d139714e0e 100644
--- a/django/utils/autoreload.py
+++ b/django/utils/autoreload.py
@@ -221,8 +221,21 @@ def get_child_arguments():
     py_script = Path(sys.argv[0])
 
     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]
-    if py_script == django_main_path:
-        # The server was started with `python -m django runserver`.
+
+    # Check if Python was started with -m module_name
+    main_module = sys.modules.get('__main__')
+    if main_module and hasattr(main_module, '__spec__') and main_module.__spec__ is not None:
+        # Python was started with -m module_name if __main__.__spec__.parent is not empty
+        # and not None (which would indicate a directory or zipfile entry point)
+        if main_module.__spec__.parent:
+            # The server was started with `python -m pkg runserver`.
+            args += ['-m', main_module.__spec__.parent]
+            args += sys.argv[1:]
+        else:
+            # Not started with -m or with a directory/zipfile
+            args += sys.argv
+    elif py_script == django_main_path:
+        # Fallback for compatibility: The server was started with `python -m django runserver`.
         args += ['-m', 'django']
         args += sys.argv[1:]
     elif not py_script.exists():
diff --git a/simple_test.py b/simple_test.py
new file mode 100644
index 0000000000..a449975c94
--- /dev/null
+++ b/simple_test.py
@@ -0,0 +1,47 @@
+import sys
+import os
+from pathlib import Path
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, '/testbed')
+
+# Import the function we want to test
+from django.utils.autoreload import get_child_arguments
+
+# Create a mock module with a spec for django
+class MockSpec:
+    def __init__(self, parent=None):
+        self.parent = parent
+
+class MockModule:
+    def __init__(self, spec=None, file=None):
+        self.__spec__ = spec
+        self.__file__ = file
+
+# Test Case 1: python -m django runserver
+print("Test Case 1: python -m django runserver")
+django_spec = MockSpec(parent='django')
+django_main = MockModule(spec=django_spec, file=__file__)
+sys.argv = [__file__, 'runserver']
+sys.modules['__main__'] = django_main
+print(f"__main__.__spec__.parent: {sys.modules['__main__'].__spec__.parent}")
+print(f"get_child_arguments() returns: {get_child_arguments()}")
+print()
+
+# Test Case 2: python -m other_package runserver
+print("Test Case 2: python -m other_package runserver")
+other_spec = MockSpec(parent='other_package')
+other_main = MockModule(spec=other_spec, file=__file__)
+sys.argv = [__file__, 'runserver']
+sys.modules['__main__'] = other_main
+print(f"__main__.__spec__.parent: {sys.modules['__main__'].__spec__.parent}")
+print(f"get_child_arguments() returns: {get_child_arguments()}")
+print()
+
+# Test Case 3: python script.py runserver (no -m)
+print("Test Case 3: python script.py runserver (no -m)")
+no_spec_main = MockModule(file=__file__)  # No __spec__ attribute
+sys.argv = [__file__, 'runserver']
+sys.modules['__main__'] = no_spec_main
+print(f"__main__ has __spec__: {hasattr(sys.modules['__main__'], '__spec__')}")
+print(f"get_child_arguments() returns: {get_child_arguments()}")
\ No newline at end of file
diff --git a/test_autoreload_issue.py b/test_autoreload_issue.py
new file mode 100644
index 0000000000..1a9e20f61e
--- /dev/null
+++ b/test_autoreload_issue.py
@@ -0,0 +1,29 @@
+import sys
+import os
+from pathlib import Path
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, '/testbed')
+
+# Import the function we want to test
+from django.utils.autoreload import get_child_arguments
+
+# Print current behavior
+print("Current implementation behavior:")
+print(f"__main__.__spec__: {sys.modules['__main__'].__spec__ if hasattr(sys.modules['__main__'], '__spec__') else None}")
+print(f"__main__.__file__: {sys.modules['__main__'].__file__ if hasattr(sys.modules['__main__'], '__file__') else None}")
+print(f"sys.argv: {sys.argv}")
+print(f"get_child_arguments() returns: {get_child_arguments()}")
+
+# Create a simple test package to demonstrate the issue
+os.makedirs('/testbed/test_pkg', exist_ok=True)
+with open('/testbed/test_pkg/__init__.py', 'w') as f:
+    f.write('')
+with open('/testbed/test_pkg/__main__.py', 'w') as f:
+    f.write('''
+import sys
+print("Running test_pkg __main__")
+''')
+
+print("\nTo test the issue, run:")
+print("python -m test_pkg")
\ No newline at end of file
diff --git a/test_get_child_arguments.py b/test_get_child_arguments.py
new file mode 100644
index 0000000000..6405803a8a
--- /dev/null
+++ b/test_get_child_arguments.py
@@ -0,0 +1,68 @@
+import sys
+import os
+import unittest
+from unittest import mock
+from pathlib import Path
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, '/testbed')
+
+# Import the function we want to test
+from django.utils.autoreload import get_child_arguments
+
+class TestGetChildArguments(unittest.TestCase):
+    def test_run_as_django_module(self):
+        """Test that get_child_arguments works when run as python -m django"""
+        with mock.patch('sys.argv', ['django/__main__.py', 'runserver']):
+            with mock.patch('django.__main__.__file__', 'django/__main__.py'):
+                with mock.patch('django.utils.autoreload.Path') as MockPath:
+                    mock_path = mock.MagicMock()
+                    MockPath.return_value = mock_path
+                    mock_path.__eq__.return_value = True  # Make it equal to django_main_path
+                    result = get_child_arguments()
+                    expected = [sys.executable, '-m', 'django', 'runserver']
+                    self.assertEqual(result, expected)
+
+    def test_run_as_other_module(self):
+        """Test that get_child_arguments works when run as python -m other_package"""
+        # Create a mock __main__ module with __spec__.parent = 'other_package'
+        mock_spec = mock.MagicMock()
+        mock_spec.parent = 'other_package'
+
+        mock_main = mock.MagicMock()
+        mock_main.__spec__ = mock_spec
+        mock_main.__file__ = 'other_package/__main__.py'
+
+        # Mock sys.modules['__main__'] and sys.argv
+        with mock.patch.dict('sys.modules', {'__main__': mock_main}):
+            with mock.patch('sys.argv', ['other_package/__main__.py', 'runserver']):
+                with mock.patch('django.utils.autoreload.Path') as MockPath:
+                    mock_path = mock.MagicMock()
+                    MockPath.return_value = mock_path
+                    mock_path.__eq__.return_value = False  # Not equal to django_main_path
+                    result = get_child_arguments()
+                    expected = [sys.executable, '-m', 'other_package', 'runserver']
+                    self.assertEqual(result, expected)
+
+    def test_run_as_script(self):
+        """Test that get_child_arguments works when run as a script"""
+        # Create a mock __main__ module without __spec__
+        mock_main = mock.MagicMock()
+        mock_main.__spec__ = None
+        mock_main.__file__ = __file__
+
+        # Mock sys.modules['__main__'] and sys.argv
+        with mock.patch.dict('sys.modules', {'__main__': mock_main}):
+            with mock.patch('sys.argv', [__file__, 'runserver']):
+                with mock.patch('django.utils.autoreload.Path') as MockPath:
+                    mock_path = mock.MagicMock()
+                    MockPath.return_value = mock_path
+                    mock_path.exists.return_value = True
+                    # Also mock django.__main__.__file__ to avoid the fallback path
+                    with mock.patch('django.__main__.__file__', '/nonexistent/path'):
+                        result = get_child_arguments()
+                        expected = [sys.executable, __file__, 'runserver']
+                        self.assertEqual(result, expected)
+
+if __name__ == '__main__':
+    unittest.main()
\ No newline at end of file
diff --git a/test_pkg/__init__.py b/test_pkg/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_pkg/__main__.py b/test_pkg/__main__.py
new file mode 100644
index 0000000000..72a2ed06e6
--- /dev/null
+++ b/test_pkg/__main__.py
@@ -0,0 +1,3 @@
+
+import sys
+print("Running test_pkg __main__")
diff --git a/testpkg/__init__.py b/testpkg/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testpkg/__main__.py b/testpkg/__main__.py
new file mode 100644
index 0000000000..6c1369f628
--- /dev/null
+++ b/testpkg/__main__.py
@@ -0,0 +1,27 @@
+import sys
+import os
+import time
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, '/testbed')
+
+# Import the autoreload module
+from django.utils.autoreload import get_child_arguments
+
+print(f"Running testpkg __main__")
+print(f"sys.argv: {sys.argv}")
+print(f"get_child_arguments(): {get_child_arguments()}")
+
+# Create a file to watch
+with open('/testbed/testpkg/watched_file.txt', 'w') as f:
+    f.write('Initial content')
+
+print("Created watched_file.txt")
+print("Waiting for changes...")
+
+# Wait for file changes
+try:
+    while True:
+        time.sleep(1)
+except KeyboardInterrupt:
+    print("Exiting...")
\ No newline at end of file
diff --git a/testpkg/watched_file.txt b/testpkg/watched_file.txt
new file mode 100644
index 0000000000..c217c63469
--- /dev/null
+++ b/testpkg/watched_file.txt
@@ -0,0 +1 @@
+Modified content
diff --git a/verify_fix.py b/verify_fix.py
new file mode 100644
index 0000000000..6b949d02bb
--- /dev/null
+++ b/verify_fix.py
@@ -0,0 +1,48 @@
+import sys
+import os
+from pathlib import Path
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, '/testbed')
+
+# Import the function we want to test
+from django.utils.autoreload import get_child_arguments
+
+# Create a simple mock module class
+class MockModule:
+    def __init__(self, spec=None, file=None):
+        self.__spec__ = spec
+        self.__file__ = file
+
+# Create mock spec objects
+class MockSpec:
+    def __init__(self, parent=None):
+        self.parent = parent
+
+# Test Case 1: python -m django runserver
+print("Test Case 1: python -m django runserver")
+django_spec = MockSpec(parent='django')
+django_main = MockModule(spec=django_spec, file=__file__)
+sys.argv = [__file__, 'runserver']
+sys.modules['__main__'] = django_main
+print(f"__main__.__spec__.parent: {sys.modules['__main__'].__spec__.parent}")
+print(f"get_child_arguments() returns: {get_child_arguments()}")
+print()
+
+# Test Case 2: python -m other_package runserver
+print("Test Case 2: python -m other_package runserver")
+other_spec = MockSpec(parent='other_package')
+other_main = MockModule(spec=other_spec, file=__file__)
+sys.argv = [__file__, 'runserver']
+sys.modules['__main__'] = other_main
+print(f"__main__.__spec__.parent: {sys.modules['__main__'].__spec__.parent}")
+print(f"get_child_arguments() returns: {get_child_arguments()}")
+print()
+
+# Test Case 3: python script.py runserver (no -m)
+print("Test Case 3: python script.py runserver (no -m)")
+no_spec_main = MockModule(file=__file__)  # No __spec__ attribute
+sys.argv = [__file__, 'runserver']
+sys.modules['__main__'] = no_spec_main
+print(f"__main__ has __spec__: {hasattr(sys.modules['__main__'], '__spec__')}")
+print(f"get_child_arguments() returns: {get_child_arguments()}")
\ No newline at end of file
