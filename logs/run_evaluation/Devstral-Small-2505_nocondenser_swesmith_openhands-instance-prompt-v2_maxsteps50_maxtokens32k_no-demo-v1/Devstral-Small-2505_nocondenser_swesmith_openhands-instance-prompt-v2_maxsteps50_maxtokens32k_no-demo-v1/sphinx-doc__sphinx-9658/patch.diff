diff --git a/setup.py b/setup.py
index 2b4504101..d865b8b37 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 6):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp>=2.0.0',
-    'sphinxcontrib-serializinghtml>=1.1.5',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp>=2.0.0,<=2.0.4',
+    'sphinxcontrib-serializinghtml>=1.1.5,<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.14,<0.18',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/test_documenter.py b/test_documenter.py
new file mode 100644
index 000000000..cadf57d15
--- /dev/null
+++ b/test_documenter.py
@@ -0,0 +1,72 @@
+import sys
+import os
+from unittest.mock import Mock, patch
+
+# Import the necessary modules from Sphinx
+sys.path.insert(0, os.path.abspath('/testbed'))
+from sphinx.ext.autodoc.mock import _MockObject, _MockModule, mock
+from sphinx.util.typing import restify
+
+# Create a mock class to simulate a mocked class from an external library
+class MockClass:
+    __module__ = 'mock_module'
+    __name__ = 'MockClass'
+    __qualname__ = 'MockClass'
+
+    def __init__(self):
+        pass
+
+# Create a class that inherits from the mock class
+class DeepKernel(MockClass):
+    pass
+
+# Test the restify function with the mock class
+result = restify(MockClass)
+print(f"Result of restify(MockClass): {result}")
+
+# Create a mock documenter
+documenter = Mock()
+documenter.add_line = Mock()
+
+# Call the method that formats base classes
+base_classes = [restify(cls) for cls in DeepKernel.__bases__]
+print(f"Base classes: {base_classes}")
+
+# Simulate the output
+documenter.add_line('', 'sourcename')
+documenter.add_line('   Bases: %s' % ', '.join(base_classes), 'sourcename')
+
+# Print the output
+print("Documenter output:")
+for call in documenter.add_line.call_args_list:
+    print(f"  {call[0][0]}")
+
+# Now let's try to reproduce the issue with a truncated base class name
+class TruncatedMockClass:
+    __module__ = 'mock_module'
+    __name__ = 'MockClass'
+    # Note: No __qualname__ attribute
+
+    def __init__(self):
+        pass
+
+# Create a class that inherits from the truncated mock class
+class TruncatedKernel(TruncatedMockClass):
+    pass
+
+# Test the restify function with the truncated mock class
+result = restify(TruncatedMockClass)
+print(f"\nResult of restify(TruncatedMockClass): {result}")
+
+# Call the method that formats base classes
+base_classes = [restify(cls) for cls in TruncatedKernel.__bases__]
+print(f"Base classes: {base_classes}")
+
+# Simulate the output
+documenter.add_line('', 'sourcename')
+documenter.add_line('   Bases: %s' % ', '.join(base_classes), 'sourcename')
+
+# Print the output
+print("Documenter output:")
+for call in documenter.add_line.call_args_list:
+    print(f"  {call[0][0]}")
\ No newline at end of file
diff --git a/test_mocked_base.py b/test_mocked_base.py
new file mode 100644
index 000000000..76a77bc13
--- /dev/null
+++ b/test_mocked_base.py
@@ -0,0 +1,39 @@
+import sys
+import os
+from unittest.mock import Mock
+
+# Create a mock class to simulate a mocked class from an external library
+class MockModule:
+    __module__ = 'torch.nn'
+    __name__ = 'Module'
+    __qualname__ = 'Module'
+
+    def __init__(self):
+        pass
+
+# Create a class that inherits from the mocked class
+class DeepKernel(MockModule):
+    pass
+
+# Import the restify function from Sphinx
+sys.path.insert(0, os.path.abspath('/testbed'))
+from sphinx.util.typing import restify
+
+# Test the restify function with the mocked base class
+result = restify(MockModule)
+print(f"Result of restify(MockModule): {result}")
+
+# Test with a real class
+class RealModule:
+    __module__ = 'real'
+    __name__ = 'RealClass'
+    __qualname__ = 'RealClass'
+
+    def __init__(self):
+        pass
+
+class RealInherited(RealModule):
+    pass
+
+result = restify(RealModule)
+print(f"Result of restify(RealModule): {result}")
\ No newline at end of file
diff --git a/test_mocked_base_with_mock.py b/test_mocked_base_with_mock.py
new file mode 100644
index 000000000..8149890a4
--- /dev/null
+++ b/test_mocked_base_with_mock.py
@@ -0,0 +1,22 @@
+import sys
+import os
+from unittest.mock import Mock
+
+# Import the mock module from Sphinx
+sys.path.insert(0, os.path.abspath('/testbed'))
+from sphinx.ext.autodoc.mock import _MockObject, _MockModule
+from sphinx.util.typing import restify
+
+# Create a mock module to simulate a mocked class from an external library
+mock_module = _MockModule('torch.nn')
+mock_obj = mock_module.Module
+mock_obj.__qualname__ = 'Module'
+mock_obj.__name__ = 'Module'
+
+# Test the restify function with the mocked base class
+result = restify(mock_obj)
+print(f"Result of restify(mock_obj): {result}")
+
+# Check if the object is considered a mock
+from sphinx.ext.autodoc.mock import ismock
+print(f"Is mock: {ismock(mock_obj)}")
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index b6a67fd85..483f2df92 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
