diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py
index 61be31d890..c8a933e46e 100644
--- a/django/contrib/admin/sites.py
+++ b/django/contrib/admin/sites.py
@@ -453,7 +453,7 @@ class AdminSite:
                 pass
             else:
                 if getattr(match.func, "should_append_slash", True):
-                    return HttpResponsePermanentRedirect("%s/" % request.path)
+                    return HttpResponsePermanentRedirect(request.get_full_path() + "/")
         raise Http404
 
     def _build_app_dict(self, request, label=None):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..adcc859cfe
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,68 @@
+import sys
+import os
+import django
+from django.conf import settings
+from django.http import HttpRequest, HttpResponsePermanentRedirect
+from django.contrib.admin.sites import AdminSite
+
+# Set up Django settings
+settings.configure(
+    DEBUG=True,
+    APPEND_SLASH=True,
+    ROOT_URLCONF='',
+    INSTALLED_APPS=[
+        'django.contrib.admin',
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    MIDDLEWARE_CLASSES=(),
+)
+
+# Initialize Django
+django.setup()
+
+# Create a mock request
+class MockRequest(HttpRequest):
+    def __init__(self, path, query_string=''):
+        super().__init__()
+        self.path = path
+        self.path_info = path
+        self.META = {'QUERY_STRING': query_string}
+        self.urlconf = None
+
+# Create a simplified version of AdminSite.catch_all_view for testing
+def catch_all_view(request, url):
+    if getattr(settings, 'APPEND_SLASH', False) and not url.endswith("/"):
+        try:
+            # Simplified resolution logic
+            return HttpResponsePermanentRedirect(request.get_full_path() + "/")
+        except Exception:
+            pass
+    raise Exception("404 Not Found")
+
+# Test the catch_all_view method
+def test_catch_all_view():
+    # Test with query string
+    request = MockRequest('/admin/auth/foo', 'id=123')
+    try:
+        response = catch_all_view(request, 'admin/auth/foo')
+        print(f"Redirect URL with query string: {response['Location']}")
+        if '?id=123' not in response['Location']:
+            print("ISSUE CONFIRMED: Query string is dropped in the redirect!")
+            return False
+        else:
+            print("Query string is preserved in the redirect.")
+            return True
+    except Exception as e:
+        print(f"Exception: {e}")
+        return False
+
+if __name__ == '__main__':
+    success = test_catch_all_view()
+    sys.exit(0 if success else 1)
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..38913b666b
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,63 @@
+import os
+
+DEBUG = True
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'django.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'django.core.wsgi.get_wsgi_application()'
+
+APPEND_SLASH = True
+
+SECRET_KEY = 'not-very-secret'
+
+PASSWORD_HASHERS = [
+    'django.contrib.auth.hashers.MD5PasswordHasher',
+]
+
+AUTH_PASSWORD_VALIDATORS = []
+
+LOGGING_CONFIG = None
+
+DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'
\ No newline at end of file
