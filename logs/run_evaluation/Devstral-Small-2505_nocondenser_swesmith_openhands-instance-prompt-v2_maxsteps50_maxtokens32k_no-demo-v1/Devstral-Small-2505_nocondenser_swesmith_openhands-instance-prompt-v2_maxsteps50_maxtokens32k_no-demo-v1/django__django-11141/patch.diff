diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py
index 8c308621d2..d075fcc5df 100644
--- a/django/db/migrations/loader.py
+++ b/django/db/migrations/loader.py
@@ -84,11 +84,6 @@ class MigrationLoader:
                     continue
                 raise
             else:
-                # Empty directories are namespaces.
-                # getattr() needed on PY36 and older (replace w/attribute access).
-                if getattr(module, '__file__', None) is None:
-                    self.unmigrated_apps.add(app_config.label)
-                    continue
                 # Module is not a package (e.g. migrations.py).
                 if not hasattr(module, '__path__'):
                     self.unmigrated_apps.add(app_config.label)
diff --git a/django/db/migrations/questioner.py b/django/db/migrations/questioner.py
index 47a3052c80..e625a210bc 100644
--- a/django/db/migrations/questioner.py
+++ b/django/db/migrations/questioner.py
@@ -44,10 +44,8 @@ class MigrationQuestioner:
         except ImportError:
             return self.defaults.get("ask_initial", False)
         else:
-            # getattr() needed on PY36 and older (replace with attribute access).
-            if getattr(migrations_module, "__file__", None):
-                filenames = os.listdir(os.path.dirname(migrations_module.__file__))
-            elif hasattr(migrations_module, "__path__"):
+            # Handle both regular packages and namespace packages
+            if hasattr(migrations_module, "__path__"):
                 if len(migrations_module.__path__) > 1:
                     return False
                 filenames = os.listdir(list(migrations_module.__path__)[0])
diff --git a/test_namespace_migrations.py b/test_namespace_migrations.py
new file mode 100644
index 0000000000..600a4c6b5e
--- /dev/null
+++ b/test_namespace_migrations.py
@@ -0,0 +1,92 @@
+import os
+import sys
+import tempfile
+import shutil
+from pathlib import Path
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, '/testbed')
+
+import django
+from django.conf import settings
+
+# Configure Django settings
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    }
+)
+
+# Initialize Django
+django.setup()
+
+from django.apps import apps
+from django.db.migrations.loader import MigrationLoader
+from django.db import connection
+
+# Create a temporary app with a namespace migrations directory
+temp_dir = tempfile.mkdtemp()
+try:
+    # Create a simple app structure
+    app_dir = os.path.join(temp_dir, 'testapp')
+    os.makedirs(app_dir)
+
+    # Create the app's __init__.py
+    with open(os.path.join(app_dir, '__init__.py'), 'w') as f:
+        f.write('')
+
+    # Create a namespace migrations directory (no __init__.py)
+    migrations_dir = os.path.join(app_dir, 'migrations')
+    os.makedirs(migrations_dir)
+
+    # Create a migration file
+    with open(os.path.join(migrations_dir, '0001_initial.py'), 'w') as f:
+        f.write('''
+from django.db import migrations
+
+class Migration(migrations.Migration):
+    dependencies = []
+    operations = []
+''')
+
+    # Add the temp directory to Python path
+    sys.path.insert(0, temp_dir)
+
+    # Create a simple app config
+    class TestAppConfig:
+        label = 'testapp'
+        name = 'testapp'
+
+        @property
+        def path(self):
+            return app_dir
+
+        @property
+        def migrations_module(self):
+            return None
+
+    # Register the app
+    apps.all_models['testapp'] = {}
+    apps.app_configs['testapp'] = TestAppConfig()
+
+    # Try to load migrations
+    print("Loading migrations...")
+    loader = MigrationLoader(connection, load=False)
+    loader.load_disk()
+
+    # Check if our app was marked as migrated
+    if 'testapp' in loader.migrated_apps:
+        print("SUCCESS: Namespace migrations directory was loaded correctly")
+    else:
+        print("FAILURE: Namespace migrations directory was not loaded")
+
+finally:
+    # Clean up
+    shutil.rmtree(temp_dir)
\ No newline at end of file
