diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..b1779490cd
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,25 @@
+from sympy.utilities.autowrap import autowrap
+from sympy import MatrixSymbol
+import numpy as np
+
+# Case 1: Array argument not used in expression (should fail)
+print("Case 1: Array argument not used in expression")
+x = MatrixSymbol('x', 2, 1)
+expr = 1.0
+f = autowrap(expr, args=(x,), backend='cython')
+try:
+    result = f(np.array([[1.0, 2.0]]))
+    print(f"Result: {result}")
+except Exception as e:
+    print(f"Error: {e}")
+
+# Case 2: Array argument used in expression (should work)
+print("\nCase 2: Array argument used in expression")
+x = MatrixSymbol('x', 2, 1)
+expr = x[0,0]
+f = autowrap(expr, args=(x,), backend='cython')
+try:
+    result = f(np.array([[1.0, 2.0]]))
+    print(f"Result: {result}")
+except Exception as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/simple_test.py b/simple_test.py
new file mode 100644
index 0000000000..f0052ca317
--- /dev/null
+++ b/simple_test.py
@@ -0,0 +1,13 @@
+from sympy.utilities.autowrap import autowrap
+from sympy import MatrixSymbol
+import numpy as np
+
+# Case 1: Array argument not used in expression (should fail)
+x = MatrixSymbol('x', 2, 1)
+expr = 1.0
+f = autowrap(expr, args=(x,), backend='cython')
+try:
+    result = f(np.array([[1.0, 2.0]]))
+    print(f"Result: {result}")
+except Exception as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py
index bd6afb12d1..b07f7e6ff4 100644
--- a/sympy/utilities/autowrap.py
+++ b/sympy/utilities/autowrap.py
@@ -445,6 +445,8 @@ def _prototype_arg(self, arg):
             self._need_numpy = True
             ndim = len(arg.dimensions)
             mtype = np_types[t]
+            # For array arguments, we need to ensure they're treated as pointers
+            # in the C function signature
             return mat_dec.format(mtype=mtype, ndim=ndim, name=self._string_var(arg.name))
         else:
             return "%s %s" % (t, self._string_var(arg.name))
diff --git a/sympy/utilities/codegen.py b/sympy/utilities/codegen.py
index f0befb2bd7..0cd7e0f310 100644
--- a/sympy/utilities/codegen.py
+++ b/sympy/utilities/codegen.py
@@ -910,6 +910,8 @@ def get_prototype(self, routine):
         type_args = []
         for arg in routine.arguments:
             name = self.printer.doprint(arg.name)
+            # Always treat array arguments (those with dimensions) as pointers
+            # regardless of whether they appear in the expression or not
             if arg.dimensions or isinstance(arg, ResultBase):
                 type_args.append((arg.get_datatype('C'), "*%s" % name))
             else:
diff --git a/verify_issue.py b/verify_issue.py
new file mode 100644
index 0000000000..95e69e6fd5
--- /dev/null
+++ b/verify_issue.py
@@ -0,0 +1,50 @@
+"""
+This script verifies the issue with autowrap and Cython backend when array arguments
+don't appear in the wrapped expression.
+"""
+from sympy.utilities.autowrap import autowrap
+from sympy import MatrixSymbol, Symbol
+import numpy as np
+
+def test_case(name, expr, args):
+    """Test a specific case and print the results"""
+    print(f"\n=== {name} ===")
+    print(f"Expression: {expr}")
+    print(f"Arguments: {args}")
+
+    try:
+        # Generate the wrapped function
+        f = autowrap(expr, args=args, backend='cython')
+
+        # Create test input
+        if isinstance(args[0], MatrixSymbol):
+            test_input = np.array([[1.0, 2.0]])
+        else:
+            test_input = 1.0  # For scalar arguments
+
+        # Call the function
+        result = f(test_input)
+        print(f"Result: {result}")
+        return True
+    except Exception as e:
+        print(f"Error: {e}")
+        return False
+
+# Test cases
+print("Testing autowrap with Cython backend...")
+
+# Case 1: Matrix argument not used in expression (should fail with current implementation)
+x = MatrixSymbol('x', 2, 1)
+test_case("Matrix argument not used in expression", 1.0, [x])
+
+# Case 2: Matrix argument used in expression (should work)
+x = MatrixSymbol('x', 2, 1)
+test_case("Matrix argument used in expression", x[0,0], [x])
+
+# Case 3: Scalar argument not used in expression (should work)
+s = Symbol('s')
+test_case("Scalar argument not used in expression", 1.0, [s])
+
+# Case 4: Scalar argument used in expression (should work)
+s = Symbol('s')
+test_case("Scalar argument used in expression", s, [s])
\ No newline at end of file
