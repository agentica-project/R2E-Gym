diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..8920c44997
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,35 @@
+import sympy
+from sympy.printing.mathml import mathml
+
+# Test with symbol ending with a number
+x2, y, z = sympy.symbols('x2 y z')
+y = x2*z + x2**3
+mathml_content = sympy.mathml(y, printer='presentation')
+print("MathML with x2:")
+print(mathml_content)
+print()
+
+# Test with regular symbol
+x, y, z = sympy.symbols('x y z')
+y = x*z + x**3
+mathml_content = sympy.mathml(y, printer='presentation')
+print("MathML with x:")
+print(mathml_content)
+
+# Write to HTML file for viewing
+with open('sympy_test.html', 'w') as f:
+    f.write('<html>\n')
+    f.write('<head>\n')
+    f.write('<meta http-equiv="Content-Type" content="text/html; charset=utf-8">\n')
+    f.write('</head>\n')
+    f.write('<body>\n')
+    f.write('<h1>With x2:</h1>\n')
+    f.write('<math>\n')
+    f.write(mathml_content)
+    f.write('\n</math>\n')
+    f.write('<h1>With x:</h1>\n')
+    f.write('<math>\n')
+    f.write(sympy.mathml(y, printer='presentation'))
+    f.write('\n</math>\n')
+    f.write('</body>\n')
+    f.write('</html>\n')
\ No newline at end of file
diff --git a/symbol_test.html b/symbol_test.html
new file mode 100644
index 0000000000..3cd7bdda56
--- /dev/null
+++ b/symbol_test.html
@@ -0,0 +1,13 @@
+<html>
+<head>
+<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
+</head>
+<body>
+<p>x: <math><mi>x</mi></math></p>
+<p>x2: <math><mi>x2</mi></math></p>
+<p>y3: <math><mi>y3</mi></math></p>
+<p>z: <math><mi>z</mi></math></p>
+<p>a1: <math><mi>a1</mi></math></p>
+<p>b22: <math><mi>b22</mi></math></p>
+</body>
+</html>
diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py
index 3f8b8d49e0..5719475096 100644
--- a/sympy/printing/mathml.py
+++ b/sympy/printing/mathml.py
@@ -772,10 +772,23 @@ def translate(s):
             else:
                 return s
 
-        name, supers, subs = split_super_sub(sym.name)
-        name = translate(name)
-        supers = [translate(sup) for sup in supers]
-        subs = [translate(sub) for sub in subs]
+        # Check if the symbol name ends with digits
+        import re
+        name_with_digits_p = re.compile(r'^([a-zA-Z]+)([0-9]+)$')
+        m = name_with_digits_p.match(sym.name)
+
+        # If the symbol name ends with digits, don't split it for MathML presentation
+        if m:
+            # Use the full symbol name as is
+            name = translate(sym.name)
+            supers = []
+            subs = []
+        else:
+            # Use the standard splitting behavior
+            name, supers, subs = split_super_sub(sym.name)
+            name = translate(name)
+            supers = [translate(sup) for sup in supers]
+            subs = [translate(sub) for sub in subs]
 
         mname = self.dom.createElement('mi')
         mname.appendChild(self.dom.createTextNode(name))
diff --git a/sympy_test.html b/sympy_test.html
new file mode 100644
index 0000000000..a2637f2115
--- /dev/null
+++ b/sympy_test.html
@@ -0,0 +1,15 @@
+<html>
+<head>
+<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
+</head>
+<body>
+<h1>With x2:</h1>
+<math>
+<mrow><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mrow><mi>x</mi><mo>&InvisibleTimes;</mo><mi>z</mi></mrow></mrow>
+</math>
+<h1>With x:</h1>
+<math>
+<mrow><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mrow><mi>x</mi><mo>&InvisibleTimes;</mo><mi>z</mi></mrow></mrow>
+</math>
+</body>
+</html>
diff --git a/test_digit_suffix.py b/test_digit_suffix.py
new file mode 100644
index 0000000000..9bbea8fd80
--- /dev/null
+++ b/test_digit_suffix.py
@@ -0,0 +1,26 @@
+import sympy
+from sympy.printing.mathml import mathml
+
+def test_symbols_with_digit_suffix():
+    # Test symbols with digit suffixes
+    x2 = sympy.Symbol('x2')
+    y3 = sympy.Symbol('y3')
+    a1 = sympy.Symbol('a1')
+
+    # Test individual symbols
+    assert mathml(x2, printer='presentation') == '<mi>x2</mi>'
+    assert mathml(y3, printer='presentation') == '<mi>y3</mi>'
+    assert mathml(a1, printer='presentation') == '<mi>a1</mi>'
+
+    # Test in expressions
+    z = sympy.Symbol('z')
+    expr = x2 * z + x2**3
+    mathml_output = mathml(expr, printer='presentation')
+    # The actual output may vary slightly in formatting, so we just check that x2 is rendered correctly
+    assert '<mi>x2</mi>' in mathml_output
+    assert '<msub><mi>x</mi><mi>2</mi></msub>' not in mathml_output  # Make sure it's not using subscript
+
+    print("All tests passed!")
+
+if __name__ == "__main__":
+    test_symbols_with_digit_suffix()
\ No newline at end of file
diff --git a/test_symbol_rendering.py b/test_symbol_rendering.py
new file mode 100644
index 0000000000..d3b20773c1
--- /dev/null
+++ b/test_symbol_rendering.py
@@ -0,0 +1,36 @@
+import sympy
+from sympy.printing.conventions import split_super_sub
+from sympy.printing.mathml import mathml
+
+# Test different symbol names
+symbols = ['x', 'x2', 'y3', 'z', 'a1', 'b22']
+
+# Print how each symbol is split
+print("Symbol splitting:")
+for sym_name in symbols:
+    sym = sympy.Symbol(sym_name)
+    name, supers, subs = split_super_sub(sym.name)
+    print(f"{sym_name}: name='{name}', supers={supers}, subs={subs}")
+
+# Generate MathML for each symbol
+print("\nMathML output:")
+for sym_name in symbols:
+    sym = sympy.Symbol(sym_name)
+    mathml_output = mathml(sym, printer='presentation')
+    print(f"{sym_name}: {mathml_output}")
+
+# Create HTML file for visual testing
+with open('symbol_test.html', 'w') as f:
+    f.write('<html>\n')
+    f.write('<head>\n')
+    f.write('<meta http-equiv="Content-Type" content="text/html; charset=utf-8">\n')
+    f.write('</head>\n')
+    f.write('<body>\n')
+
+    for sym_name in symbols:
+        sym = sympy.Symbol(sym_name)
+        mathml_output = mathml(sym, printer='presentation')
+        f.write(f'<p>{sym_name}: <math>{mathml_output}</math></p>\n')
+
+    f.write('</body>\n')
+    f.write('</html>\n')
\ No newline at end of file
