diff --git a/classes.dot b/classes.dot
new file mode 100644
index 000000000..2987bca2a
--- /dev/null
+++ b/classes.dot
@@ -0,0 +1,5 @@
+digraph "classes" {
+charset="utf-8"
+rankdir=BT
+"0" [label="{C|a : NoneType\l|method(b, c)\l}", shape="record"];
+}
diff --git a/classes_comprehensive_test.dot b/classes_comprehensive_test.dot
new file mode 100644
index 000000000..fd4c05987
--- /dev/null
+++ b/classes_comprehensive_test.dot
@@ -0,0 +1,6 @@
+digraph "classes_comprehensive_test" {
+charset="utf-8"
+rankdir=BT
+"0" [label="{A|\l|}", shape="record"];
+"1" [label="{B|a\lb : int\l|method1(c, d)\lmethod2(e, f)\lmethod3()\lmethod4(g)\l}", shape="record"];
+}
diff --git a/classes_test_project.dot b/classes_test_project.dot
new file mode 100644
index 000000000..29450a736
--- /dev/null
+++ b/classes_test_project.dot
@@ -0,0 +1,5 @@
+digraph "classes_test_project" {
+charset="utf-8"
+rankdir=BT
+"0" [label="{C|a : NoneType\l|method(b, c)\l}", shape="record"];
+}
diff --git a/pylint/pyreverse/inspector.py b/pylint/pyreverse/inspector.py
index 8fa122022..a45b17e2d 100644
--- a/pylint/pyreverse/inspector.py
+++ b/pylint/pyreverse/inspector.py
@@ -177,6 +177,7 @@ class Linker(IdGeneratorMixIn, utils.LocalsVisitor):
 
         * set the locals_type mapping
         * optionally tag the node with a unique id
+        * extract type hints from arguments
         """
         if hasattr(node, "locals_type"):
             return
@@ -184,6 +185,13 @@ class Linker(IdGeneratorMixIn, utils.LocalsVisitor):
         if self.tag:
             node.uid = self.generate_id()
 
+        # Process arguments to extract type hints
+        if hasattr(node, 'args') and node.args:
+            for arg in node.args.args:
+                if hasattr(arg, 'annotation') and arg.annotation:
+                    # Store the annotation on the argument for later use
+                    arg._type_hint = arg.annotation
+
     link_project = visit_project
     link_module = visit_module
     link_class = visit_classdef
diff --git a/pylint/pyreverse/writer.py b/pylint/pyreverse/writer.py
index 0d80bb9ca..41df7f33e 100644
--- a/pylint/pyreverse/writer.py
+++ b/pylint/pyreverse/writer.py
@@ -135,7 +135,23 @@ class DotWriter(DiagramWriter):
             label = r"{}|{}\l|".format(label, r"\l".join(obj.attrs))
             for func in obj.methods:
                 if func.args.args:
-                    args = [arg.name for arg in func.args.args if arg.name != "self"]
+                    args = []
+                    for arg in func.args.args:
+                        if arg.name != "self":
+                            # Get the type hint if available
+                            type_hint = ""
+                            if hasattr(arg, 'annotation') and arg.annotation:
+                                # Try to get a readable name for the type
+                                try:
+                                    type_name = str(arg.annotation.as_string())
+                                    # Clean up the type name
+                                    if type_name.startswith("typing."):
+                                        type_name = type_name[7:]
+                                    type_hint = f": {type_name}"
+                                except Exception:
+                                    # Fallback to the default behavior if there's an error
+                                    pass
+                            args.append(f"{arg.name}{type_hint}")
                 else:
                     args = []
                 label = r"{}{}({})\l".format(label, func.name, ", ".join(args))
@@ -199,7 +215,32 @@ class VCGWriter(DiagramWriter):
             shape = "box"
         if not self.config.only_classnames:
             attrs = obj.attrs
-            methods = [func.name for func in obj.methods]
+            # Extract methods with type hints
+            methods_with_args = []
+            for func in obj.methods:
+                func_name = func.name
+                if func.args.args:
+                    args = []
+                    for arg in func.args.args:
+                        if arg.name != "self":
+                            # Get the type hint if available
+                            type_hint = ""
+                            if hasattr(arg, 'annotation') and arg.annotation:
+                                # Try to get a readable name for the type
+                                try:
+                                    type_name = str(arg.annotation.as_string())
+                                    # Clean up the type name
+                                    if type_name.startswith("typing."):
+                                        type_name = type_name[7:]
+                                    type_hint = f": {type_name}"
+                                except Exception:
+                                    # Fallback to the default behavior if there's an error
+                                    pass
+                            args.append(f"{arg.name}{type_hint}")
+                    func_name = f"{func_name}({', '.join(args)})"
+                methods_with_args.append(func_name)
+
+            methods = methods_with_args
             # box width for UML like diagram
             maxlen = max(len(name) for name in [obj.title] + methods + attrs)
             line = "_" * (maxlen + 2)
@@ -208,8 +249,8 @@ class VCGWriter(DiagramWriter):
                 label = fr"{label}\n\f08{attr}"
             if attrs:
                 label = fr"{label}\n\f{line}"
-            for func in methods:
-                label = fr"{label}\n\f10{func}()"
+            for func_name in methods:
+                label = fr"{label}\n\f10{func_name}"
         return dict(label=label, shape=shape)
 
     def close_graph(self):
diff --git a/test_type_hints.py b/test_type_hints.py
new file mode 100644
index 000000000..6b39e835a
--- /dev/null
+++ b/test_type_hints.py
@@ -0,0 +1,6 @@
+class C(object):
+    def __init__(self, a: str = None):
+        self.a = a
+
+    def method(self, b: int, c: list = None) -> None:
+        pass
\ No newline at end of file
diff --git a/test_type_hints_comprehensive.py b/test_type_hints_comprehensive.py
new file mode 100644
index 000000000..c44a85340
--- /dev/null
+++ b/test_type_hints_comprehensive.py
@@ -0,0 +1,21 @@
+from typing import List, Dict, Optional, Union, Any
+
+class A:
+    pass
+
+class B:
+    def __init__(self, a: str, b: int = 0):
+        self.a = a
+        self.b = b
+
+    def method1(self, c: List[str], d: Dict[str, int] = None) -> None:
+        pass
+
+    def method2(self, e: Optional[A] = None, f: Union[B, str] = None) -> B:
+        return B("test", 42)
+
+    def method3(self, *args: int, **kwargs: str) -> None:
+        pass
+
+    def method4(self, g: Any) -> None:
+        pass
\ No newline at end of file
