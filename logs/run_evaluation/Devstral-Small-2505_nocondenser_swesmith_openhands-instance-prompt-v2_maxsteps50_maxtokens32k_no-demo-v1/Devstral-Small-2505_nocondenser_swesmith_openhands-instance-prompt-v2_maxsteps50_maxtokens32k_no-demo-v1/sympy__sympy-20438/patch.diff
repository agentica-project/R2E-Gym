diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..dbacd9ad72
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,23 @@
+from sympy import FiniteSet, ProductSet, Eq
+
+# Create the sets as described in the issue
+a = FiniteSet(1, 2)
+b = ProductSet(a, a)
+c = FiniteSet((1, 1), (1, 2), (2, 1), (2, 2))
+
+# Check intersection symmetry
+print("Intersection symmetry:", b.intersection(c) == c.intersection(b))
+
+# Check subset relationships
+print("b is subset of c:", b.is_subset(c))
+print("c is subset of b:", c.is_subset(b))
+
+# Try to simplify equality
+try:
+    result = Eq(b, c).simplify()
+    print("Equality simplification:", result)
+except Exception as e:
+    print("Error in equality simplification:", type(e).__name__, "-", str(e))
+
+# Check rewrite
+print("b rewritten as FiniteSet:", b.rewrite(FiniteSet))
\ No newline at end of file
diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py
index 3c4aa86e36..e93ed306d5 100644
--- a/sympy/sets/sets.py
+++ b/sympy/sets/sets.py
@@ -865,6 +865,49 @@ def __len__(self):
     def __bool__(self):
         return all([bool(s) for s in self.sets])
 
+    def _eval_is_subset(self, other):
+        """
+        Check if self is a subset of other.
+
+        If other is a FiniteSet, check if all elements of self are in other.
+        """
+        if isinstance(other, FiniteSet):
+            # For ProductSet(a, a) and FiniteSet((1, 1), (1, 2), ...)
+            # Check if all elements of the FiniteSet are in the ProductSet
+            if all(other._contains(e) for e in self):
+                return True
+
+            # Check if the ProductSet is a proper subset of the FiniteSet
+            # by converting the ProductSet to a FiniteSet and checking subset
+            try:
+                self_as_finite = self.rewrite(FiniteSet)
+                if self_as_finite is not None:
+                    return self_as_finite.is_subset(other)
+            except (NotImplementedError, TypeError):
+                pass
+
+            return False
+
+    def _eval_rewrite_as_FiniteSet(self, *args, **kwargs):
+        """
+        Rewrite ProductSet as a FiniteSet.
+
+        This is only possible when all component sets are FiniteSets
+        and the resulting FiniteSet would have a reasonable number of elements.
+        """
+        if not all(s.is_FiniteSet for s in self.sets):
+            return None
+
+        # If any of the component sets are too large, don't attempt the conversion
+        max_size = 1000  # Arbitrary limit to avoid excessive computation
+        if any(len(s) > max_size for s in self.sets):
+            return None
+
+        # Generate the Cartesian product as a FiniteSet
+        from itertools import product
+        elements = list(product(*[s.args for s in self.sets]))
+        return FiniteSet(*elements)
+
 
 class Interval(Set, EvalfMixin):
     """
