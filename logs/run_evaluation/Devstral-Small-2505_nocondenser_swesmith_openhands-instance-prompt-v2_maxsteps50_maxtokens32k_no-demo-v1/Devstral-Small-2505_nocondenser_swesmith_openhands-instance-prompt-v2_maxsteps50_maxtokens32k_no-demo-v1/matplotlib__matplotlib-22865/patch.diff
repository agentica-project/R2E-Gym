diff --git a/after_fix.png b/after_fix.png
new file mode 100644
index 0000000000..471aa16069
Binary files /dev/null and b/after_fix.png differ
diff --git a/after_fix_vertical.png b/after_fix_vertical.png
new file mode 100644
index 0000000000..46bee4dbcc
Binary files /dev/null and b/after_fix_vertical.png differ
diff --git a/before_fix.png b/before_fix.png
new file mode 100644
index 0000000000..9b28d7e742
Binary files /dev/null and b/before_fix.png differ
diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py
index c59b0ac815..2299c1725b 100644
--- a/lib/matplotlib/colorbar.py
+++ b/lib/matplotlib/colorbar.py
@@ -651,8 +651,15 @@ class Colorbar:
             if not self.drawedges:
                 if len(self._y) >= self.n_rasterize:
                     self.solids.set_rasterized(True)
-        self.dividers.set_segments(
-            np.dstack([X, Y])[1:-1] if self.drawedges else [])
+        if self.drawedges:
+            segments = np.dstack([X, Y])
+            # When extend='both', include the first and last segments
+            if getattr(self, 'extend', 'neither') == 'both':
+                self.dividers.set_segments(segments)
+            else:
+                self.dividers.set_segments(segments[1:-1])
+        else:
+            self.dividers.set_segments([])
 
     def _add_solids_patches(self, X, Y, C, mappable):
         hatches = mappable.hatches * len(C)  # Have enough hatches.
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..1ced7ac945
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,40 @@
+import matplotlib as mpl
+import numpy as np
+import matplotlib.pyplot as plt
+from matplotlib.colors import from_levels_and_colors
+
+def create_colorbar_with_extend():
+    my_cmap = mpl.cm.viridis
+    bounds = np.arange(10)
+    nb_colors = len(bounds) + 1
+    colors = my_cmap(np.linspace(100, 255, nb_colors).astype(int))
+    my_cmap, my_norm = from_levels_and_colors(bounds, colors, extend='both')
+
+    plt.figure(figsize=(5, 1))
+    ax = plt.subplot(111)
+    cbar = mpl.colorbar.ColorbarBase(ax, cmap=my_cmap, norm=my_norm,
+                                    orientation='horizontal',
+                                    drawedges=True)
+    plt.subplots_adjust(left=0.05, bottom=0.4, right=0.95, top=0.9)
+    plt.savefig('after_fix.png')
+    plt.close()
+
+def create_colorbar_with_extend_vertical():
+    my_cmap = mpl.cm.viridis
+    bounds = np.arange(10)
+    nb_colors = len(bounds) + 1
+    colors = my_cmap(np.linspace(100, 255, nb_colors).astype(int))
+    my_cmap, my_norm = from_levels_and_colors(bounds, colors, extend='both')
+
+    plt.figure(figsize=(1, 5))
+    ax = plt.subplot(111)
+    cbar = mpl.colorbar.ColorbarBase(ax, cmap=my_cmap, norm=my_norm,
+                                    orientation='vertical',
+                                    drawedges=True)
+    plt.subplots_adjust(left=0.4, bottom=0.05, right=0.95, top=0.95)
+    plt.savefig('after_fix_vertical.png')
+    plt.close()
+
+if __name__ == "__main__":
+    create_colorbar_with_extend()
+    create_colorbar_with_extend_vertical()
\ No newline at end of file
