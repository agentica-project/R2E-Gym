diff --git a/db.sqlite3 b/db.sqlite3
new file mode 100644
index 0000000000..232a478cb9
Binary files /dev/null and b/db.sqlite3 differ
diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index 04e430a42e..86ec290aae 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -129,6 +129,11 @@ class SQLCompiler:
             # Skip References to the select clause, as all expressions in the
             # select clause are already part of the group by.
             if not is_ref:
+                if expr.contains_aggregate:
+                    continue
+                # Skip Random function in order_by to prevent it from being added to GROUP BY
+                if isinstance(expr.expression, Random):
+                    continue
                 expressions.extend(expr.get_group_by_cols())
         having_group_by = self.having.get_group_by_cols() if self.having else ()
         for expr in having_group_by:
diff --git a/manage.py b/manage.py
new file mode 100755
index 0000000000..496934c6bb
--- /dev/null
+++ b/manage.py
@@ -0,0 +1,15 @@
+#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == '__main__':
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..7e0f624eea
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,46 @@
+import os
+import sys
+import django
+from django.db.models import Count
+
+# Set up Django
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+django.setup()
+
+# Import models from the app
+from test_app.models import Thing, Related
+
+# Create test data
+def create_test_data():
+    # Clear existing data
+    Related.objects.all().delete()
+    Thing.objects.all().delete()
+
+    # Create new data
+    t = Thing.objects.create()
+    rs = [Related.objects.create(thing=t) for _ in range(2)]
+    return t, rs
+
+def test_aggregation_with_ordering():
+    t, rs = create_test_data()
+
+    # Test 1: Order by the count (should work correctly)
+    print("Test 1: Order by count")
+    qs1 = Thing.objects.annotate(rc=Count('related')).order_by('rc').values('id', 'rc')
+    print(qs1.query)
+    print(list(qs1))
+
+    # Test 2: Order by related (should work correctly)
+    print("\nTest 2: Order by related")
+    qs2 = Thing.objects.annotate(rc=Count('related')).order_by('related').values('id', 'rc')
+    print(qs2.query)
+    print(list(qs2))
+
+    # Test 3: Order by random (should not break aggregation)
+    print("\nTest 3: Order by random")
+    qs3 = Thing.objects.annotate(rc=Count('related')).order_by('?').values('id', 'rc')
+    print(qs3.query)
+    print(list(qs3))
+
+if __name__ == "__main__":
+    test_aggregation_with_ordering()
\ No newline at end of file
diff --git a/test_app/__init__.py b/test_app/__init__.py
new file mode 100644
index 0000000000..334d1c3084
--- /dev/null
+++ b/test_app/__init__.py
@@ -0,0 +1,3 @@
+from .apps import TestAppConfig
+
+default_app_config = 'test_app.apps.TestAppConfig'
diff --git a/test_app/apps.py b/test_app/apps.py
new file mode 100644
index 0000000000..d15f13972a
--- /dev/null
+++ b/test_app/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class TestAppConfig(AppConfig):
+    name = 'test_app'
diff --git a/test_app/migrations/0001_initial.py b/test_app/migrations/0001_initial.py
new file mode 100644
index 0000000000..aee6413634
--- /dev/null
+++ b/test_app/migrations/0001_initial.py
@@ -0,0 +1,28 @@
+# Generated by Django 3.2 on 2025-05-25 01:54
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Thing',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Related',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('thing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test_app.thing')),
+            ],
+        ),
+    ]
diff --git a/test_app/migrations/__init__.py b/test_app/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_app/models.py b/test_app/models.py
new file mode 100644
index 0000000000..b79911168d
--- /dev/null
+++ b/test_app/models.py
@@ -0,0 +1,7 @@
+from django.db import models
+
+class Thing(models.Model):
+    pass
+
+class Related(models.Model):
+    thing = models.ForeignKey(Thing, on_delete=models.CASCADE)
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..38a243ff8b
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,26 @@
+import os
+
+BASE_DIR = os.path.dirname(os.path.abspath(__file__))
+
+DEBUG = True
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'test_app',
+]
+
+SECRET_KEY = 'fake-key'
+
+PASSWORD_RESET_TIMEOUT = 259200  # 3 days
+
+TIME_ZONE = 'UTC'
+
+USE_TZ = True
\ No newline at end of file
