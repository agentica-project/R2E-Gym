diff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py
index b6594b043b..6828980733 100644
--- a/django/db/models/functions/datetime.py
+++ b/django/db/models/functions/datetime.py
@@ -292,7 +292,7 @@ class TruncDate(TruncBase):
     def as_sql(self, compiler, connection):
         # Cast to date rather than truncate to date.
         lhs, lhs_params = compiler.compile(self.lhs)
-        tzname = timezone.get_current_timezone_name() if settings.USE_TZ else None
+        tzname = self.get_tzname()
         sql = connection.ops.datetime_cast_date_sql(lhs, tzname)
         return sql, lhs_params
 
@@ -305,7 +305,7 @@ class TruncTime(TruncBase):
     def as_sql(self, compiler, connection):
         # Cast to time rather than truncate to time.
         lhs, lhs_params = compiler.compile(self.lhs)
-        tzname = timezone.get_current_timezone_name() if settings.USE_TZ else None
+        tzname = self.get_tzname()
         sql = connection.ops.datetime_cast_time_sql(lhs, tzname)
         return sql, lhs_params
 
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..429ad76b21
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,74 @@
+import sys
+import os
+import pytz
+
+# Add the Django module to the path
+sys.path.insert(0, '/testbed')
+
+# Import directly from the Django codebase
+from django.db.models.functions.datetime import TruncDate, TruncTime, TruncBase, TimezoneMixin
+from django.utils import timezone
+from django.conf import settings
+
+# Mock settings
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+    ],
+    USE_TZ=True,
+    TIME_ZONE='UTC',
+)
+
+# Directly examine the issue in the code
+print("Verification of the fix:")
+print("=======================")
+
+# Create instances with custom timezone
+ny_tz = pytz.timezone("America/New_York")
+trunc_date = TruncDate(None, tzinfo=ny_tz)
+trunc_time = TruncTime(None, tzinfo=ny_tz)
+
+# Check if the timezone is properly stored
+print(f"TruncDate.tzinfo: {trunc_date.tzinfo}")
+print(f"TruncTime.tzinfo: {trunc_time.tzinfo}")
+
+# Check if get_tzname() returns the correct timezone name
+print(f"TruncDate.get_tzname(): {trunc_date.get_tzname()}")
+print(f"TruncTime.get_tzname(): {trunc_time.get_tzname()}")
+
+# Check what timezone is actually used in as_sql after the fix
+print("\nAfter the fix, as_sql should use self.get_tzname():")
+print("=================================================")
+
+# For TruncDate, it should now use self.get_tzname()
+print("TruncDate.as_sql now uses: self.get_tzname()")
+print(f"Current timezone name: {timezone.get_current_timezone_name()}")
+print(f"America/New_York timezone name: {timezone._get_timezone_name(ny_tz)}")
+
+# For TruncTime, it should now use self.get_tzname()
+print("TruncTime.as_sql now uses: self.get_tzname()")
+print(f"Current timezone name: {timezone.get_current_timezone_name()}")
+print(f"America/New_York timezone name: {timezone._get_timezone_name(ny_tz)}")
+
+# Verify the actual code in the as_sql methods
+print("\nVerifying the actual code in the as_sql methods:")
+print("================================================")
+print("TruncDate.as_sql code:")
+print("--------------------")
+with open('/testbed/django/db/models/functions/datetime.py', 'r') as f:
+    for line in f:
+        if 'class TruncDate' in line or 'def as_sql' in line or 'tzname =' in line:
+            print(line.rstrip())
+
+print("\nTruncTime.as_sql code:")
+print("--------------------")
+with open('/testbed/django/db/models/functions/datetime.py', 'r') as f:
+    for line in f:
+        if 'class TruncTime' in line or 'def as_sql' in line or 'tzname =' in line:
+            print(line.rstrip())
+
+print("\nVerification complete:")
+print("=====================")
+print("1. Both TruncDate and TruncTime now use self.get_tzname() in their as_sql methods")
+print("2. This ensures that the tzinfo parameter is properly respected")
+print("The fix is working correctly!")
\ No newline at end of file
diff --git a/test_trunc_tzinfo.py b/test_trunc_tzinfo.py
new file mode 100644
index 0000000000..080fe81eaf
--- /dev/null
+++ b/test_trunc_tzinfo.py
@@ -0,0 +1,66 @@
+import sys
+import os
+import pytz
+from datetime import datetime
+
+# Add the Django module to the path
+sys.path.insert(0, '/testbed')
+
+# Import directly from the Django codebase
+from django.db.models.functions.datetime import TruncDate, TruncTime
+from django.utils import timezone
+from django.conf import settings
+
+# Mock settings
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+    ],
+    USE_TZ=True,
+    TIME_ZONE='UTC',
+)
+
+def test_trunc_date_tzinfo():
+    """Test that TruncDate respects the tzinfo parameter."""
+    # Create a datetime in UTC
+    dt = datetime(2023, 10, 5, 12, 0, 0, tzinfo=pytz.UTC)
+
+    # Create a TruncDate with the default timezone (UTC)
+    trunc_date_default = TruncDate(None, tzinfo=pytz.UTC)
+    # Get the timezone name that would be used
+    tzname_default = trunc_date_default.get_tzname()
+    assert tzname_default == 'UTC'
+
+    # Create a TruncDate with a custom timezone (America/New_York)
+    ny_tz = pytz.timezone("America/New_York")
+    trunc_date_custom = TruncDate(None, tzinfo=ny_tz)
+    # Get the timezone name that would be used
+    tzname_custom = trunc_date_custom.get_tzname()
+    assert tzname_custom == 'America/New_York'
+
+    print("TruncDate tzinfo test passed!")
+
+def test_trunc_time_tzinfo():
+    """Test that TruncTime respects the tzinfo parameter."""
+    # Create a datetime in UTC
+    dt = datetime(2023, 10, 5, 12, 0, 0, tzinfo=pytz.UTC)
+
+    # Create a TruncTime with the default timezone (UTC)
+    trunc_time_default = TruncTime(None, tzinfo=pytz.UTC)
+    # Get the timezone name that would be used
+    tzname_default = trunc_time_default.get_tzname()
+    assert tzname_default == 'UTC'
+
+    # Create a TruncTime with a custom timezone (America/New_York)
+    ny_tz = pytz.timezone("America/New_York")
+    trunc_time_custom = TruncTime(None, tzinfo=ny_tz)
+    # Get the timezone name that would be used
+    tzname_custom = trunc_time_custom.get_tzname()
+    assert tzname_custom == 'America/New_York'
+
+    print("TruncTime tzinfo test passed!")
+
+if __name__ == "__main__":
+    test_trunc_date_tzinfo()
+    test_trunc_time_tzinfo()
+    print("All tests passed!")
\ No newline at end of file
