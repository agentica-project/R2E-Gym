diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py
index 2e97d9064b..f257e947ba 100644
--- a/django/core/management/commands/makemigrations.py
+++ b/django/core/management/commands/makemigrations.py
@@ -248,12 +248,12 @@ class Command(BaseCommand):
                 else:
                     self.log("No changes detected")
         else:
+            if check_changes:
+                sys.exit(1)
             if self.update:
                 self.write_to_last_migration_files(changes)
             else:
                 self.write_migration_files(changes)
-            if check_changes:
-                sys.exit(1)
 
     def write_to_last_migration_files(self, changes):
         loader = MigrationLoader(connections[DEFAULT_DB_ALIAS])
diff --git a/test_makemigrations_check.py b/test_makemigrations_check.py
new file mode 100755
index 0000000000..714fc8be18
--- /dev/null
+++ b/test_makemigrations_check.py
@@ -0,0 +1,54 @@
+#!/usr/bin/env python
+import os
+import sys
+import tempfile
+import shutil
+from pathlib import Path
+
+# Create a temporary directory for our test project
+temp_dir = tempfile.mkdtemp()
+try:
+    # Create a simple Django project
+    os.chdir(temp_dir)
+    os.system("django-admin startproject testproject")
+    os.chdir("testproject")
+
+    # Create a simple app
+    os.system("python manage.py startapp testapp")
+
+    # Modify the app to have a model
+    with open("testapp/models.py", "w") as f:
+        f.write("""
+from django.db import models
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+""")
+
+    # Run makemigrations to create initial migrations
+    os.system("python manage.py makemigrations testapp")
+
+    # Now modify the model
+    with open("testapp/models.py", "w") as f:
+        f.write("""
+from django.db import models
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    description = models.TextField()  # Added field
+""")
+
+    # Test the current behavior of makemigrations --check
+    print("\nTesting current behavior of makemigrations --check:")
+    os.system("python manage.py makemigrations --check")
+
+    # Check if migration files were created
+    migration_dir = Path("testapp/migrations")
+    migration_files = list(migration_dir.glob("*.py"))
+    print(f"\nMigration files after makemigrations --check: {len(migration_files)}")
+    for file in migration_files:
+        print(f"  - {file.name}")
+
+finally:
+    # Clean up
+    shutil.rmtree(temp_dir)
\ No newline at end of file
diff --git a/verify_fix.py b/verify_fix.py
new file mode 100755
index 0000000000..3bf068a5a0
--- /dev/null
+++ b/verify_fix.py
@@ -0,0 +1,67 @@
+#!/usr/bin/env python
+import os
+import sys
+import tempfile
+import shutil
+from pathlib import Path
+
+# Create a temporary directory for our test project
+temp_dir = tempfile.mkdtemp()
+try:
+    # Create a simple Django project
+    os.chdir(temp_dir)
+    os.system("django-admin startproject testproject")
+    os.chdir("testproject")
+
+    # Create a simple app
+    os.system("python manage.py startapp testapp")
+
+    # Modify the app to have a model
+    with open("testapp/models.py", "w") as f:
+        f.write("""
+from django.db import models
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+""")
+
+    # Run makemigrations to create initial migrations
+    os.system("python manage.py makemigrations testapp")
+
+    # Count initial migration files
+    migration_dir = Path("testapp/migrations")
+    initial_files = set(migration_dir.glob("*.py"))
+
+    # Now modify the model
+    with open("testapp/models.py", "w") as f:
+        f.write("""
+from django.db import models
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    description = models.TextField()  # Added field
+""")
+
+    # Test the fixed behavior of makemigrations --check
+    print("\nTesting fixed behavior of makemigrations --check:")
+    os.system("python manage.py makemigrations --check")
+
+    # Check if migration files were created
+    migration_files = set(migration_dir.glob("*.py"))
+
+    # Compare with initial files to see if any new files were created
+    new_files = migration_files - initial_files
+
+    print(f"\nMigration files after makemigrations --check: {len(migration_files)}")
+    print(f"New migration files created: {len(new_files)}")
+    for file in migration_files:
+        print(f"  - {file.name}")
+
+    if len(new_files) == 0:
+        print("\nSUCCESS: No new migration files were created with --check flag!")
+    else:
+        print("\nFAILURE: New migration files were created with --check flag!")
+
+finally:
+    # Clean up
+    shutil.rmtree(temp_dir)
\ No newline at end of file
