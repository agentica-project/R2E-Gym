diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..8ffe209c22
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,58 @@
+from sympy import *
+from sympy.polys.polyclasses import DMP
+from sympy.polys.domains import EX
+
+x = symbols("x")
+
+# Create a polynomial that will result in a zero polynomial with an unstripped leading 0
+# First create a polynomial with a complicated expression that evaluates to zero
+expr = "1/(x+1) - 1/(x+1)"
+f = Poly(expr, x)
+
+# Now manually create a bad polynomial with an unstripped leading 0
+# This mimics what happens in clear_denoms
+bad_poly = Poly(0, x, domain='EX')
+# Manually modify the representation to have an unstripped leading 0
+bad_poly.rep = DMP([EX(0)], EX, None)
+
+print("bad_poly:", bad_poly)
+print("bad_poly.is_zero:", bad_poly.is_zero)
+print("bad_poly.as_expr():", bad_poly.as_expr())
+print("bad_poly.as_expr().is_zero:", bad_poly.as_expr().is_zero)
+print("bad_poly.rep:", bad_poly.rep)
+
+# Test terms_gcd
+try:
+    print("bad_poly.terms_gcd():", bad_poly.terms_gcd())
+except Exception as e:
+    print("terms_gcd error:", type(e).__name__, e)
+
+# Test primitive
+try:
+    print("bad_poly.primitive():", bad_poly.primitive())
+except Exception as e:
+    print("primitive error:", type(e).__name__, e)
+
+# Compare with a proper zero poly
+zero_poly = Poly(0, x, domain='EX')
+print("\nzero_poly:", zero_poly)
+print("zero_poly.is_zero:", zero_poly.is_zero)
+print("zero_poly.rep:", zero_poly.rep)
+
+# Test terms_gcd
+try:
+    print("bad_poly.terms_gcd():", bad_poly.terms_gcd())
+except Exception as e:
+    print("terms_gcd error:", type(e).__name__, e)
+
+# Test primitive
+try:
+    print("bad_poly.primitive():", bad_poly.primitive())
+except Exception as e:
+    print("primitive error:", type(e).__name__, e)
+
+# Compare with a proper zero poly
+zero_poly = Poly(0, x)
+print("\nzero_poly:", zero_poly)
+print("zero_poly.is_zero:", zero_poly.is_zero)
+print("zero_poly.rep:", zero_poly.rep)
\ No newline at end of file
diff --git a/sympy/polys/densetools.py b/sympy/polys/densetools.py
index f057824642..580359d660 100644
--- a/sympy/polys/densetools.py
+++ b/sympy/polys/densetools.py
@@ -1252,6 +1252,14 @@ def dmp_clear_denoms(f, u, K0, K1=None, convert=False):
     if not K1.is_one(common):
         f = dmp_mul_ground(f, common, u, K0)
 
+    # Check if the polynomial is zero after clearing denominators
+    # and return a properly stripped zero polynomial
+    if dmp_zero_p(f, u):
+        if not convert:
+            return K1.zero, dmp_zero(u)
+        else:
+            return K1.zero, dmp_zero(u)
+
     if not convert:
         return common, f
     else:
diff --git a/verify_fix.py b/verify_fix.py
new file mode 100644
index 0000000000..f956a2901a
--- /dev/null
+++ b/verify_fix.py
@@ -0,0 +1,34 @@
+from sympy import *
+from sympy.polys.polyclasses import DMP
+from sympy.polys.domains import EX
+
+x = symbols("x")
+
+# Create a polynomial that will result in a zero polynomial
+expr = "1/(x+1) - 1/(x+1)"
+f = Poly(expr, x, domain='EX')
+
+coeff, result = f.clear_denoms()
+print("Result polynomial:", result)
+print("Result is_zero:", result.is_zero)
+print("Result as_expr():", result.as_expr())
+print("Result as_expr().is_zero:", result.as_expr().is_zero)
+print("Result rep:", result.rep)
+
+# Test terms_gcd
+try:
+    print("Result terms_gcd():", result.terms_gcd())
+except Exception as e:
+    print("terms_gcd error:", type(e).__name__, e)
+
+# Test primitive
+try:
+    print("Result primitive():", result.primitive())
+except Exception as e:
+    print("primitive error:", type(e).__name__, e)
+
+# Compare with a proper zero poly
+zero_poly = Poly(0, x, domain='EX')
+print("\nzero_poly:", zero_poly)
+print("zero_poly.is_zero:", zero_poly.is_zero)
+print("zero_poly.rep:", zero_poly.rep)
\ No newline at end of file
