diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..72efe5aaa1
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,26 @@
+import inspect
+from sympy import lambdify
+
+# Test with a single-element tuple
+single_tuple_code = inspect.getsource(lambdify([], tuple([1])))
+print("Single-element tuple code:")
+print(single_tuple_code)
+
+# Execute the code in a different way
+exec_globals = {}
+exec(single_tuple_code, exec_globals)
+exec_result = exec_globals['_lambdifygenerated']()
+print("Result type:", type(exec_result))
+print("Result value:", exec_result)
+
+# Test with a multi-element tuple
+multi_tuple_code = inspect.getsource(lambdify([], tuple([1, 2])))
+print("\nMulti-element tuple code:")
+print(multi_tuple_code)
+
+# Execute the code
+exec_globals = {}
+exec(multi_tuple_code, exec_globals)
+exec_result = exec_globals['_lambdifygenerated']()
+print("Result type:", type(exec_result))
+print("Result value:", exec_result)
\ No newline at end of file
diff --git a/sympy/printing/lambdarepr.py b/sympy/printing/lambdarepr.py
index b9227d8d7a..28055a4dc6 100644
--- a/sympy/printing/lambdarepr.py
+++ b/sympy/printing/lambdarepr.py
@@ -24,6 +24,12 @@ class LambdaPrinter(PythonCodePrinter):
     """
     printmethod = "_lambdacode"
 
+    def _print_tuple(self, expr):
+        if len(expr) == 1:
+            return "(%s,)" % self._print(expr[0])
+        else:
+            return "(%s)" % self.reprify(expr, ", ")
+
 
     def _print_And(self, expr):
         result = ['(']
diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py
index da67263b19..27c61436f6 100644
--- a/sympy/utilities/lambdify.py
+++ b/sympy/utilities/lambdify.py
@@ -958,6 +958,9 @@ def _recursive_to_string(doprint, arg):
         if isinstance(arg, list):
             left, right = "[]"
         elif isinstance(arg, tuple):
+            # Special handling for single-element tuples
+            if len(arg) == 1:
+                return "(%s,)" % _recursive_to_string(doprint, arg[0])
             left, right = "()"
         else:
             raise NotImplementedError("unhandled type: %s, %s" % (type(arg), arg))
