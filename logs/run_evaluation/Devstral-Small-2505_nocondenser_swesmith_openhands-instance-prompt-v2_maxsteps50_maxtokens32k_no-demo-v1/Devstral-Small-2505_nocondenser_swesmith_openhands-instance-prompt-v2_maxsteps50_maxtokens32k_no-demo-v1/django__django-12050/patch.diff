diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index ea51912e8b..36b0c55b83 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1059,6 +1059,8 @@ class Query(BaseExpression):
         elif isinstance(value, (list, tuple)):
             # The items of the iterable may be expressions and therefore need
             # to be resolved independently.
+            # Preserve the original type (list or tuple) of the iterable
+            is_list = isinstance(value, list)
             resolved_values = []
             for sub_value in value:
                 if hasattr(sub_value, 'resolve_expression'):
@@ -1073,7 +1075,8 @@ class Query(BaseExpression):
                         ))
                 else:
                     resolved_values.append(sub_value)
-            value = tuple(resolved_values)
+            # Use the same type as the original value
+            value = resolved_values if is_list else tuple(resolved_values)
         return value
 
     def solve_lookup_type(self, lookup):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..9dcf9ef6af
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,52 @@
+from django.db.models.sql.query import Query
+from django.conf import settings
+
+# Configure settings
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+        }
+    }
+)
+
+# Test the issue
+def test_iterable_type_preservation():
+    """Test if iterable types are preserved in resolve_lookup_value."""
+    # Create a Query instance
+    q = Query(None)
+
+    # Test with a list
+    list_value = [1, 2, 3]
+    list_resolved = q.resolve_lookup_value(list_value, can_reuse=None, allow_joins=True, simple_col=False)
+
+    print("=== Testing with list ===")
+    print(f"Original value type: {type(list_value)}")
+    print(f"Resolved value type: {type(list_resolved)}")
+
+    # Check if the type changed
+    if type(list_value) != type(list_resolved):
+        print("ERROR: The value type was changed from list to tuple!")
+    else:
+        print("SUCCESS: The value type was preserved as a list.")
+
+    # Test with a tuple
+    tuple_value = (1, 2, 3)
+    tuple_resolved = q.resolve_lookup_value(tuple_value, can_reuse=None, allow_joins=True, simple_col=False)
+
+    print("\n=== Testing with tuple ===")
+    print(f"Original value type: {type(tuple_value)}")
+    print(f"Resolved value type: {type(tuple_resolved)}")
+
+    # Check if the type changed
+    if type(tuple_value) != type(tuple_resolved):
+        print("ERROR: The value type was changed from tuple to list!")
+    else:
+        print("SUCCESS: The value type was preserved as a tuple.")
+
+if __name__ == "__main__":
+    test_iterable_type_preservation()
\ No newline at end of file
