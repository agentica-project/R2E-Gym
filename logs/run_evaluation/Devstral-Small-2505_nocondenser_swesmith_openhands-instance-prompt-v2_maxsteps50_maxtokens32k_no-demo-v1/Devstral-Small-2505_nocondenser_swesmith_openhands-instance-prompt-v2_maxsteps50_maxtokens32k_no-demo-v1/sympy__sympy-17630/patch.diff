diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..a1c2dba264
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,32 @@
+from sympy import MatrixSymbol, ZeroMatrix, BlockMatrix, block_collapse
+
+# Create a BlockMatrix with ZeroMatrix blocks
+a = MatrixSymbol("a", 2, 2)
+z = ZeroMatrix(2, 2)
+b = BlockMatrix([[a, z], [z, z]])
+
+# Test single multiplication
+print("Single multiplication:")
+result1 = b._blockmul(b)
+print(f"Type of result1.blocks[0, 1]: {type(result1.blocks[0, 1])}")
+print("Result of single multiplication:")
+print(block_collapse(result1))
+
+# Test double multiplication
+print("\nDouble multiplication:")
+try:
+    result2 = result1._blockmul(b)
+    print(f"Type of result2.blocks[0, 1]: {type(result2.blocks[0, 1])}")
+    print("Result of double multiplication:")
+    print(block_collapse(result2))
+except AttributeError as e:
+    print(f"AttributeError: {e}")
+
+# Test triple multiplication
+print("\nTriple multiplication:")
+try:
+    result3 = b._blockmul(b)._blockmul(b)
+    print("Result of triple multiplication:")
+    print(block_collapse(result3))
+except AttributeError as e:
+    print(f"AttributeError: {e}")
\ No newline at end of file
diff --git a/reproduce_issue_fixed.py b/reproduce_issue_fixed.py
new file mode 100644
index 0000000000..d701f3cddd
--- /dev/null
+++ b/reproduce_issue_fixed.py
@@ -0,0 +1,28 @@
+from sympy import MatrixSymbol, ZeroMatrix, BlockMatrix, block_collapse, symbols
+
+# Create a BlockMatrix with ZeroMatrix blocks
+n = symbols('n')
+a = MatrixSymbol("a", n, n)
+z = ZeroMatrix(n, n)
+b = BlockMatrix([[a, z], [z, z]])
+
+print("Original matrix:")
+print(b)
+
+# Test single multiplication
+print("\nSingle multiplication:")
+result1 = b * b
+print(block_collapse(result1))
+
+# Test double multiplication
+print("\nDouble multiplication:")
+result2 = result1 * b
+print(block_collapse(result2))
+
+# Test triple multiplication
+print("\nTriple multiplication:")
+try:
+    result3 = b * b * b
+    print(block_collapse(result3))
+except Exception as e:
+    print(f"Exception: {type(e).__name__}: {e}")
\ No newline at end of file
diff --git a/reproduce_issue_simple.py b/reproduce_issue_simple.py
new file mode 100644
index 0000000000..20f441ef51
--- /dev/null
+++ b/reproduce_issue_simple.py
@@ -0,0 +1,24 @@
+from sympy import MatrixSymbol, ZeroMatrix, BlockMatrix, block_collapse
+
+# Create a BlockMatrix with ZeroMatrix blocks
+a = MatrixSymbol("a", 2, 2)
+z = ZeroMatrix(2, 2)
+b = BlockMatrix([[a, z], [z, z]])
+
+# Test single multiplication
+print("Single multiplication:")
+result1 = b * b
+print(block_collapse(result1))
+
+# Test double multiplication
+print("\nDouble multiplication:")
+result2 = result1 * b
+print(block_collapse(result2))
+
+# Test triple multiplication
+print("\nTriple multiplication:")
+try:
+    result3 = b * b * b
+    print(block_collapse(result3))
+except Exception as e:
+    print(f"Exception: {type(e).__name__}: {e}")
\ No newline at end of file
diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py
index 95302a05ca..7a05263cba 100644
--- a/sympy/matrices/expressions/blockmatrix.py
+++ b/sympy/matrices/expressions/blockmatrix.py
@@ -164,7 +164,43 @@ def structurally_equal(self, other):
     def _blockmul(self, other):
         if (isinstance(other, BlockMatrix) and
                 self.colblocksizes == other.rowblocksizes):
-            return BlockMatrix(self.blocks*other.blocks)
+            # Create a new block matrix with the same structure
+            # but with proper ZeroMatrix objects instead of Zero
+            from sympy import ZeroMatrix
+
+            # Get the block dimensions
+            rows = self.blockshape[0]
+            cols = other.blockshape[1]
+
+            # Create a new block matrix with the same structure
+            new_blocks = []
+            for i in range(rows):
+                row = []
+                for j in range(cols):
+                    # Get the blocks
+                    try:
+                        block1 = self.blocks[i, j]
+                        block2 = other.blocks[i, j]
+
+                        # Handle ZeroMatrix blocks specially to preserve them
+                        if hasattr(block1, 'is_ZeroMatrix') and block1.is_ZeroMatrix:
+                            # If block1 is a ZeroMatrix, the result is a ZeroMatrix
+                            result = ZeroMatrix(block1.rows, block2.cols)
+                        elif hasattr(block2, 'is_ZeroMatrix') and block2.is_ZeroMatrix:
+                            # If block2 is a ZeroMatrix, the result is a ZeroMatrix
+                            result = ZeroMatrix(block1.rows, block2.cols)
+                        else:
+                            # Otherwise, multiply the blocks normally
+                            result = block1 * block2
+                    except (IndexError, ValueError):
+                        # If we can't access the block, use ZeroMatrix
+                        result = ZeroMatrix(self.rowblocksizes[i] if i < len(self.rowblocksizes) else 0,
+                                           other.colblocksizes[j] if j < len(other.colblocksizes) else 0)
+
+                    row.append(result)
+                new_blocks.append(row)
+
+            return BlockMatrix(new_blocks)
 
         return self * other
 
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..d701f3cddd
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,28 @@
+from sympy import MatrixSymbol, ZeroMatrix, BlockMatrix, block_collapse, symbols
+
+# Create a BlockMatrix with ZeroMatrix blocks
+n = symbols('n')
+a = MatrixSymbol("a", n, n)
+z = ZeroMatrix(n, n)
+b = BlockMatrix([[a, z], [z, z]])
+
+print("Original matrix:")
+print(b)
+
+# Test single multiplication
+print("\nSingle multiplication:")
+result1 = b * b
+print(block_collapse(result1))
+
+# Test double multiplication
+print("\nDouble multiplication:")
+result2 = result1 * b
+print(block_collapse(result2))
+
+# Test triple multiplication
+print("\nTriple multiplication:")
+try:
+    result3 = b * b * b
+    print(block_collapse(result3))
+except Exception as e:
+    print(f"Exception: {type(e).__name__}: {e}")
\ No newline at end of file
diff --git a/test_issue_example.py b/test_issue_example.py
new file mode 100644
index 0000000000..de5f7a06dc
--- /dev/null
+++ b/test_issue_example.py
@@ -0,0 +1,30 @@
+from sympy import MatrixSymbol, ZeroMatrix, BlockMatrix, block_collapse
+
+# Create a BlockMatrix with ZeroMatrix blocks as in the issue description
+a = MatrixSymbol("a", 2, 2)
+z = ZeroMatrix(2, 2)
+b = BlockMatrix([[a, z], [z, z]])
+
+# Test single multiplication
+print("Single multiplication:")
+result1 = b * b
+print(block_collapse(result1))
+print("Using _blockmul:")
+result1_b = b._blockmul(b)
+print(block_collapse(result1_b))
+
+# Test double multiplication
+print("\nDouble multiplication:")
+result2 = b * b * b
+print(block_collapse(result2))
+print("Using _blockmul:")
+result2_b = b._blockmul(b)._blockmul(b)
+print(block_collapse(result2_b))
+
+# Test triple multiplication
+print("\nTriple multiplication:")
+try:
+    result3 = b * b * b * b
+    print(block_collapse(result3))
+except Exception as e:
+    print(f"Exception: {type(e).__name__}: {e}")
\ No newline at end of file
