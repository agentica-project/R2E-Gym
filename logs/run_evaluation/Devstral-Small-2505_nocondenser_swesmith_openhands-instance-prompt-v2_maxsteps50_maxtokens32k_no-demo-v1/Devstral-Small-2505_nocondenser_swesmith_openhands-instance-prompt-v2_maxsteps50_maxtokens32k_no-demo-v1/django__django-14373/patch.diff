diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..ad66991607
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,65 @@
+import datetime
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        TIME_ZONE='UTC',
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.utils.dateformat import DateFormat, format
+
+def test_Y_method():
+    test_cases = [
+        (1, "0001"),
+        (9, "0009"),
+        (42, "0042"),
+        (99, "0099"),
+        (100, "0100"),
+        (999, "0999"),
+        (1000, "1000"),
+        (2000, "2000"),
+        (9999, "9999"),
+    ]
+
+    for year, expected in test_cases:
+        df = DateFormat(datetime.datetime(year, 1, 1))
+        result = df.Y()
+        print(f"Year {year} as Y(): {result}")
+        assert result == expected, f"Expected {expected}, got {result}"
+
+    print("All Y() method tests passed!")
+
+def test_format_function():
+    test_cases = [
+        (1, "0001"),
+        (9, "0009"),
+        (42, "0042"),
+        (99, "0099"),
+        (100, "0100"),
+        (999, "0999"),
+        (1000, "1000"),
+        (2000, "2000"),
+        (9999, "9999"),
+    ]
+
+    for year, expected in test_cases:
+        dt = datetime.datetime(year, 1, 1)
+        result = format(dt, 'Y')
+        print(f"Year {year} as format('Y'): {result}")
+        assert result == expected, f"Expected {expected}, got {result}"
+
+    print("All format() function tests passed!")
+
+if __name__ == "__main__":
+    print("Testing Y() method directly:")
+    test_Y_method()
+
+    print("\nTesting format() function with 'Y' format:")
+    test_format_function()
+
+    print("\nAll tests passed successfully!")
\ No newline at end of file
diff --git a/django/utils/dateformat.py b/django/utils/dateformat.py
index 38e89c47bb..7185c6921c 100644
--- a/django/utils/dateformat.py
+++ b/django/utils/dateformat.py
@@ -314,7 +314,7 @@ class DateFormat(TimeFormat):
 
     def Y(self):
         "Year, 4 digits; e.g. '1999'"
-        return self.data.year
+        return '%04d' % self.data.year
 
     def z(self):
         """Day of the year, i.e. 1 to 366."""
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..68aa40dc78
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,26 @@
+import datetime
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        TIME_ZONE='UTC',
+        USE_TZ=True,
+    )
+    django.setup()
+
+from django.utils.dateformat import DateFormat
+
+# Test with a year less than 1000
+year_100 = DateFormat(datetime.datetime(100, 1, 1))
+print(f"Year 100 as Y(): {year_100.Y()}")  # Should be "0100" but is "100"
+
+# Test with a year greater than 1000
+year_2000 = DateFormat(datetime.datetime(2000, 1, 1))
+print(f"Year 2000 as Y(): {year_2000.Y()}")  # Correctly shows "2000"
+
+# Test with a year less than 100
+year_42 = DateFormat(datetime.datetime(42, 1, 1))
+print(f"Year 42 as Y(): {year_42.Y()}")  # Should be "0042" but is "42"
\ No newline at end of file
diff --git a/run_tests.py b/run_tests.py
new file mode 100644
index 0000000000..dc93c88394
--- /dev/null
+++ b/run_tests.py
@@ -0,0 +1,43 @@
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        TIME_ZONE='UTC',
+        USE_TZ=True,
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'django.contrib.sessions',
+            'django.contrib.messages',
+            'django.contrib.staticfiles',
+        ],
+        SECRET_KEY='dummy',
+    )
+    django.setup()
+
+from django.test.utils import get_runner
+from django.test.runner import DiscoverRunner
+
+def run_tests():
+    TestRunner = get_runner(settings)
+    test_runner = TestRunner(verbosity=2, interactive=True)
+    failures = test_runner.run_tests(['tests.utils_tests.test_dateformat'])
+    return failures
+
+if __name__ == '__main__':
+    failures = run_tests()
+    if failures:
+        print(f"Tests failed: {failures}")
+        exit(1)
+    else:
+        print("All tests passed!")
+        exit(0)
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..839b696c5b
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,47 @@
+import os
+
+BASE_DIR = os.path.dirname(os.path.abspath(__file__))
+
+DEBUG = True
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }
+}
+
+TIME_ZONE = 'UTC'
+USE_TZ = True
+
+INSTALLED_APPS = [
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+]
+
+SECRET_KEY = 'dummy'
+
+MIDDLEWARE = []
+
+ROOT_URLCONF = 'urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'wsgi.application'
\ No newline at end of file
