diff --git a/lib/mpl_toolkits/axes_grid1/inset_locator.py b/lib/mpl_toolkits/axes_grid1/inset_locator.py
index 9d35051074..bb7883bf54 100644
--- a/lib/mpl_toolkits/axes_grid1/inset_locator.py
+++ b/lib/mpl_toolkits/axes_grid1/inset_locator.py
@@ -70,6 +70,8 @@ class AnchoredLocatorBase(AnchoredOffsetbox):
 
     def __call__(self, ax, renderer):
         self.axes = ax
+        # Ensure self.figure is set to the axes' figure before calling get_window_extent
+        self.figure = ax.figure
         bbox = self.get_window_extent(renderer)
         px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)
         bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..1c8c07db90
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,50 @@
+import matplotlib.pyplot as plt
+import matplotlib
+from mpl_toolkits.axes_grid1.inset_locator import inset_axes, AnchoredSizeLocator
+
+# Force using the Agg backend to avoid issues with display
+matplotlib.use('Agg')
+
+# Create a figure with subplots
+fig, (ax, ax2) = plt.subplots(1, 2, figsize=[5.5, 2.8])
+
+# Test 1: Directly test the AnchoredSizeLocator with None renderer
+print("Test 1: Testing AnchoredSizeLocator with None renderer")
+try:
+    locator = AnchoredSizeLocator(ax.bbox, 1.3, 0.9, loc='upper right')
+    # Set the figure manually to simulate our fix
+    locator.figure = ax.figure
+    # This should now work with our fix
+    bbox = locator.get_window_extent(None)
+    print("Success: get_window_extent with None renderer worked!")
+except AttributeError as e:
+    print(f"Error: {e}")
+
+# Test 2: Test the inset_axes function
+print("\nTest 2: Testing inset_axes function")
+try:
+    axins = inset_axes(ax, width=1.3, height=0.9)
+    print("Success: inset_axes worked!")
+except Exception as e:
+    print(f"Error: inset_axes failed: {e}")
+
+# Test 3: Test with a more complex scenario
+print("\nTest 3: Testing with a more complex scenario")
+try:
+    # Create a more complex figure with multiple inset axes
+    fig2, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2)
+    inset1 = inset_axes(ax1, width="30%", height="30%", loc='upper right')
+    inset2 = inset_axes(ax2, width="40%", height="40%", loc='lower left')
+    inset3 = inset_axes(ax3, width="25%", height="25%", loc='center')
+    inset4 = inset_axes(ax4, width="50%", height="50%", loc='upper center')
+    print("Success: Complex figure with multiple inset axes worked!")
+
+    # Save the complex figure
+    fig2.savefig('/tmp/complex_test_output.png')
+    print("Complex figure saved to /tmp/complex_test_output.png")
+except Exception as e:
+    print(f"Error: Complex test failed: {e}")
+
+# Save the original figure to verify the basic case works
+fig.savefig('/tmp/test_output.png')
+print("\nBasic figure saved to /tmp/test_output.png")
\ No newline at end of file
