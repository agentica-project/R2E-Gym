diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..7412fb5bf9
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,111 @@
+import os
+import sys
+import json
+from django.conf import settings
+from django.core.management import call_command
+from django.db import models, connection
+
+# Configure settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        },
+        'other': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+)
+
+# Create a simple app with models similar to the issue
+class AuthorManager(models.Manager):
+    def get_by_natural_key(self, name):
+        return self.get(name=name)
+
+class Author(models.Model):
+    name = models.CharField(max_length=255, unique=True)
+
+    objects = AuthorManager()
+
+    def natural_key(self):
+        return (self.name,)
+
+    def __str__(self):
+        return f"{self.id} {self.name}"
+
+class BookManager(models.Manager):
+    def get_by_natural_key(self, title, author):
+        return self.get(title=title, author__name=author)
+
+class Book(models.Model):
+    title = models.CharField(max_length=255)
+    author = models.ForeignKey(Author, models.DO_NOTHING, related_name="books")
+
+    objects = BookManager()
+
+    def natural_key(self):
+        return (self.title,) + self.author.natural_key()
+
+    natural_key.dependencies = ["testbug.Author"]
+
+    class Meta:
+        unique_together = [["title", "author"]]
+
+    def __str__(self):
+        return f"{self.id}: '{self.title}' by {self.author}"
+
+# Set up models
+from django.apps import apps
+apps.populate(models=getattr(sys.modules[__name__], 'models'))
+
+# Create the tables
+connection.cursor().execute("CREATE TABLE django_migrations (id INTEGER PRIMARY KEY, app_label VARCHAR(255), name VARCHAR(255), applied VARCHAR(255))")
+connection.cursor().execute("INSERT INTO django_migrations VALUES (1, 'contenttypes', '0001_initial', '2023-01-01')")
+connection.cursor().execute("INSERT INTO django_migrations VALUES (2, 'auth', '0001_initial', '2023-01-01')")
+connection.cursor().execute("CREATE TABLE testbug_author (id INTEGER PRIMARY KEY, name VARCHAR(255) UNIQUE)")
+connection.cursor().execute("CREATE TABLE testbug_book (id INTEGER PRIMARY KEY, title VARCHAR(255), author_id INTEGER, FOREIGN KEY(author_id) REFERENCES testbug_author(id))")
+
+# Create some data in the default database
+Author.objects.create(name="JR Tolkien")
+Author.objects.create(name="George RR Martin")
+
+author = Author.objects.get(name="JR Tolkien")
+Book.objects.create(title="The Ring", author=author)
+
+# Create fixture data
+fixture_data = [
+    {
+        "model": "testbug.author",
+        "fields": {
+            "name": "JR Tolkien"
+        }
+    },
+    {
+        "model": "testbug.book",
+        "fields": {
+            "title": "The Hobbit",
+            "author": [
+                "JR Tolkien"
+            ]
+        }
+    }
+]
+
+# Try to load the fixture into the other database
+print("Loading fixture into default database...")
+call_command('loaddata', format='json', _io=json.dumps(fixture_data))
+
+print("Loading fixture into other database...")
+try:
+    call_command('loaddata', format='json', database='other', _io=json.dumps(fixture_data))
+    print("Success! The issue is fixed.")
+except Exception as e:
+    print(f"Error: {e}")
+    print("The issue still exists.")
\ No newline at end of file
diff --git a/run_test.py b/run_test.py
new file mode 100644
index 0000000000..d17ed902dc
--- /dev/null
+++ b/run_test.py
@@ -0,0 +1,5 @@
+import test_settings
+from django.core.management import call_command
+
+if __name__ == "__main__":
+    call_command('test_natural_key_issue', 'test_natural_key')
\ No newline at end of file
diff --git a/test_natural_key_issue/__init__.py b/test_natural_key_issue/__init__.py
new file mode 100644
index 0000000000..fcd00aaa71
--- /dev/null
+++ b/test_natural_key_issue/__init__.py
@@ -0,0 +1 @@
+default_app_config = 'test_natural_key_issue.apps.TestNaturalKeyIssueConfig'
\ No newline at end of file
diff --git a/test_natural_key_issue/apps.py b/test_natural_key_issue/apps.py
new file mode 100644
index 0000000000..2086738e7b
--- /dev/null
+++ b/test_natural_key_issue/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class TestNaturalKeyIssueConfig(AppConfig):
+    name = 'test_natural_key_issue'
\ No newline at end of file
diff --git a/test_natural_key_issue/management/__init__.py b/test_natural_key_issue/management/__init__.py
new file mode 100644
index 0000000000..094d68f3cb
--- /dev/null
+++ b/test_natural_key_issue/management/__init__.py
@@ -0,0 +1,3 @@
+from django.utils.module_loading import autodiscover_modules
+
+autodiscover_modules('management')
\ No newline at end of file
diff --git a/test_natural_key_issue/management/commands/__init__.py b/test_natural_key_issue/management/commands/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_natural_key_issue/management/commands/test_natural_key.py b/test_natural_key_issue/management/commands/test_natural_key.py
new file mode 100644
index 0000000000..11dd4dfe85
--- /dev/null
+++ b/test_natural_key_issue/management/commands/test_natural_key.py
@@ -0,0 +1,90 @@
+from django.core.management.base import BaseCommand
+from django.db import models, connections
+import json
+
+class AuthorManager(models.Manager):
+    def get_by_natural_key(self, name):
+        return self.get(name=name)
+
+class Author(models.Model):
+    name = models.CharField(max_length=255, unique=True)
+
+    objects = AuthorManager()
+
+    def natural_key(self):
+        return (self.name,)
+
+    def __str__(self):
+        return f"{self.id} {self.name}"
+
+class BookManager(models.Manager):
+    def get_by_natural_key(self, title, author):
+        return self.get(title=title, author__name=author)
+
+class Book(models.Model):
+    title = models.CharField(max_length=255)
+    author = models.ForeignKey(Author, models.DO_NOTHING, related_name="books")
+
+    objects = BookManager()
+
+    def natural_key(self):
+        return (self.title,) + self.author.natural_key()
+
+    natural_key.dependencies = ["test_natural_key_issue.Author"]
+
+    class Meta:
+        unique_together = [["title", "author"]]
+
+    def __str__(self):
+        return f"{self.id}: '{self.title}' by {self.author}"
+
+class Command(BaseCommand):
+    help = 'Test natural key issue with non-default database'
+
+    def handle(self, *args, **options):
+        # Create tables
+        for db_alias in ['default', 'other']:
+            connection = connections[db_alias]
+            with connection.cursor() as cursor:
+                cursor.execute("CREATE TABLE IF NOT EXISTS test_natural_key_issue_author (id INTEGER PRIMARY KEY, name VARCHAR(255) UNIQUE)")
+                cursor.execute("CREATE TABLE IF NOT EXISTS test_natural_key_issue_book (id INTEGER PRIMARY KEY, title VARCHAR(255), author_id INTEGER, FOREIGN KEY(author_id) REFERENCES test_natural_key_issue_author(id))")
+
+        # Create some data in the default database
+        Author.objects.create(name="JR Tolkien")
+        Author.objects.create(name="George RR Martin")
+
+        author = Author.objects.get(name="JR Tolkien")
+        Book.objects.create(title="The Ring", author=author)
+
+        # Create fixture data
+        fixture_data = [
+            {
+                "model": "test_natural_key_issue.author",
+                "fields": {
+                    "name": "JR Tolkien"
+                }
+            },
+            {
+                "model": "test_natural_key_issue.book",
+                "fields": {
+                    "title": "The Hobbit",
+                    "author": [
+                        "JR Tolkien"
+                    ]
+                }
+            }
+        ]
+
+        # Try to load the fixture into the default database
+        print("Loading fixture into default database...")
+        from django.core.management import call_command
+        call_command('loaddata', format='json', _io=json.dumps(fixture_data))
+
+        # Try to load the fixture into the other database
+        print("Loading fixture into other database...")
+        try:
+            call_command('loaddata', format='json', database='other', _io=json.dumps(fixture_data))
+            print("Success! The issue is fixed.")
+        except Exception as e:
+            print(f"Error: {e}")
+            print("The issue still exists.")
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..e4efcc52f7
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,28 @@
+import os
+
+# Set up Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+class Settings:
+    DEBUG = True
+    DATABASES = {
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        },
+        'other': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    }
+    INSTALLED_APPS = [
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+        'test_natural_key_issue',
+    ]
+    ROOT_URLCONF = ''
+    SECRET_KEY = 'fake-key'
+    MIDDLEWARE = []
+
+import django
+django.setup()
\ No newline at end of file
diff --git a/testproject/testproject/__init__.py b/testproject/testproject/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testproject/testproject/settings.py b/testproject/testproject/settings.py
new file mode 100644
index 0000000000..6709e48531
--- /dev/null
+++ b/testproject/testproject/settings.py
@@ -0,0 +1,87 @@
+import os
+
+BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
+
+SECRET_KEY = 'fake-key'
+
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'testbug',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'testproject.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'testproject.wsgi.application'
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    },
+    'other': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db_other.sqlite3'),
+    }
+}
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_L10N = True
+
+USE_TZ = True
+
+STATIC_URL = '/static/'
\ No newline at end of file
