diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 000000000..377894b55
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,17 @@
+import pytest
+import sys
+
+@pytest.mark.skip
+def test_skip() -> None:
+    assert 0
+
+@pytest.mark.skipif(sys.platform == "linux", reason="running on linux")
+def test_skipif() -> None:
+    assert 0
+
+@pytest.mark.xfail
+def test_xfail() -> None:
+    assert 0
+
+def test_normal():
+    assert 1
\ No newline at end of file
diff --git a/repro_test.py b/repro_test.py
new file mode 100644
index 000000000..c9f8706b1
--- /dev/null
+++ b/repro_test.py
@@ -0,0 +1,5 @@
+import pytest
+
+@pytest.mark.skip
+def test_skip_location() -> None:
+    assert 0
\ No newline at end of file
diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py
index 7bd975e5a..04c958d5c 100644
--- a/src/_pytest/skipping.py
+++ b/src/_pytest/skipping.py
@@ -262,6 +262,21 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):
     outcome = yield
     rep = outcome.get_result()
     xfailed = item._store.get(xfailed_key, None)
+
+    # First, adjust the skip location for skipped tests if needed
+    if (
+        item._store.get(skipped_by_mark_key, True)
+        and rep.skipped
+        and type(rep.longrepr) is tuple
+    ):
+        # skipped by mark.skipif; change the location of the failure
+        # to point to the item definition, otherwise it will display
+        # the location of where the skip exception was raised within pytest
+        _, _, reason = rep.longrepr
+        filename, line = item.reportinfo()[:2]
+        assert line is not None
+        rep.longrepr = str(filename), line + 1, reason
+
     # unittest special case, see setting of unexpectedsuccess_key
     if unexpectedsuccess_key in item._store and rep.when == "call":
         reason = item._store[unexpectedsuccess_key]
@@ -270,12 +285,12 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):
         else:
             rep.longrepr = "Unexpected success"
         rep.outcome = "failed"
-    elif item.config.option.runxfail:
-        pass  # don't interfere
     elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):
         assert call.excinfo.value.msg is not None
         rep.wasxfail = "reason: " + call.excinfo.value.msg
         rep.outcome = "skipped"
+    elif item.config.option.runxfail:
+        pass  # don't interfere with xfail handling
     elif not rep.skipped and xfailed:
         if call.excinfo:
             raises = xfailed.raises
@@ -291,18 +306,6 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):
             else:
                 rep.outcome = "passed"
                 rep.wasxfail = xfailed.reason
-    elif (
-        item._store.get(skipped_by_mark_key, True)
-        and rep.skipped
-        and type(rep.longrepr) is tuple
-    ):
-        # skipped by mark.skipif; change the location of the failure
-        # to point to the item definition, otherwise it will display
-        # the location of where the skip exception was raised within pytest
-        _, _, reason = rep.longrepr
-        filename, line = item.reportinfo()[:2]
-        assert line is not None
-        rep.longrepr = str(filename), line + 1, reason
 
 
 def pytest_report_teststatus(report: BaseReport) -> Optional[Tuple[str, str, str]]:
