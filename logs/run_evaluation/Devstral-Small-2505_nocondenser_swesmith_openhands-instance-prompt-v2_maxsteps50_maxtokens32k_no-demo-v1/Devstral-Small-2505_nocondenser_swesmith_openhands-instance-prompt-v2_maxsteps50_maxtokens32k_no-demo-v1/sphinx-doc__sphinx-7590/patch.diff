diff --git a/setup.py b/setup.py
index a427d5493..978e3d8e0 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py
index fe52d881d..0f3416c34 100644
--- a/sphinx/domains/cpp.py
+++ b/sphinx/domains/cpp.py
@@ -37,6 +37,19 @@ from sphinx.util.cfamily import (
     hex_literal_re, binary_literal_re, float_literal_re,
     char_literal_re
 )
+
+# Regular expression for user-defined literals
+# A UDL consists of a literal (integer, float, etc.) followed by an identifier
+udl_re = re.compile(r'''(?x)
+    (?:[0-9]+[eE][+-]?[0-9]+)      # floating point with exponent
+    | (?:[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?)  # floating point
+    | (?:[0-9]+\.([eE][+-]?[0-9]+)?)  # floating point
+    | (?:0[xX][0-9a-fA-F]+)         # hex integer
+    | (?:0[bB][01]+)                # binary integer
+    | (?:0[0-7]+)                   # octal integer
+    | (?:[1-9][0-9]*)               # decimal integer
+    [a-zA-Z_][a-zA-Z0-9_]*           # identifier suffix
+    ''')
 from sphinx.util.docfields import Field, GroupedField
 from sphinx.util.docutils import SphinxDirective
 from sphinx.util.nodes import make_refnode
@@ -837,6 +850,22 @@ class ASTNumberLiteral(ASTLiteral):
         txt = str(self)
         signode.append(nodes.Text(txt, txt))
 
+class ASTUserDefinedLiteral(ASTLiteral):
+    def __init__(self, value: str, suffix: str) -> None:
+        self.value = value
+        self.suffix = suffix
+
+    def _stringify(self, transform: StringifyTransform) -> str:
+        return self.value + self.suffix
+
+    def get_id(self, version: int) -> str:
+        return "UDL%sE" % (self.value + self.suffix)
+
+    def describe_signature(self, signode: TextElement, mode: str,
+                           env: "BuildEnvironment", symbol: "Symbol") -> None:
+        txt = str(self)
+        signode.append(nodes.Text(txt, txt))
+
 
 class ASTStringLiteral(ASTLiteral):
     def __init__(self, data: str) -> None:
@@ -4682,7 +4711,22 @@ class DefinitionParser(BaseParser):
                 self.fail("Can not handle character literal"
                           " resulting in multiple decoded characters.")
 
-        # TODO: user-defined lit
+        # user-defined literal
+        pos = self.pos
+        print(f"Current position: {self.pos}, current char: {self.current_char}")
+        print(f"Looking for UDL in: {self.definition[self.pos:]}")
+        if self.match(udl_re):
+            print(f"Matched UDL: {self.matched_text}")
+            # Extract the literal value and suffix
+            matched_text = self.matched_text
+            # Find the point where the numeric part ends and the identifier begins
+            for i, char in enumerate(matched_text):
+                if char.isalpha() or char == '_':
+                    value = matched_text[:i]
+                    suffix = matched_text[i:]
+                    print(f"UDL parsed: value={value}, suffix={suffix}")
+                    return ASTUserDefinedLiteral(value, suffix)
+
         return None
 
     def _parse_fold_or_paren_expression(self) -> ASTExpression:
diff --git a/tests/test_udl.py b/tests/test_udl.py
new file mode 100644
index 000000000..82f4df9a6
--- /dev/null
+++ b/tests/test_udl.py
@@ -0,0 +1,42 @@
+"""
+Test for User Defined Literals (UDLs) in C++ domain
+"""
+
+import pytest
+from sphinx.domains.cpp import DefinitionParser, ASTBinOpExpr, ASTUserDefinedLiteral
+
+class Config:
+    cpp_id_attributes = ["id_attr"]
+    cpp_paren_attributes = ["paren_attr"]
+
+def test_user_defined_literals():
+    """Test parsing of User Defined Literals (UDLs) in C++ domain."""
+    # Create a parser with a simple UDL definition
+    parser = DefinitionParser("6.62607015e-34q_J * 1q_s", location=None, config=Config())
+
+    # Parse the expression
+    expr = parser.parse_expression()
+
+    # Check that the expression was parsed correctly
+    assert expr is not None
+
+    # The expression should be a binary operation
+    assert isinstance(expr, ASTBinOpExpr)
+
+    # The binary operation should have left and right operands
+    assert hasattr(expr, 'left')
+    assert hasattr(expr, 'right')
+    assert hasattr(expr, 'op')
+
+    # Check that the operator is '*'
+    assert expr.op == '*'
+
+    # Check that the left operand is a UDL
+    assert isinstance(expr.left, ASTUserDefinedLiteral)
+    assert expr.left.value == "6.62607015e-34"
+    assert expr.left.suffix == "q_J"
+
+    # Check that the right operand is a UDL
+    assert isinstance(expr.right, ASTUserDefinedLiteral)
+    assert expr.right.value == "1"
+    assert expr.right.suffix == "q_s"
\ No newline at end of file
diff --git a/tox.ini b/tox.ini
index d9f040544..bf39854b6 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ extras =
 setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
 commands=
-    pytest --durations 25 {posargs}
+    pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
