diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py
index b3cfc6723c..1ddf8708e9 100644
--- a/django/contrib/auth/forms.py
+++ b/django/contrib/auth/forms.py
@@ -163,7 +163,8 @@ class UserChangeForm(forms.ModelForm):
         super().__init__(*args, **kwargs)
         password = self.fields.get("password")
         if password:
-            password.help_text = password.help_text.format("../password/")
+            # Use the instance's primary key to generate the correct URL
+            password.help_text = password.help_text.format(f"../../{self.instance.pk}/password/")
         user_permissions = self.fields.get("user_permissions")
         if user_permissions:
             user_permissions.queryset = user_permissions.queryset.select_related(
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..1130d466b7
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,123 @@
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+    )
+    django.setup()
+
+# Create database tables
+from django.db import connection
+# Create auth_group table
+connection.cursor().execute("""
+CREATE TABLE IF NOT EXISTS auth_group (
+    id INTEGER PRIMARY KEY,
+    name TEXT
+)
+""")
+# Create auth_user_groups table
+connection.cursor().execute("""
+CREATE TABLE IF NOT EXISTS auth_user_groups (
+    id INTEGER PRIMARY KEY,
+    user_id INTEGER,
+    group_id INTEGER,
+    FOREIGN KEY (user_id) REFERENCES auth_user (id),
+    FOREIGN KEY (group_id) REFERENCES auth_group (id)
+)
+""")
+# Create django_content_type table
+connection.cursor().execute("""
+CREATE TABLE IF NOT EXISTS django_content_type (
+    id INTEGER PRIMARY KEY,
+    app_label TEXT,
+    model TEXT
+)
+""")
+# Create auth_permission table
+connection.cursor().execute("""
+CREATE TABLE IF NOT EXISTS auth_permission (
+    id INTEGER PRIMARY KEY,
+    name TEXT,
+    content_type_id INTEGER,
+    codename TEXT,
+    FOREIGN KEY (content_type_id) REFERENCES django_content_type (id)
+)
+""")
+# Create auth_user_user_permissions table
+connection.cursor().execute("""
+CREATE TABLE IF NOT EXISTS auth_user_user_permissions (
+    id INTEGER PRIMARY KEY,
+    user_id INTEGER,
+    permission_id INTEGER,
+    FOREIGN KEY (user_id) REFERENCES auth_user (id),
+    FOREIGN KEY (permission_id) REFERENCES auth_permission (id)
+)
+""")
+# Create auth_user table
+connection.cursor().execute("""
+CREATE TABLE IF NOT EXISTS auth_user (
+    id INTEGER PRIMARY KEY,
+    username TEXT,
+    password TEXT,
+    email TEXT,
+    first_name TEXT,
+    last_name TEXT,
+    is_active INTEGER,
+    is_staff INTEGER,
+    is_superuser INTEGER,
+    date_joined TEXT,
+    last_login TEXT
+)
+""")
+
+from django.contrib.auth.models import User
+from django.contrib.auth.forms import UserChangeForm
+
+def test_password_link():
+    """Test that the password link in UserChangeForm is correct"""
+    # Create a test user
+    user = User.objects.create(
+        username='testuser',
+        id=1,  # Set a specific ID for testing
+    )
+
+    # Create a form instance for the user
+    form = UserChangeForm(instance=user)
+
+    # Get the password field help text
+    password_field = form.fields.get('password')
+    if not password_field:
+        print("Password field not found in UserChangeForm")
+        return False
+
+    # Extract the URL from the help text
+    help_text = password_field.help_text
+    print(f"Help text: {help_text}")
+
+    # Check if the URL is correctly generated
+    expected_url = f"../../{user.pk}/password/"
+    if expected_url in help_text:
+        print("Test passed: Password link is correctly generated")
+        return True
+    else:
+        print(f"Test failed: Password link is incorrectly generated.")
+        print(f"Expected URL: {expected_url}")
+        print(f"Actual help text: {help_text}")
+        return False
+
+if __name__ == '__main__':
+    # Run the test
+    test_password_link()
\ No newline at end of file
diff --git a/test_password_link.py b/test_password_link.py
new file mode 100644
index 0000000000..6dc9db5a62
--- /dev/null
+++ b/test_password_link.py
@@ -0,0 +1,36 @@
+import uuid
+from django.contrib.auth.models import User
+from django.contrib.auth.forms import UserChangeForm
+
+def test_password_link():
+    """Test that the password link in UserChangeForm is correct"""
+    # Create a test user
+    user = User.objects.create(
+        username='testuser',
+        id=1,  # Set a specific ID for testing
+    )
+
+    # Create a form instance for the user
+    form = UserChangeForm(instance=user)
+
+    # Get the password field help text
+    password_field = form.fields.get('password')
+    if not password_field:
+        print("Password field not found in UserChangeForm")
+        return False
+
+    # Extract the URL from the help text
+    help_text = password_field.help_text
+    print(f"Help text: {help_text}")
+
+    # Check if the URL is correctly generated
+    if f"../../{user.pk}/password/" in help_text:
+        print("Test passed: Password link is correctly generated")
+        return True
+    else:
+        print(f"Test failed: Password link is incorrectly generated. Help text: {help_text}")
+        return False
+
+if __name__ == '__main__':
+    # Run the test
+    test_password_link()
\ No newline at end of file
diff --git a/test_project/manage.py b/test_project/manage.py
new file mode 100755
index 0000000000..ad586a0e87
--- /dev/null
+++ b/test_project/manage.py
@@ -0,0 +1,15 @@
+#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == '__main__':
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
\ No newline at end of file
diff --git a/test_project/settings.py b/test_project/settings.py
new file mode 100644
index 0000000000..09bfe60e3b
--- /dev/null
+++ b/test_project/settings.py
@@ -0,0 +1,82 @@
+import os
+
+BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
+
+SECRET_KEY = 'dummy'
+
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'test_project.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'test_project.wsgi.application'
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }
+}
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_L10N = True
+
+USE_TZ = True
+
+STATIC_URL = '/static/'
\ No newline at end of file
diff --git a/test_project/test_app/__init__.py b/test_project/test_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/test_app/admin.py b/test_project/test_app/admin.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/test_app/apps.py b/test_project/test_app/apps.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/test_app/models.py b/test_project/test_app/models.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/test_app/tests.py b/test_project/test_app/tests.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/test_project/__init__.py b/test_project/test_project/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/test_project/settings.py b/test_project/test_project/settings.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/test_project/urls.py b/test_project/test_project/urls.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/urls.py b/test_project/urls.py
new file mode 100644
index 0000000000..6b669efaa2
--- /dev/null
+++ b/test_project/urls.py
@@ -0,0 +1,6 @@
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
\ No newline at end of file
diff --git a/test_project/wsgi.py b/test_project/wsgi.py
new file mode 100644
index 0000000000..4de404b8eb
--- /dev/null
+++ b/test_project/wsgi.py
@@ -0,0 +1,6 @@
+import os
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')
+
+application = get_wsgi_application()
\ No newline at end of file
diff --git a/test_user_admin_password_link.py b/test_user_admin_password_link.py
new file mode 100644
index 0000000000..af61368710
--- /dev/null
+++ b/test_user_admin_password_link.py
@@ -0,0 +1,105 @@
+import os
+import sys
+import uuid
+from django.conf import settings
+from django.contrib.auth.models import User
+from django.contrib.auth.admin import UserAdmin
+from django.contrib import admin
+from django.db import models
+from django.test import TestCase, override_settings, RequestFactory
+from django.urls import reverse, NoReverseMatch
+
+# Configure settings for the test
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'django.contrib.admin',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        ROOT_URLCONF='django.contrib.auth.urls',
+        MIDDLEWARE=[],
+    )
+
+# Create a test model with a UUID field
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    user = models.ForeignKey(
+        User,
+        on_delete=models.CASCADE,
+        to_field='uuid'  # This is the key part - using to_field other than pk
+    )
+
+# Register the model with admin
+@admin.register(TestModel)
+class TestModelAdmin(admin.ModelAdmin):
+    list_display = ('name', 'user')
+    list_filter = ('user',)
+
+# Create a test case
+class UserAdminPasswordLinkTest(TestCase):
+    def setUp(self):
+        # Create a test user
+        self.user = User.objects.create(
+            username='testuser',
+            id=1,  # Set a specific ID for testing
+            uuid=uuid.uuid4()  # Create a UUID for the user
+        )
+
+        # Create a test model instance
+        self.test_model = TestModel.objects.create(
+            name='Test Model',
+            user=self.user
+        )
+
+        # Create a request factory
+        self.factory = RequestFactory()
+
+    def test_password_link(self):
+        """Test that the password link in UserChangeForm is correct"""
+        from django.contrib.auth.forms import UserChangeForm
+
+        # Create a form instance for the user
+        form = UserChangeForm(instance=self.user)
+
+        # Get the password field help text
+        password_field = form.fields.get('password')
+        if not password_field:
+            self.fail("Password field not found in UserChangeForm")
+
+        # Extract the URL from the help text
+        help_text = password_field.help_text
+        try:
+            # The URL should be something like ../../1/password/ (not ../password/)
+            self.assertIn(f"../../{self.user.pk}/password/", help_text)
+            self.assertNotIn("../password/", help_text)
+            print("Test passed: Password link is correctly generated")
+        except AssertionError:
+            print(f"Test failed: Password link is incorrectly generated. Help text: {help_text}")
+            raise
+
+# Run the test
+if __name__ == '__main__':
+    # Create the necessary database tables
+    from django.core.management import call_command
+    call_command('makemigrations', interactive=False)
+    call_command('migrate', interactive=False)
+
+    # Create a superuser for admin access
+    from django.contrib.auth import get_user_model
+    User = get_user_model()
+    if not User.objects.filter(username='admin').exists():
+        User.objects.create_superuser('admin', 'admin@example.com', 'password')
+
+    # Run the test
+    test_case = UserAdminPasswordLinkTest()
+    test_case.setUp()
+    test_case.test_password_link()
+
+    print("Test completed successfully")
\ No newline at end of file
