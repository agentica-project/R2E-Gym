diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..f88bbd4f0c
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,57 @@
+import matplotlib.pyplot as plt
+from matplotlib.patches import Rectangle
+import numpy as np
+
+def test_stackplot_with_various_colors():
+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])
+
+    # Test 1: With color cycle references
+    fig, ax = plt.subplots()
+    ax.plot([1, 3], [1, 3], color='C0')
+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))
+    ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])
+    plt.close(fig)
+    print("Test 1 passed: stackplot with color cycle references")
+
+    # Test 2: With explicit color names
+    fig, ax = plt.subplots()
+    ax.plot([1, 3], [1, 3], color='red')
+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='blue'))
+    ax.stackplot([1, 2, 3], my_data, colors=['green', 'orange', 'purple'])
+    plt.close(fig)
+    print("Test 2 passed: stackplot with explicit color names")
+
+    # Test 3: With hex color codes
+    fig, ax = plt.subplots()
+    ax.plot([1, 3], [1, 3], color='#FF0000')
+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='#00FF00'))
+    ax.stackplot([1, 2, 3], my_data, colors=['#0000FF', '#FFFF00', '#FF00FF'])
+    plt.close(fig)
+    print("Test 3 passed: stackplot with hex color codes")
+
+    # Test 4: Without specifying colors (should use default cycle)
+    fig, ax = plt.subplots()
+    ax.plot([1, 3], [1, 3], color='C0')
+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))
+    ax.stackplot([1, 2, 3], my_data)
+    plt.close(fig)
+    print("Test 4 passed: stackplot without specifying colors")
+
+    # Test 5: With fewer colors than data series
+    fig, ax = plt.subplots()
+    ax.plot([1, 3], [1, 3], color='C0')
+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))
+    ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3'])
+    plt.close(fig)
+    print("Test 5 passed: stackplot with fewer colors than data series")
+
+    # Test 6: With more colors than data series
+    fig, ax = plt.subplots()
+    ax.plot([1, 3], [1, 3], color='C0')
+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))
+    ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4', 'C5'])
+    plt.close(fig)
+    print("Test 6 passed: stackplot with more colors than data series")
+
+if __name__ == "__main__":
+    test_stackplot_with_various_colors()
\ No newline at end of file
diff --git a/lib/matplotlib/stackplot.py b/lib/matplotlib/stackplot.py
index c580043eeb..48b98b30c2 100644
--- a/lib/matplotlib/stackplot.py
+++ b/lib/matplotlib/stackplot.py
@@ -69,8 +69,15 @@ def stackplot(axes, x, *args,
     y = np.row_stack(args)
 
     labels = iter(labels)
+
+    # Save the current prop cycle
+    prop_cycle = axes._get_lines.prop_cycler
+
+    # Use the provided colors directly without setting the property cycle
     if colors is not None:
-        axes.set_prop_cycle(color=colors)
+        color_cycle = iter((colors * ((len(y) // len(colors)) + 2))[:len(y)])
+    else:
+        color_cycle = None
 
     # Assume data passed has not been 'stacked', so stack it here.
     # We'll need a float buffer for the upcoming calculations.
@@ -108,7 +115,10 @@ def stackplot(axes, x, *args,
         stack += first_line
 
     # Color between x = 0 and the first array.
-    color = axes._get_lines.get_next_color()
+    if color_cycle is not None:
+        color = next(color_cycle)
+    else:
+        color = axes._get_lines.get_next_color()
     coll = axes.fill_between(x, first_line, stack[0, :],
                              facecolor=color, label=next(labels, None),
                              **kwargs)
@@ -117,7 +127,10 @@ def stackplot(axes, x, *args,
 
     # Color between array i-1 and array i
     for i in range(len(y) - 1):
-        color = axes._get_lines.get_next_color()
+        if color_cycle is not None:
+            color = next(color_cycle)
+        else:
+            color = axes._get_lines.get_next_color()
         r.append(axes.fill_between(x, stack[i, :], stack[i + 1, :],
                                    facecolor=color, label=next(labels, None),
                                    **kwargs))
diff --git a/lib/matplotlib/tests/test_stackplot_colors.py b/lib/matplotlib/tests/test_stackplot_colors.py
new file mode 100644
index 0000000000..888fd75428
--- /dev/null
+++ b/lib/matplotlib/tests/test_stackplot_colors.py
@@ -0,0 +1,96 @@
+import numpy as np
+import pytest
+
+from matplotlib import colors
+from matplotlib.patches import Rectangle
+from matplotlib.testing.decorators import image_comparison
+
+@image_comparison(baseline_images=['stackplot_color_cycle'])
+def test_stackplot_color_cycle(test_figures):
+    """Test that stackplot accepts color cycle references."""
+    fig, ax = test_figures.get_figure()
+
+    # Create test data
+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])
+
+    # Plot with different types of elements using color cycle references
+    ax.plot([1, 3], [1, 3], color='C0')
+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))
+    ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])
+
+    return fig
+
+@image_comparison(baseline_images=['stackplot_explicit_colors'])
+def test_stackplot_explicit_colors(test_figures):
+    """Test that stackplot works with explicit color names."""
+    fig, ax = test_figures.get_figure()
+
+    # Create test data
+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])
+
+    # Plot with different types of elements using explicit color names
+    ax.plot([1, 3], [1, 3], color='red')
+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='blue'))
+    ax.stackplot([1, 2, 3], my_data, colors=['green', 'orange', 'purple'])
+
+    return fig
+
+@image_comparison(baseline_images=['stackplot_hex_colors'])
+def test_stackplot_hex_colors(test_figures):
+    """Test that stackplot works with hex color codes."""
+    fig, ax = test_figures.get_figure()
+
+    # Create test data
+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])
+
+    # Plot with different types of elements using hex color codes
+    ax.plot([1, 3], [1, 3], color='#FF0000')
+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='#00FF00'))
+    ax.stackplot([1, 2, 3], my_data, colors=['#0000FF', '#FFFF00', '#FF00FF'])
+
+    return fig
+
+@image_comparison(baseline_images=['stackplot_default_colors'])
+def test_stackplot_default_colors(test_figures):
+    """Test that stackplot works with default colors."""
+    fig, ax = test_figures.get_figure()
+
+    # Create test data
+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])
+
+    # Plot with different types of elements using default colors
+    ax.plot([1, 3], [1, 3], color='C0')
+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))
+    ax.stackplot([1, 2, 3], my_data)  # No colors specified
+
+    return fig
+
+@image_comparison(baseline_images=['stackplot_fewer_colors'])
+def test_stackplot_fewer_colors(test_figures):
+    """Test that stackplot works with fewer colors than data series."""
+    fig, ax = test_figures.get_figure()
+
+    # Create test data
+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])
+
+    # Plot with fewer colors than data series
+    ax.plot([1, 3], [1, 3], color='C0')
+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))
+    ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3'])  # Fewer colors than series
+
+    return fig
+
+@image_comparison(baseline_images=['stackplot_more_colors'])
+def test_stackplot_more_colors(test_figures):
+    """Test that stackplot works with more colors than data series."""
+    fig, ax = test_figures.get_figure()
+
+    # Create test data
+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])
+
+    # Plot with more colors than data series
+    ax.plot([1, 3], [1, 3], color='C0')
+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))
+    ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4', 'C5'])  # More colors than series
+
+    return fig
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..ad24bb83df
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,25 @@
+import matplotlib.pyplot as plt
+from matplotlib.patches import Rectangle
+import numpy as np
+
+def test_stackplot_with_cycle_references():
+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])
+    fig, ax = plt.subplots()
+
+    # This works fine
+    ax.plot([1, 3], [1, 3], color='C0')
+
+    # This works fine too
+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))
+
+    try:
+        # This should work but currently fails
+        ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])
+        print("Test passed: stackplot accepted color cycle references")
+    except ValueError as e:
+        print(f"Test failed: {str(e)}")
+
+    plt.close(fig)
+
+if __name__ == "__main__":
+    test_stackplot_with_cycle_references()
\ No newline at end of file
