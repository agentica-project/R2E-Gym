diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 000000000..4abe3bd78
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,45 @@
+from sklearn import svm
+from sklearn.datasets import samples_generator
+from sklearn.feature_selection import SelectKBest
+from sklearn.feature_selection import f_regression
+from sklearn.pipeline import Pipeline
+from sklearn.preprocessing import StandardScaler
+
+# Test 1: Basic pipeline with 2 steps
+print("Test 1: Basic pipeline with 2 steps")
+anova_filter = SelectKBest(f_regression, k=5)
+clf = svm.SVC(kernel='linear')
+pipe = Pipeline([('anova', anova_filter), ('svc', clf)])
+print(f"Pipeline length: {len(pipe)}")
+print(f"Sliced pipeline length: {len(pipe[:1])}")
+print(f"Sliced pipeline length: {len(pipe[1:])}")
+print(f"Full slice pipeline length: {len(pipe[:len(pipe)])}")
+print()
+
+# Test 2: Pipeline with 3 steps
+print("Test 2: Pipeline with 3 steps")
+scaler = StandardScaler()
+pipe3 = Pipeline([('scaler', scaler), ('anova', anova_filter), ('svc', clf)])
+print(f"Pipeline length: {len(pipe3)}")
+print(f"First step only: {len(pipe3[:1])}")
+print(f"Middle steps: {len(pipe3[1:2])}")
+print(f"Last step only: {len(pipe3[-1:])}")
+print(f"Full slice: {len(pipe3[:len(pipe3)])}")
+print()
+
+# Test 3: Empty pipeline (should raise an error)
+print("Test 3: Empty pipeline")
+try:
+    empty_pipe = Pipeline([])
+    print(f"Empty pipeline length: {len(empty_pipe)}")
+except Exception as e:
+    print(f"Error with empty pipeline: {e}")
+print()
+
+# Test 4: Negative indexing
+print("Test 4: Negative indexing")
+print(f"Negative indexing: {len(pipe[-2:])}")
+print(f"Negative indexing: {len(pipe[-3:-1])}")
+print()
+
+print("All tests completed successfully!")
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..909de3082
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,23 @@
+from sklearn import svm
+from sklearn.datasets import samples_generator
+from sklearn.feature_selection import SelectKBest
+from sklearn.feature_selection import f_regression
+from sklearn.pipeline import Pipeline
+
+# generate some data to play with
+X, y = samples_generator.make_classification(
+    n_informative=5, n_redundant=0, random_state=42)
+
+anova_filter = SelectKBest(f_regression, k=5)
+clf = svm.SVC(kernel='linear')
+pipe = Pipeline([('anova', anova_filter), ('svc', clf)])
+
+# Try to get the length of the pipeline
+try:
+    length = len(pipe)
+    print(f"Pipeline length: {length}")
+    # Try slicing with len
+    sliced_pipe = pipe[:len(pipe)]
+    print(f"Sliced pipeline has {len(sliced_pipe)} steps")
+except TypeError as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py
index 7eaf9a46f..5f0d6dac2 100644
--- a/sklearn/pipeline.py
+++ b/sklearn/pipeline.py
@@ -199,6 +199,10 @@ class Pipeline(_BaseComposition):
             if trans is not None and trans != 'passthrough':
                 yield idx, name, trans
 
+    def __len__(self):
+        """Returns the number of steps in the pipeline."""
+        return len(self.steps)
+
     def __getitem__(self, ind):
         """Returns a sub-pipeline or a single esimtator in the pipeline
 
