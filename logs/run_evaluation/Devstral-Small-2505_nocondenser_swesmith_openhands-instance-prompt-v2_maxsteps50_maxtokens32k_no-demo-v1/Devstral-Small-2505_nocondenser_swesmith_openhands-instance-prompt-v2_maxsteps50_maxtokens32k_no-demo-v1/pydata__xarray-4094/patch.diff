diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 00000000..4c4031a7
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,77 @@
+import xarray as xr
+import numpy as np
+
+def test_single_dim():
+    """Test stacking and unstacking with single-dim variables."""
+    print("Testing with single-dim variables:")
+    arr = xr.DataArray(
+        np.arange(3),
+        coords=[("x", [0, 1, 2])],
+    )
+    data = xr.Dataset({"a": arr, "b": arr})
+    print("Original dataset:")
+    print(data)
+
+    stacked = data.to_stacked_array('y', sample_dims=['x'])
+    print("\nStacked array:")
+    print(stacked)
+
+    unstacked = stacked.to_unstacked_dataset('y')
+    print("\nUnstacked dataset:")
+    print(unstacked)
+
+    # Check if the original and unstacked datasets are identical
+    print("\nIdentical:", data.identical(unstacked))
+
+def test_mixed_dims():
+    """Test stacking and unstacking with mixed-dim variables."""
+    print("\nTesting with mixed-dim variables:")
+    arr1 = xr.DataArray(
+        np.arange(6).reshape(2, 3),
+        coords=[("x", ["a", "b"]), ("y", [0, 1, 2])],
+    )
+    arr2 = xr.DataArray(
+        np.arange(2),
+        coords=[("x", ["a", "b"])],
+    )
+    data = xr.Dataset({"a": arr1, "b": arr2})
+    print("Original dataset:")
+    print(data)
+
+    stacked = data.to_stacked_array('z', sample_dims=['x'])
+    print("\nStacked array:")
+    print(stacked)
+
+    unstacked = stacked.to_unstacked_dataset('z')
+    print("\nUnstacked dataset:")
+    print(unstacked)
+
+    # Check if the original and unstacked datasets are identical
+    print("\nIdentical:", data.identical(unstacked))
+
+def test_scalar_vars():
+    """Test stacking and unstacking with scalar variables."""
+    print("\nTesting with scalar variables:")
+    # Create a dataset with scalar variables and a dummy dimension
+    data = xr.Dataset({
+        "a": (("dummy",), np.ones(1)),
+        "b": (("dummy",), np.ones(1) * 2)
+    })
+    print("Original dataset:")
+    print(data)
+
+    stacked = data.to_stacked_array('z', sample_dims=['dummy'])
+    print("\nStacked array:")
+    print(stacked)
+
+    unstacked = stacked.to_unstacked_dataset('z')
+    print("\nUnstacked dataset:")
+    print(unstacked)
+
+    # Check if the variables are the same
+    print("\nVariables match:", unstacked.a.item() == 1 and unstacked.b.item() == 2)
+
+if __name__ == "__main__":
+    test_single_dim()
+    test_mixed_dims()
+    test_scalar_vars()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..41137072
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,70 @@
+import xarray as xr
+import numpy as np
+
+# Reproduce the issue
+arr = xr.DataArray(
+    np.arange(3),
+    coords=[("x", [0, 1, 2])],
+)
+data = xr.Dataset({"a": arr, "b": arr})
+print("Original dataset:")
+print(data)
+
+stacked = data.to_stacked_array('y', sample_dims=['x'])
+print("\nStacked array:")
+print(stacked)
+print("\nStacked array indexes:")
+print(stacked.indexes['y'])
+
+# Let's debug what's happening in the to_unstacked_dataset method
+print("\nDebugging to_unstacked_dataset:")
+idx = stacked.indexes['y']
+print("idx:", idx)
+print("levels:", idx.levels)
+print("names:", idx.names)
+
+level_number = idx._get_level_number(0)
+variables = idx.levels[level_number]
+variable_dim = idx.names[level_number]
+
+print("\nVariables:", variables)
+print("Variable dim:", variable_dim)
+
+# Manually extract variables
+data_dict = {}
+coords_dict = {}
+
+for k in variables:
+    var = stacked.sel({variable_dim: k}).squeeze(drop=True)
+    print(f"\nVariable {k}:")
+    print(f"  Dims: {var.dims}")
+    print(f"  Shape: {var.shape}")
+    print(f"  Data: {var.values}")
+
+    if var.dims:
+        data_dict[k] = var
+    else:
+        coords_dict[k] = var.item()
+
+print("\nData dict:", data_dict)
+print("Coords dict:", coords_dict)
+
+# Try to create the dataset
+try:
+    dataset = xr.Dataset(data_dict)
+    if coords_dict:
+        dataset = dataset.assign_coords(coords_dict)
+    print("\nManually created dataset:")
+    print(dataset)
+except Exception as e:
+    print("\nError creating dataset:")
+    print(e)
+
+# Try the actual method
+try:
+    unstacked = stacked.to_unstacked_dataset('y')
+    print("\nUnstacked dataset:")
+    print(unstacked)
+except Exception as e:
+    print("\nError when unstacking:")
+    print(e)
\ No newline at end of file
diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py
index b0df8749..9adc056a 100644
--- a/xarray/core/dataarray.py
+++ b/xarray/core/dataarray.py
@@ -1960,11 +1960,32 @@ class DataArray(AbstractArray, DataWithCoords):
 
         # pull variables out of datarray
         data_dict = {}
+        coords_dict = {}
+
         for k in variables:
-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)
+            # Select the variable and squeeze out the stacked dimension
+            var = self.sel({variable_dim: k}).squeeze(drop=True)
+
+            # Drop the stacked dimension coordinate to avoid conflicts
+            if dim in var.coords:
+                var = var.drop_vars(dim)
+
+            # Check if the variable has any dimensions left
+            if var.dims:
+                # If it has dimensions, add it to the data_dict
+                data_dict[k] = var
+            else:
+                # If it has no dimensions (scalar), add it as a coordinate
+                coords_dict[k] = var.item()
 
-        # unstacked dataset
-        return Dataset(data_dict)
+        # Create the dataset with the data variables and coordinates
+        dataset = Dataset(data_dict)
+
+        # Add the coordinates if there are any
+        if coords_dict:
+            dataset = dataset.assign_coords(coords_dict)
+
+        return dataset
 
     def transpose(self, *dims: Hashable, transpose_coords: bool = True) -> "DataArray":
         """Return a new DataArray object with transposed dimensions.
