diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 982816be3a..6ec649c3ed 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -320,12 +320,19 @@ class RenameModel(ModelOperation):
         new_model = to_state.apps.get_model(app_label, self.new_name)
         if self.allow_migrate_model(schema_editor.connection.alias, new_model):
             old_model = from_state.apps.get_model(app_label, self.old_name)
-            # Move the main table
-            schema_editor.alter_db_table(
-                new_model,
-                old_model._meta.db_table,
-                new_model._meta.db_table,
-            )
+            # Move the main table only if the table names are different
+            old_db_table = old_model._meta.db_table
+            new_db_table = new_model._meta.db_table
+            if old_db_table != new_db_table and not (
+                schema_editor.connection.features.ignores_table_name_case and
+                old_db_table.lower() == new_db_table.lower()
+            ):
+                schema_editor.alter_db_table(
+                    new_model,
+                    old_db_table,
+                    new_db_table,
+                )
+
             # Alter the fields pointing to us
             for related_object in old_model._meta.related_objects:
                 if related_object.related_model == old_model:
@@ -351,14 +358,20 @@ class RenameModel(ModelOperation):
                 # Skip self-referential fields as these are renamed above.
                 if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:
                     continue
-                # Rename the M2M table that's based on this model's name.
+                # Rename the M2M table that's based on this model's name only if the table names are different
                 old_m2m_model = old_field.remote_field.through
                 new_m2m_model = new_field.remote_field.through
-                schema_editor.alter_db_table(
-                    new_m2m_model,
-                    old_m2m_model._meta.db_table,
-                    new_m2m_model._meta.db_table,
-                )
+                old_m2m_db_table = old_m2m_model._meta.db_table
+                new_m2m_db_table = new_m2m_model._meta.db_table
+                if old_m2m_db_table != new_m2m_db_table and not (
+                    schema_editor.connection.features.ignores_table_name_case and
+                    old_m2m_db_table.lower() == new_m2m_db_table.lower()
+                ):
+                    schema_editor.alter_db_table(
+                        new_m2m_model,
+                        old_m2m_db_table,
+                        new_m2m_db_table,
+                    )
                 # Rename the column in the M2M table that's based on this
                 # model's name.
                 schema_editor.alter_field(
diff --git a/test_rename_model_with_db_table.py b/test_rename_model_with_db_table.py
new file mode 100644
index 0000000000..f5e8d9021d
--- /dev/null
+++ b/test_rename_model_with_db_table.py
@@ -0,0 +1,57 @@
+import os
+import sys
+import django
+from django.db import models, migrations
+from django.db.migrations.operations import RenameModel
+
+# Set up Django
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+django.setup()
+
+# Create a simple model with a custom db_table
+class MyModel(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        db_table = 'custom_table_name'
+
+# Create a mock schema editor to track calls
+class MockSchemaEditor:
+    def __init__(self):
+        self.alter_db_table_called = False
+        self.alter_field_called = False
+
+    def alter_db_table(self, model, old_db_table, new_db_table):
+        self.alter_db_table_called = True
+        self.old_db_table = old_db_table
+        self.new_db_table = new_db_table
+        print(f"alter_db_table called with: {old_db_table} -> {new_db_table}")
+
+    def alter_field(self, model, old_field, new_field):
+        self.alter_field_called = True
+        print("alter_field called")
+
+# Create a RenameModel operation
+operation = RenameModel('MyModel', 'RenamedModel')
+
+# Create the schema editor
+schema_editor = MockSchemaEditor()
+
+# Create mock models with the same db_table
+old_model = MyModel
+new_model = MyModel
+
+# Apply the operation
+operation.database_forwards('test_app', schema_editor, None, None)
+
+# Check if alter_db_table was called
+print(f"alter_db_table_called: {schema_editor.alter_db_table_called}")
+if schema_editor.alter_db_table_called:
+    print(f"Old table: {schema_editor.old_db_table}")
+    print(f"New table: {schema_editor.new_db_table}")
+
+# In this case, alter_db_table should NOT be called because the db_table is the same
+if not schema_editor.alter_db_table_called:
+    print("Test passed: alter_db_table was not called when db_table is the same")
+else:
+    print("Test failed: alter_db_table was called even though db_table is the same")
\ No newline at end of file
