diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..51679e8401
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,71 @@
+import inspect
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+    django.setup()
+
+from django.db import models
+
+class Person(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'comprehensive_test'
+
+# Test various manager methods
+manager_methods = [
+    'all',
+    'filter',
+    'exclude',
+    'values',
+    'values_list',
+    'bulk_create',
+    'create',
+    'get',
+    'first',
+    'last',
+    'count',
+    'iterator',
+    'exists',
+    'update',
+    'delete',
+]
+
+print("Testing manager method signatures:")
+print("-" * 50)
+
+for method_name in manager_methods:
+    try:
+        manager_method = getattr(Person.objects, method_name)
+        queryset_method = getattr(Person.objects.get_queryset(), method_name)
+
+        manager_sig = inspect.signature(manager_method)
+        queryset_sig = inspect.signature(queryset_method)
+
+        sig_match = str(manager_sig) == str(queryset_sig)
+
+        print(f"{method_name}:")
+        print(f"  Manager signature: {manager_sig}")
+        print(f"  Queryset signature: {queryset_sig}")
+        print(f"  Signatures match: {sig_match}")
+        print()
+    except (AttributeError, ValueError) as e:
+        print(f"{method_name}: Could not get signature - {str(e)}")
+        print()
+
+print("Test complete.")
\ No newline at end of file
diff --git a/django/db/models/manager.py b/django/db/models/manager.py
index e37e56cd17..23d2bf1de3 100644
--- a/django/db/models/manager.py
+++ b/django/db/models/manager.py
@@ -1,5 +1,6 @@
 import copy
 import inspect
+import functools
 from importlib import import_module
 
 from django.db import router
@@ -81,11 +82,9 @@ class BaseManager:
     @classmethod
     def _get_queryset_methods(cls, queryset_class):
         def create_method(name, method):
+            @functools.wraps(method)
             def manager_method(self, *args, **kwargs):
                 return getattr(self.get_queryset(), name)(*args, **kwargs)
-
-            manager_method.__name__ = method.__name__
-            manager_method.__doc__ = method.__doc__
             return manager_method
 
         new_methods = {}
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..3109bbb525
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,34 @@
+import inspect
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+    django.setup()
+
+from django.db import models
+
+class Person(models.Model):
+    name = models.CharField(max_length=100)
+    class Meta:
+        app_label = 'reproduce_issue'
+
+# Print the signature of the bulk_create method
+print("Current signature of Person.objects.bulk_create:")
+print(inspect.signature(Person.objects.bulk_create))
+
+# For comparison, let's also print the signature of the queryset method directly
+print("\nSignature of queryset bulk_create (for comparison):")
+print(inspect.signature(Person.objects.get_queryset().bulk_create))
\ No newline at end of file
