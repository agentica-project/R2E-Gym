diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..1ddbfdc94e
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,86 @@
+import os
+import sys
+import django
+from django.db import models, connection
+from django.conf import settings
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    ROOT_URLCONF='',
+)
+
+django.setup()
+
+# Define models similar to the issue description
+class ShortUUIDField(models.CharField):
+    """Mock of ShortUUIDField for testing purposes"""
+    def __init__(self, *args, **kwargs):
+        kwargs['max_length'] = kwargs.get('max_length', 22)
+        super().__init__(*args, **kwargs)
+
+class Account(models.Model):
+    id = ShortUUIDField(primary_key=True, db_collation='utf8_bin', db_index=True, max_length=22)
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'reproduce_issue'
+
+class Address(models.Model):
+    id = ShortUUIDField(primary_key=True, db_collation='utf8_bin', db_index=True, max_length=22)
+    account = models.OneToOneField(Account, on_delete=models.CASCADE)
+    street = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'reproduce_issue'
+
+class Profile(models.Model):
+    id = ShortUUIDField(primary_key=True, db_collation='utf8_bin', db_index=True, max_length=22)
+    account = models.ForeignKey('Account', verbose_name='account', null=True, blank=True, on_delete=models.CASCADE)
+    bio = models.TextField()
+
+    class Meta:
+        app_label = 'reproduce_issue'
+
+def demonstrate_issue():
+    """Demonstrate the issue with db_collation propagation"""
+    # Create a schema editor
+    schema_editor = connection.schema_editor()
+
+    # Simulate the SQL that would be generated for altering a field with db_collation
+    print("SQL for altering Account.id with db_collation:")
+    print("ALTER TABLE `b_manage_account` MODIFY `id` varchar(22) COLLATE `utf8_bin`;")
+
+    # Show the SQL for the foreign key columns without collation
+    print("\nSQL for foreign key columns WITHOUT collation (current behavior):")
+    print("ALTER TABLE `b_manage_address` MODIFY `account_id` varchar(22) NOT NULL;")
+    print("ALTER TABLE `b_manage_profile` MODIFY `account_id` varchar(22) NULL;")
+    print("ALTER TABLE `b_manage_address` ADD CONSTRAINT `b_manage_address_account_id_7de0ae37_fk` FOREIGN KEY (`account_id`) REFERENCES `b_manage_account` (`id`);")
+    print("ALTER TABLE `b_manage_profile` ADD CONSTRAINT `b_manage_profile_account_id_ec864dcc_fk` FOREIGN KEY (`account_id`) REFERENCES `b_manage_account` (`id`);")
+    print("\nThis would FAIL in MySQL because the collation doesn't match.")
+
+    # Show the SQL for foreign key columns WITH collation
+    print("\nSQL for foreign key columns WITH collation (desired behavior):")
+    print("ALTER TABLE `b_manage_address` MODIFY `account_id` varchar(22) NOT NULL COLLATE `utf8_bin`;")
+    print("ALTER TABLE `b_manage_profile` MODIFY `account_id` varchar(22) NULL COLLATE `utf8_bin`;")
+    print("ALTER TABLE `b_manage_address` ADD CONSTRAINT `b_manage_address_account_id_7de0ae37_fk` FOREIGN KEY (`account_id`) REFERENCES `b_manage_account` (`id`);")
+    print("ALTER TABLE `b_manage_profile` ADD CONSTRAINT `b_manage_profile_account_id_ec864dcc_fk` FOREIGN KEY (`account_id`) REFERENCES `b_manage_account` (`id`);")
+    print("\nThis would SUCCEED in MySQL because the collation matches.")
+
+if __name__ == '__main__':
+    print("Testing db_collation propagation to foreign keys")
+    print("=" * 50)
+    print("The issue is that when a primary key field with db_collation is altered,")
+    print("the collation is not propagated to the foreign key columns in referencing tables.")
+    print("=" * 50)
+    demonstrate_issue()
\ No newline at end of file
