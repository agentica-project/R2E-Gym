diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..4f3c32425d
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,129 @@
+import os
+import sys
+import uuid
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+    django.setup()
+
+from django.db import models, connection
+from django.db.models import Q
+
+# Define models for testing
+class SampleWithDefaultPK(models.Model):
+    id = models.UUIDField(primary_key=True, default=uuid.uuid4)
+    name = models.CharField(blank=True, max_length=100)
+
+    class Meta:
+        app_label = 'comprehensive_test'
+
+class SampleWithoutDefaultPK(models.Model):
+    id = models.UUIDField(primary_key=True)
+    name = models.CharField(blank=True, max_length=100)
+
+    class Meta:
+        app_label = 'comprehensive_test'
+
+# Create the tables
+connection.cursor().execute('''
+    CREATE TABLE IF NOT EXISTS comprehensive_test_samplewithdefaultpk (
+        id varchar(36) PRIMARY KEY,
+        name varchar(100) NULL
+    )
+''')
+
+connection.cursor().execute('''
+    CREATE TABLE IF NOT EXISTS comprehensive_test_samplewithoutdefaultpk (
+        id varchar(36) PRIMARY KEY,
+        name varchar(100) NULL
+    )
+''')
+
+def print_query(query, params):
+    print(f"Query: {query}")
+    print(f"Params: {params}")
+    print("-" * 50)
+
+# Monkey patch the cursor to log queries
+original_execute = connection.cursor().execute
+def execute_wrapper(query, params=None):
+    print_query(query, params)
+    return original_execute(query, params)
+
+connection.cursor().execute = execute_wrapper
+
+def test_with_default_pk():
+    print("\n=== Testing with default PK ===")
+
+    # Test 1: Create instance, then save with same PK
+    print("\nTest 1: Create instance, then save with same PK")
+    s0 = SampleWithDefaultPK.objects.create(name="Original")
+    print(f"Created s0 with pk: {s0.pk}, name: {s0.name}")
+
+    s1 = SampleWithDefaultPK(pk=s0.pk, name='Updated')
+    print(f"Created s1 with pk: {s1.pk}, name: {s1.name}")
+
+    s1.save()
+    print(f"After save, s1 name: {s1.name}")
+
+    s_from_db = SampleWithDefaultPK.objects.get(pk=s0.pk)
+    print(f"Record from DB: pk={s_from_db.pk}, name={s_from_db.name}")
+
+    # Test 2: Create instance with explicit PK, then save
+    print("\nTest 2: Create instance with explicit PK, then save")
+    pk_val = uuid.uuid4()
+    s2 = SampleWithDefaultPK(pk=pk_val, name="Explicit PK")
+    print(f"Created s2 with pk: {s2.pk}, name: {s2.name}")
+
+    s2.save()
+    print(f"After save, s2 name: {s2.name}")
+
+    s_from_db = SampleWithDefaultPK.objects.get(pk=pk_val)
+    print(f"Record from DB: pk={s_from_db.pk}, name={s_from_db.name}")
+
+def test_without_default_pk():
+    print("\n=== Testing without default PK ===")
+
+    # Test 3: Create instance with explicit PK, then save
+    print("\nTest 3: Create instance with explicit PK, then save")
+    pk_val = uuid.uuid4()
+    s3 = SampleWithoutDefaultPK(pk=pk_val, name="Explicit PK")
+    print(f"Created s3 with pk: {s3.pk}, name: {s3.name}")
+
+    s3.save()
+    print(f"After save, s3 name: {s3.name}")
+
+    s_from_db = SampleWithoutDefaultPK.objects.get(pk=pk_val)
+    print(f"Record from DB: pk={s_from_db.pk}, name={s_from_db.name}")
+
+    # Test 4: Create instance, then save with same PK
+    print("\nTest 4: Create instance, then save with same PK")
+    s4 = SampleWithoutDefaultPK.objects.create(pk=uuid.uuid4(), name="Original")
+    print(f"Created s4 with pk: {s4.pk}, name: {s4.name}")
+
+    s5 = SampleWithoutDefaultPK(pk=s4.pk, name='Updated')
+    print(f"Created s5 with pk: {s5.pk}, name: {s5.name}")
+
+    s5.save()
+    print(f"After save, s5 name: {s5.name}")
+
+    s_from_db = SampleWithoutDefaultPK.objects.get(pk=s4.pk)
+    print(f"Record from DB: pk={s_from_db.pk}, name={s_from_db.name}")
+
+if __name__ == "__main__":
+    test_with_default_pk()
+    test_without_default_pk()
\ No newline at end of file
diff --git a/django/db/models/base.py b/django/db/models/base.py
index e3b14a41a0..523f490ec0 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -854,7 +854,18 @@ class Model(metaclass=ModelBase):
             self._meta.pk.default and
             self._meta.pk.default is not NOT_PROVIDED
         ):
-            force_insert = True
+            # Check if the primary key was explicitly set
+            # If it was, don't force an INSERT
+            pk_field = self._meta.pk
+            pk_name = pk_field.name
+
+            # Check if the primary key exists in the database
+            if cls._base_manager.using(using).filter(pk=pk_val).exists():
+                # If the primary key already exists in the database, don't force an INSERT
+                pass
+            else:
+                # Otherwise, force an INSERT (this is the original behavior)
+                force_insert = True
         # If possible, try an UPDATE. If that doesn't update anything, do an INSERT.
         if pk_set and not force_insert:
             base_qs = cls._base_manager.using(using)
diff --git a/query_test.py b/query_test.py
new file mode 100644
index 0000000000..4c62634b2b
--- /dev/null
+++ b/query_test.py
@@ -0,0 +1,95 @@
+import os
+import sys
+import uuid
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+    django.setup()
+
+from django.db import models, connection
+from django.db.models import Q
+
+# Define the model from the issue description
+class Sample(models.Model):
+    id = models.UUIDField(primary_key=True, default=uuid.uuid4)
+    name = models.CharField(blank=True, max_length=100)
+
+    class Meta:
+        app_label = 'query_test'
+
+# Create the table
+connection.cursor().execute('''
+    CREATE TABLE IF NOT EXISTS query_test_sample (
+        id varchar(36) PRIMARY KEY,
+        name varchar(100) NULL
+    )
+''')
+
+def print_query(query, params):
+    print(f"Query: {query}")
+    print(f"Params: {params}")
+    print("-" * 50)
+
+# Monkey patch the cursor to log queries
+original_execute = connection.cursor().execute
+queries = []
+
+def execute_wrapper(query, params=None):
+    queries.append((query, params))
+    print_query(query, params)
+    return original_execute(query, params)
+
+connection.cursor().execute = execute_wrapper
+
+# Test the behavior
+def test_save_with_explicit_pk():
+    global queries
+    print("Testing save with explicit PK...")
+
+    # Clear queries
+    queries = []
+
+    # Create first instance
+    s0 = Sample.objects.create(name="Original")
+    print(f"Created s0 with pk: {s0.pk}, name: {s0.name}")
+    print("\nQueries for create():")
+    for q, p in queries:
+        print_query(q, p)
+    queries = []
+
+    # Create second instance with same PK but different name
+    s1 = Sample(pk=s0.pk, name='Updated')
+    print(f"\nCreated s1 with pk: {s1.pk}, name: {s1.name}")
+    print("\nQueries for instantiation with explicit PK:")
+    for q, p in queries:
+        print_query(q, p)
+    queries = []
+
+    # Save the second instance
+    s1.save()
+    print(f"\nAfter save, s1 name: {s1.name}")
+    print("\nQueries for save() with explicit PK:")
+    for q, p in queries:
+        print_query(q, p)
+    queries = []
+
+    # Verify the update worked
+    s_from_db = Sample.objects.get(pk=s0.pk)
+    print(f"\nRecord from DB: pk={s_from_db.pk}, name={s_from_db.name}")
+
+if __name__ == "__main__":
+    test_save_with_explicit_pk()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..b1aaa4f389
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,80 @@
+import os
+import sys
+import uuid
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+    django.setup()
+
+from django.db import models, connection
+from django.db.models import Q
+
+# Define the model from the issue description
+class Sample(models.Model):
+    id = models.UUIDField(primary_key=True, default=uuid.uuid4)
+    name = models.CharField(blank=True, max_length=100)
+
+    class Meta:
+        app_label = 'reproduce_issue'
+
+# Create the tables
+connection.cursor().execute('''
+    CREATE TABLE IF NOT EXISTS reproduce_issue_sample (
+        id varchar(36) PRIMARY KEY,
+        name varchar(100) NULL
+    )
+''')
+
+def print_query(query, params):
+    print(f"Query: {query}")
+    print(f"Params: {params}")
+    print("-" * 50)
+
+# Monkey patch the cursor to log queries
+original_execute = connection.cursor().execute
+def execute_wrapper(query, params=None):
+    print_query(query, params)
+    return original_execute(query, params)
+
+connection.cursor().execute = execute_wrapper
+
+# Test the behavior
+def test_save_with_explicit_pk():
+    print("Testing save with explicit PK...")
+
+    # Create first instance
+    s0 = Sample.objects.create()
+    print(f"Created s0 with pk: {s0.pk}")
+
+    # Create second instance with same PK but different name
+    s1 = Sample(pk=s0.pk, name='Test 1')
+    print(f"Created s1 with pk: {s1.pk} and name: {s1.name}")
+
+    # Save the second instance
+    s1.save()
+    print(f"After save, s1 name: {s1.name}")
+
+    # Check if the record was updated or a new one was inserted
+    count = Sample.objects.filter(pk=s0.pk).count()
+    print(f"Number of records with pk {s0.pk}: {count}")
+
+    # Get the record from the database
+    s_from_db = Sample.objects.get(pk=s0.pk)
+    print(f"Record from DB: pk={s_from_db.pk}, name={s_from_db.name}")
+
+if __name__ == "__main__":
+    test_save_with_explicit_pk()
\ No newline at end of file
diff --git a/simple_test.py b/simple_test.py
new file mode 100644
index 0000000000..8636bb14de
--- /dev/null
+++ b/simple_test.py
@@ -0,0 +1,62 @@
+import os
+import sys
+import uuid
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+    django.setup()
+
+from django.db import models, connection
+
+# Define the model from the issue description
+class Sample(models.Model):
+    id = models.UUIDField(primary_key=True, default=uuid.uuid4)
+    name = models.CharField(blank=True, max_length=100)
+
+    class Meta:
+        app_label = 'simple_test'
+
+# Create the table
+connection.cursor().execute('''
+    CREATE TABLE IF NOT EXISTS simple_test_sample (
+        id varchar(36) PRIMARY KEY,
+        name varchar(100) NULL
+    )
+''')
+
+# Test the behavior
+def test_save_with_explicit_pk():
+    print("Testing save with explicit PK...")
+
+    # Create first instance
+    s0 = Sample.objects.create(name="Original")
+    print(f"Created s0 with pk: {s0.pk}, name: {s0.name}")
+
+    # Create second instance with same PK but different name
+    s1 = Sample(pk=s0.pk, name='Updated')
+    print(f"Created s1 with pk: {s1.pk}, name: {s1.name}")
+
+    # Save the second instance
+    s1.save()
+    print(f"After save, s1 name: {s1.name}")
+
+    # Verify the update worked
+    s_from_db = Sample.objects.get(pk=s0.pk)
+    print(f"Record from DB: pk={s_from_db.pk}, name={s_from_db.name}")
+
+if __name__ == "__main__":
+    test_save_with_explicit_pk()
\ No newline at end of file
