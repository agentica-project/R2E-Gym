diff --git a/sympy/physics/hep/gamma_matrices.py b/sympy/physics/hep/gamma_matrices.py
index 23284e4a92..cf5afe44d1 100644
--- a/sympy/physics/hep/gamma_matrices.py
+++ b/sympy/physics/hep/gamma_matrices.py
@@ -674,7 +674,7 @@ def kahane_simplify(expression):
                 pointer = next_ones[0]
 
             if pointer >= first_dum_pos and free_pos[pointer] is not None:
-                prepend_indices.insert(0, free_pos[pointer])
+                prepend_indices.append(free_pos[pointer])
         # if `prepend_indices` is void, it means there are no free indices
         # in the loop (and it can be shown that there must be a virtual index),
         # loops of virtual indices only contribute by a factor of two:
@@ -694,7 +694,7 @@ def kahane_simplify(expression):
 
     # If `first_dum_pos` is not zero, it means that there are trailing free gamma
     # matrices in front of `expression`, so multiply by them:
-    for i in range(0, first_dum_pos):
+    for i in range(first_dum_pos-1, -1, -1):  # Iterate in reverse order
         [ri.insert(0, free_pos[i]) for ri in resulting_indices]
 
     resulting_expr = S.Zero
diff --git a/test_kahane_bug.py b/test_kahane_bug.py
new file mode 100644
index 0000000000..d544d8e41f
--- /dev/null
+++ b/test_kahane_bug.py
@@ -0,0 +1,26 @@
+import sympy
+from sympy.physics.hep.gamma_matrices import GammaMatrix as G, LorentzIndex
+from sympy.physics.hep.gamma_matrices import kahane_simplify
+from sympy.tensor.tensor import tensor_indices
+
+def test_kahane_leading_gamma_matrix_bug():
+    mu, nu, rho, sigma = tensor_indices("mu, nu, rho, sigma", LorentzIndex)
+
+    # Case 1: Gamma matrices with contraction at the end
+    t = G(mu)*G(-mu)*G(rho)*G(sigma)
+    r = kahane_simplify(t)
+    print("Case 1 result:", r)
+    expected = 4*G(rho)*G(sigma)
+    print("Expected:", expected)
+    print("Equals expected:", r.equals(expected))
+
+    # Case 2: Gamma matrices with contraction at the beginning
+    t = G(rho)*G(sigma)*G(mu)*G(-mu)
+    r = kahane_simplify(t)
+    print("\nCase 2 result:", r)
+    expected = 4*G(rho)*G(sigma)
+    print("Expected:", expected)
+    print("Equals expected:", r.equals(expected))
+
+if __name__ == "__main__":
+    test_kahane_leading_gamma_matrix_bug()
\ No newline at end of file
