diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py
index 88adadb37d..51578cf1c0 100644
--- a/django/forms/boundfield.py
+++ b/django/forms/boundfield.py
@@ -1,6 +1,7 @@
 import datetime
 import re
 
+from django.core.exceptions import ValidationError
 from django.forms.utils import flatatt, pretty_name
 from django.forms.widgets import Textarea, TextInput
 from django.utils.functional import cached_property
@@ -232,6 +233,31 @@ class BoundField:
     def widget_type(self):
         return re.sub(r'widget$|input$', '', self.field.widget.__class__.__name__.lower())
 
+    def _did_change(self):
+        """
+        Return True if the field data has changed from the initial value.
+        """
+        if not self.form.is_bound:
+            return False
+
+        data_value = self.data
+        if not self.field.show_hidden_initial:
+            # Use the BoundField's initial as this is the value passed to
+            # the widget.
+            initial_value = self.initial
+        else:
+            initial_prefixed_name = self.form.add_initial_prefix(self.name)
+            hidden_widget = self.field.hidden_widget()
+            try:
+                initial_value = self.field.to_python(
+                    self.form._widget_data_value(hidden_widget, initial_prefixed_name)
+                )
+            except ValidationError:
+                # Always assume data has changed if validation fails.
+                return True
+
+        return self.field.has_changed(initial_value, data_value)
+
 
 @html_safe
 class BoundWidget:
diff --git a/django/forms/forms.py b/django/forms/forms.py
index d14037bfe9..73acd3f324 100644
--- a/django/forms/forms.py
+++ b/django/forms/forms.py
@@ -388,13 +388,15 @@ class BaseForm:
 
     def _clean_fields(self):
         for name, field in self.fields.items():
+            bf = self[name]  # Get the BoundField
             if field.disabled:
-                value = self.get_initial_for_field(field, name)
+                value = bf.initial
             else:
-                value = self._field_data_value(field, self.add_prefix(name))
+                # Use the BoundField's data property which handles data retrieval
+                value = bf.data
             try:
                 if isinstance(field, FileField):
-                    initial = self.get_initial_for_field(field, name)
+                    initial = bf.initial
                     value = field.clean(value, initial)
                 else:
                     value = field.clean(value)
@@ -434,29 +436,15 @@ class BaseForm:
         """Return True if data differs from initial."""
         return bool(self.changed_data)
 
+    def _bound_items(self):
+        """
+        Iterate over the form's fields returning a tuple of (name, BoundField).
+        """
+        return [(name, self[name]) for name in self.fields]
+
     @cached_property
     def changed_data(self):
-        data = []
-        for name, field in self.fields.items():
-            data_value = self._field_data_value(field, self.add_prefix(name))
-            if not field.show_hidden_initial:
-                # Use the BoundField's initial as this is the value passed to
-                # the widget.
-                initial_value = self[name].initial
-            else:
-                initial_prefixed_name = self.add_initial_prefix(name)
-                hidden_widget = field.hidden_widget()
-                try:
-                    initial_value = field.to_python(
-                        self._widget_data_value(hidden_widget, initial_prefixed_name)
-                    )
-                except ValidationError:
-                    # Always assume data has changed if validation fails.
-                    data.append(name)
-                    continue
-            if field.has_changed(initial_value, data_value):
-                data.append(name)
-        return data
+        return [name for name, bf in self._bound_items() if bf._did_change()]
 
     @property
     def media(self):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..25532997f3
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,46 @@
+import datetime
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        USE_I18N=False,
+        USE_TZ=False,
+        INSTALLED_APPS=[
+            'django.forms',
+        ],
+    )
+    django.setup()
+
+from django import forms
+
+def test_clean_fields_vs_initial():
+    """Test that _clean_fields() and initial values are consistent."""
+    now = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)
+
+    class DateTimeForm(forms.Form):
+        dt = forms.DateTimeField(initial=lambda: now, disabled=True)
+
+    form = DateTimeForm({})
+    # Get the cleaned data from _clean_fields
+    form.full_clean()
+
+    # Get the initial value through BoundField
+    initial_value = form['dt'].initial
+
+    # Get the cleaned value
+    cleaned_value = form.cleaned_data['dt']
+
+    print(f"Initial value via BoundField: {initial_value}")
+    print(f"Cleaned value from _clean_fields: {cleaned_value}")
+    print(f"Are they equal? {initial_value == cleaned_value}")
+
+    # Test changed_data
+    print("\nTesting changed_data:")
+    form2 = DateTimeForm({'dt': '2006-10-25 14:30:45'})
+    print(f"changed_data: {form2.changed_data}")
+
+if __name__ == "__main__":
+    test_clean_fields_vs_initial()
\ No newline at end of file
diff --git a/test_changes.py b/test_changes.py
new file mode 100644
index 0000000000..8a64ec8608
--- /dev/null
+++ b/test_changes.py
@@ -0,0 +1,72 @@
+import datetime
+import os
+import django
+from django.conf import settings
+from django import forms
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        USE_I18N=False,
+        USE_TZ=False,
+        INSTALLED_APPS=[
+            'django.forms',
+        ],
+    )
+    django.setup()
+
+def test_clean_fields_vs_initial():
+    """Test that _clean_fields() and initial values are consistent."""
+    now = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)
+
+    class DateTimeForm(forms.Form):
+        dt = forms.DateTimeField(initial=lambda: now, disabled=True)
+
+    form = DateTimeForm({})
+    # Get the cleaned data from _clean_fields
+    form.full_clean()
+
+    # Get the initial value through BoundField
+    initial_value = form['dt'].initial
+
+    # Get the cleaned value
+    cleaned_value = form.cleaned_data['dt']
+
+    print(f"Initial value via BoundField: {initial_value}")
+    print(f"Cleaned value from _clean_fields: {cleaned_value}")
+    print(f"Are they equal? {initial_value == cleaned_value}")
+
+    # Test changed_data
+    print("\nTesting changed_data:")
+    form2 = DateTimeForm({'dt': '2006-10-25 14:30:45'})
+    print(f"changed_data: {form2.changed_data}")
+
+def test_changed_data_with_multiple_fields():
+    """Test changed_data with multiple fields."""
+    class MultiFieldForm(forms.Form):
+        field1 = forms.CharField(initial="initial value")
+        field2 = forms.IntegerField(initial=42)
+        field3 = forms.BooleanField(initial=True)
+
+    # No changes
+    form1 = MultiFieldForm({
+        'field1': 'initial value',
+        'field2': '42',
+        'field3': 'on'
+    })
+    print(f"No changes - changed_data: {form1.changed_data}")
+
+    # Some changes
+    form2 = MultiFieldForm({
+        'field1': 'changed',
+        'field2': '42',  # No change
+        'field3': ''     # Change to False
+    })
+    print(f"Some changes - changed_data: {form2.changed_data}")
+
+if __name__ == "__main__":
+    print("Testing _clean_fields vs initial values:")
+    test_clean_fields_vs_initial()
+
+    print("\nTesting changed_data with multiple fields:")
+    test_changed_data_with_multiple_fields()
\ No newline at end of file
