diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..c3a5976ac2
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,68 @@
+from sympy.parsing.sympy_parser import parse_expr
+from sympy.core.relational import Lt, Le, Gt, Ge, Eq, Ne
+import sympy
+
+# Test the original issue
+print("Testing original issue:")
+result = parse_expr('1 < 2', evaluate=False)
+expected = Lt(1, 2, evaluate=False)
+print(f"parse_expr('1 < 2', evaluate=False) = {result}")
+print(f"Lt(1, 2, evaluate=False) = {expected}")
+print(f"Are they equal? {result == expected}")
+print(f"Are they the same type? {type(result) == type(expected)}")
+print("-" * 50)
+
+# Test all relational operators
+print("Testing all relational operators:")
+operators = [
+    ('1 < 2', Lt),
+    ('1 <= 2', Le),
+    ('1 > 2', Gt),
+    ('1 >= 2', Ge),
+    ('1 == 2', Eq),
+    ('1 != 2', Ne)
+]
+
+for expr_str, rel_class in operators:
+    result = parse_expr(expr_str, evaluate=False)
+    expected = rel_class(1, 2, evaluate=False)
+    print(f"{expr_str}, evaluate=False = {result}")
+    print(f"Expected: {expected}")
+    print(f"Equal: {result == expected}")
+    print(f"Same type: {type(result) == type(expected)}")
+    print("-" * 50)
+
+# Test with variables
+print("Testing with variables:")
+x, y = sympy.symbols('x y')
+exprs = [
+    ('x < y', Lt),
+    ('x <= y', Le),
+    ('x > y', Gt),
+    ('x >= y', Ge),
+    ('x == y', Eq),
+    ('x != y', Ne)
+]
+
+for expr_str, rel_class in exprs:
+    result = parse_expr(expr_str, evaluate=False)
+    expected = rel_class(sympy.Symbol('x'), sympy.Symbol('y'), evaluate=False)
+    print(f"{expr_str}, evaluate=False = {result}")
+    print(f"Expected: {expected}")
+    print(f"Equal: {result == expected}")
+    print(f"Same type: {type(result) == type(expected)}")
+    print("-" * 50)
+
+# Test with expressions
+print("Testing with expressions:")
+exprs = [
+    ('x + 1 < y * 2', Lt),
+    ('x**2 >= y', Ge),
+    ('x/y == 1', Eq)
+]
+
+for expr_str, rel_class in exprs:
+    result = parse_expr(expr_str, evaluate=False)
+    print(f"{expr_str}, evaluate=False = {result}")
+    print(f"Type: {type(result)}")
+    print("-" * 50)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..b403affaff
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,15 @@
+from sympy.parsing.sympy_parser import parse_expr
+from sympy.core.relational import Lt
+
+# Reproduce the issue
+result = parse_expr('1 < 2', evaluate=False)
+print(f"parse_expr('1 < 2', evaluate=False) = {result}")
+print(f"Type: {type(result)}")
+
+# Expected behavior
+expected = Lt(1, 2, evaluate=False)
+print(f"Lt(1, 2, evaluate=False) = {expected}")
+print(f"Type: {type(expected)}")
+
+# Check if they are equal
+print(f"Are they equal? {result == expected}")
\ No newline at end of file
diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py
index 52711d1324..adc693078a 100644
--- a/sympy/parsing/sympy_parser.py
+++ b/sympy/parsing/sympy_parser.py
@@ -1110,6 +1110,15 @@ class EvaluateFalseTransformer(ast.NodeTransformer):
         ast.BitAnd: 'And',
         ast.BitXor: 'Not',
     }
+    # Map AST comparison operators to SymPy relational classes
+    compare_ops = {
+        ast.Lt: 'Lt',
+        ast.LtE: 'Le',
+        ast.Gt: 'Gt',
+        ast.GtE: 'Ge',
+        ast.Eq: 'Eq',
+        ast.NotEq: 'Ne',
+    }
     functions = (
         'Abs', 'im', 're', 'sign', 'arg', 'conjugate',
         'acos', 'acot', 'acsc', 'asec', 'asin', 'atan',
@@ -1186,6 +1195,29 @@ def visit_BinOp(self, node):
             return new_node
         return node
 
+    def visit_Compare(self, node):
+        # Handle relational operators (e.g., <, >, <=, >=, ==, !=)
+        if len(node.ops) != 1 or len(node.comparators) != 1:
+            # Only handle simple binary comparisons
+            return node
+
+        op = node.ops[0]
+        if not isinstance(op, tuple(self.compare_ops.keys())):
+            return node
+
+        sympy_class = self.compare_ops[type(op)]
+        left = self.visit(node.left)
+        right = self.visit(node.comparators[0])
+
+        # Create a call to the appropriate SymPy relational class with evaluate=False
+        return ast.Call(
+            func=ast.Name(id=sympy_class, ctx=ast.Load()),
+            args=[left, right],
+            keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))],
+            starargs=None,
+            kwargs=None
+        )
+
     def visit_Call(self, node):
         new_node = self.generic_visit(node)
         if isinstance(node.func, ast.Name) and node.func.id in self.functions:
diff --git a/test_all_relational.py b/test_all_relational.py
new file mode 100644
index 0000000000..011d14717a
--- /dev/null
+++ b/test_all_relational.py
@@ -0,0 +1,21 @@
+from sympy.parsing.sympy_parser import parse_expr
+from sympy.core.relational import Lt, Le, Gt, Ge, Eq, Ne
+
+# Test all relational operators
+operators = [
+    ('1 < 2', Lt),
+    ('1 <= 2', Le),
+    ('1 > 2', Gt),
+    ('1 >= 2', Ge),
+    ('1 == 2', Eq),
+    ('1 != 2', Ne)
+]
+
+for expr_str, rel_class in operators:
+    result = parse_expr(expr_str, evaluate=False)
+    expected = rel_class(1, 2, evaluate=False)
+    print(f"{expr_str}, evaluate=False = {result}")
+    print(f"Type: {type(result)}")
+    print(f"Expected: {expected}")
+    print(f"Equal: {result == expected}")
+    print("-" * 50)
\ No newline at end of file
