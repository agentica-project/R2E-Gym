diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 00000000..479c1ad8
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,45 @@
+#!/usr/bin/env python
+# Comprehensive test for Digest Authentication qop-options quoting
+
+import requests
+from requests.auth import HTTPDigestAuth
+
+def test_qop_quoting():
+    # Test with different qop values
+    test_cases = [
+        {'qop': 'auth'},
+        {'qop': 'auth,auth-int'}
+    ]
+
+    for case in test_cases:
+        print(f"\nTesting with qop={case['qop']}")
+
+        # Create a mock server response with WWW-Authenticate header
+        mock_challenge = {
+            'realm': 'testrealm@host.com',
+            'nonce': 'dcd98b7102dd2f0e8b11d0f600bfb0c093',
+            'qop': case['qop']
+        }
+
+        # Create a DigestAuth instance
+        auth = HTTPDigestAuth('user', 'pass')
+        auth.chal = mock_challenge
+
+        # Make a request with Digest Authentication
+        url = 'http://example.com/digest-auth'
+        method = 'GET'
+
+        # Get the authorization header that would be sent
+        header = auth.build_digest_header(method, url)
+        print(f"Generated Authorization header: {header}")
+
+        # Verify that qop is quoted
+        if header and 'qop="' not in header:
+            print(f"FAIL: qop is not quoted in the header")
+        elif not header:
+            print(f"NOTE: No header generated for qop={case['qop']}")
+        else:
+            print(f"PASS: qop is correctly quoted")
+
+if __name__ == "__main__":
+    test_qop_quoting()
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..1d7fd9a9
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,33 @@
+#!/usr/bin/env python
+# Script to reproduce the Digest Authentication qop-options issue
+
+import requests
+from requests.auth import HTTPDigestAuth
+
+# Create a mock server response with WWW-Authenticate header
+# that includes qop-options
+mock_challenge = {
+    'realm': 'testrealm@host.com',
+    'nonce': 'dcd98b7102dd2f0e8b11d0f600bfb0c093',
+    'qop': 'auth,auth-int'  # This should be quoted according to RFC2617
+}
+
+# Create a DigestAuth instance
+auth = HTTPDigestAuth('user', 'pass')
+auth.chal = mock_challenge
+
+# Make a request with Digest Authentication
+url = 'http://example.com/digest-auth'
+method = 'GET'
+
+# Get the authorization header that would be sent
+header = auth.build_digest_header(method, url)
+print("Generated Authorization header:")
+print(header)
+
+# Check if qop is quoted
+if ', qop=auth' in header:
+    print("\nISSUE FOUND: qop is not quoted as required by RFC2617")
+    print("It should be: , qop=\"auth\"")
+else:
+    print("\nqop is correctly quoted")
\ No newline at end of file
diff --git a/requests/auth.py b/requests/auth.py
index a3de123d..48416e5f 100644
--- a/requests/auth.py
+++ b/requests/auth.py
@@ -144,7 +144,7 @@ class HTTPDigestAuth(AuthBase):
         if entdig:
             base += ', digest="%s"' % entdig
         if qop:
-            base += ', qop=auth, nc=%s, cnonce="%s"' % (ncvalue, cnonce)
+            base += ', qop="auth", nc=%s, cnonce="%s"' % (ncvalue, cnonce)
 
         return 'Digest %s' % (base)
 
