diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py
index 2d3072da04..38f4630908 100644
--- a/lib/matplotlib/colors.py
+++ b/lib/matplotlib/colors.py
@@ -727,9 +727,12 @@ class Colormap:
                 xa = xa.astype(int)
         # Set the over-range indices before the under-range;
         # otherwise the under-range values get converted to over-range.
-        xa[xa > self.N - 1] = self._i_over
-        xa[xa < 0] = self._i_under
-        xa[mask_bad] = self._i_bad
+        over_mask = xa > self.N - 1
+        under_mask = xa < 0
+        xa[over_mask] = np.array(self._i_over).astype(xa.dtype)
+        xa[under_mask] = np.array(self._i_under).astype(xa.dtype)
+        if mask_bad.any():
+            xa[mask_bad] = np.array(self._i_bad).astype(xa.dtype)
 
         lut = self._lut
         if bytes:
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..e55f77e01f
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,37 @@
+import matplotlib.pyplot as plt
+import numpy as np
+import warnings
+
+# Enable all warnings
+warnings.filterwarnings('always')
+
+# Test case 1: Empty array with uint8 dtype
+print("Test case 1: Empty array with uint8 dtype")
+result = plt.get_cmap()(np.empty((0, ), dtype=np.uint8))
+print("Success!")
+
+# Test case 2: Array with values
+print("\nTest case 2: Array with values")
+arr = np.array([0, 0.5, 1.0])
+result = plt.get_cmap()(arr)
+print("Success!")
+
+# Test case 3: Array with out-of-bounds values
+print("\nTest case 3: Array with out-of-bounds values")
+arr = np.array([-1, 1.5, 2.0])
+result = plt.get_cmap()(arr)
+print("Success!")
+
+# Test case 4: Masked array
+print("\nTest case 4: Masked array")
+arr = np.ma.array([0, 0.5, 1.0], mask=[0, 1, 0])
+result = plt.get_cmap()(arr)
+print("Success!")
+
+# Test case 5: Array with NaN values
+print("\nTest case 5: Array with NaN values")
+arr = np.array([0, np.nan, 1.0])
+result = plt.get_cmap()(arr)
+print("Success!")
+
+print("\nAll tests passed!")
\ No newline at end of file
