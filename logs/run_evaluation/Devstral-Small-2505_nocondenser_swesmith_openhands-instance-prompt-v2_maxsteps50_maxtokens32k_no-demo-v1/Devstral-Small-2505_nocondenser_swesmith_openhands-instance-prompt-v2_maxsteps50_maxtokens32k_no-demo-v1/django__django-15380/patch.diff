diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..11a5c962ee
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,133 @@
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+    django.setup()
+
+from django.db import models
+from django.apps import apps
+from django.db.migrations.state import ProjectState
+from django.db.migrations.autodetector import MigrationAutodetector
+from django.db.migrations.questioner import MigrationQuestioner
+
+# Set up a simple model structure
+class MyModel(models.Model):
+    old_field = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'test_one'
+        managed = False  # We're just simulating, not actually creating tables
+
+class MyModel2(models.Model):
+    new_field = models.CharField(max_length=100)  # Rename the field
+
+    class Meta:
+        app_label = 'test_one'
+        managed = False  # We're just simulating, not actually creating tables
+
+
+
+
+
+# Create a mock questioner that always says "yes"
+class MockQuestioner(MigrationQuestioner):
+    def ask_rename(self, model_name, old_name, new_name, field):
+        return True
+
+    def ask_rename_model(self, old_model, new_model):
+        return True
+
+# Create mock states
+from_state = ProjectState()
+to_state = ProjectState()
+
+# Create model states
+from django.db.migrations.state import ModelState
+
+# Register models in from_state and to_state
+from_state.add_model(ModelState.from_model(MyModel))
+to_state.add_model(ModelState.from_model(MyModel2))
+
+# Create autodetector
+autodetector = MigrationAutodetector(
+    from_state=from_state,
+    to_state=to_state,
+    questioner=MockQuestioner()
+)
+
+# Initialize necessary attributes
+autodetector._detect_changes.__func__.get = lambda x, y: None  # Mock the get method
+autodetector.old_model_keys = set()
+autodetector.new_model_keys = set()
+autodetector.old_field_keys = set()
+autodetector.new_field_keys = set()
+autodetector.old_proxy_keys = set()
+autodetector.new_proxy_keys = set()
+autodetector.old_unmanaged_keys = set()
+autodetector.new_unmanaged_keys = set()
+autodetector.renamed_models = {
+        ('test_one', 'mymodel2'): 'mymodel'  # This simulates a model rename
+    }
+autodetector.renamed_models_rel = {}
+autodetector.generated_operations = {}
+
+# Set up field keys to simulate field renaming
+autodetector.old_field_keys = set([
+    ('test_one', 'mymodel', 'old_field')
+])
+
+autodetector.new_field_keys = set([
+    ('test_one', 'mymodel2', 'new_field')
+])
+
+# Set up model keys to simulate model renaming
+autodetector.old_model_keys = set([
+    ('test_one', 'mymodel')
+])
+
+autodetector.new_model_keys = set([
+    ('test_one', 'mymodel2')
+])
+
+# Set up to_state.models to simulate the model being renamed
+to_state.models = {
+    ('test_one', 'mymodel2'): to_state.models[('test_one', 'mymodel2')]
+    # Note: We're not including ('test_one', 'mymodel') in to_state.models
+    # This simulates the model being completely removed from to_state with its old name
+}
+
+# Make sure the autodetector uses the updated to_state
+autodetector.to_state = to_state
+
+# Note: We're using custom model and field keys for testing
+
+# Try to detect changes
+try:
+    # Prepare field lists
+    autodetector._prepare_field_lists()
+    autodetector._generate_through_model_map()
+
+    # Generate renamed models first
+    autodetector.generate_renamed_models()
+
+    # Now try to generate renamed fields - this is where the error occurs
+    autodetector.generate_renamed_fields()
+    print("generate_renamed_fields completed successfully!")
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {e}")
+    import traceback
+    traceback.print_exc()
\ No newline at end of file
