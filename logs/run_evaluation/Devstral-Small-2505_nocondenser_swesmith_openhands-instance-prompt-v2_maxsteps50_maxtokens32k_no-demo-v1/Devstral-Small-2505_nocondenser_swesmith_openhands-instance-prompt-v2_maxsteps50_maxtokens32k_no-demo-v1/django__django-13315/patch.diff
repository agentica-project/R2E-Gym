diff --git a/tests/limit_choices_to_duplicate/__init__.py b/tests/limit_choices_to_duplicate/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/limit_choices_to_duplicate/test_duplicate_options.py b/tests/limit_choices_to_duplicate/test_duplicate_options.py
new file mode 100644
index 0000000000..88ab6df6b9
--- /dev/null
+++ b/tests/limit_choices_to_duplicate/test_duplicate_options.py
@@ -0,0 +1,64 @@
+from django import forms
+from django.db import models
+from django.test import TestCase
+from django.db.models import Q
+
+class Category(models.Model):
+    name = models.CharField(max_length=100)
+    is_active = models.BooleanField(default=True)
+
+    def __str__(self):
+        return self.name
+
+class Product(models.Model):
+    name = models.CharField(max_length=100)
+    category = models.ForeignKey(
+        Category,
+        models.CASCADE,
+        limit_choices_to=Q(is_active=True)
+    )
+
+    def __str__(self):
+        return self.name
+
+class ProductForm(forms.ModelForm):
+    class Meta:
+        model = Product
+        fields = ['name', 'category']
+
+class LimitChoicesToDuplicateTest(TestCase):
+    def test_duplicate_options_in_formfield(self):
+        # Create a category
+        category = Category.objects.create(name="Electronics", is_active=True)
+
+        # Create a form
+        form = ProductForm()
+
+        # Get the choices for the category field
+        choices = dict(form.fields['category'].choices)
+
+        # Count how many times the category appears in the choices
+        # If there are duplicates, it will appear more than once
+        count = list(choices.values()).count(str(category))
+
+        self.assertEqual(count, 1, "Category appears multiple times in choices")
+
+    def test_duplicate_options_with_join_in_q(self):
+        # Create two categories
+        category1 = Category.objects.create(name="Electronics", is_active=True)
+        category2 = Category.objects.create(name="Books", is_active=True)
+
+        # Create a product with category1
+        Product.objects.create(name="Laptop", category=category1)
+
+        # Create a form for a new product
+        form = ProductForm()
+
+        # Get the choices for the category field
+        choices = dict(form.fields['category'].choices)
+
+        # Count the number of choices
+        num_choices = len(choices)
+
+        # There should be 2 categories (Electronics and Books)
+        self.assertEqual(num_choices, 3)  # 2 categories + empty choice
\ No newline at end of file
