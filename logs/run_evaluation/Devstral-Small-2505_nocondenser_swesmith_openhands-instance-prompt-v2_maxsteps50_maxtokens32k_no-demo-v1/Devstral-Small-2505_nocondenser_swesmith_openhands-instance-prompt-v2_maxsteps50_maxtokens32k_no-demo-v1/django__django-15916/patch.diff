diff --git a/django/forms/models.py b/django/forms/models.py
index 192d9fad94..c28155bc37 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -630,8 +630,15 @@ def modelform_factory(
     # creating needs to inherit from the parent's inner meta.
     bases = (form.Meta,) if hasattr(form, "Meta") else ()
     Meta = type("Meta", bases, attrs)
+
+    # Check if formfield_callback is provided as an argument or in the form's Meta
     if formfield_callback:
         Meta.formfield_callback = staticmethod(formfield_callback)
+    elif hasattr(form, "Meta") and hasattr(form.Meta, "formfield_callback"):
+        # Use the formfield_callback from the form's Meta if no argument is provided
+        formfield_callback = form.Meta.formfield_callback
+        Meta.formfield_callback = staticmethod(formfield_callback)
+
     # Give this new form class a reasonable name.
     class_name = model.__name__ + "Form"
 
diff --git a/test_formfield_callback.py b/test_formfield_callback.py
new file mode 100644
index 0000000000..6252b4eeb6
--- /dev/null
+++ b/test_formfield_callback.py
@@ -0,0 +1,69 @@
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+    django.setup()
+
+from django import forms
+from django.db import models
+
+class MyModel(models.Model):
+    active = models.BooleanField()
+    name = models.CharField(max_length=64, blank=True, null=True)
+
+    class Meta:
+        app_label = 'test_app'
+        # This is needed to avoid "App with label 'test_app' doesn't have a model 'mymodel'."
+        # error when running the test
+        managed = False
+
+def all_required(field, **kwargs):
+    formfield = field.formfield(**kwargs)
+    formfield.required = True
+    return formfield
+
+class MyForm(forms.ModelForm):
+    formfield_callback = all_required
+
+    class Meta:
+        model = MyModel
+        formfield_callback = all_required
+        fields = ['active', 'name']
+
+# Create the factory form
+FactoryForm = forms.modelform_factory(MyModel, form=MyForm)
+
+# Test if the formfield_callback is used in both forms
+def test_formfield_callback():
+    # Create instances of both forms
+    my_form = MyForm()
+    factory_form = FactoryForm()
+
+    # Check if the fields are required in both forms
+    active_field_required = my_form.fields['active'].required
+    factory_active_field_required = factory_form.fields['active'].required
+
+    print(f"MyForm active field required: {active_field_required}")
+    print(f"FactoryForm active field required: {factory_active_field_required}")
+
+    # Both fields should be required if the formfield_callback is working correctly
+    assert active_field_required == True, "MyForm active field is not required"
+    assert factory_active_field_required == True, "FactoryForm active field is not required"
+
+    print("Test passed!")
+
+if __name__ == "__main__":
+    test_formfield_callback()
\ No newline at end of file
diff --git a/test_modelform_factory.py b/test_modelform_factory.py
new file mode 100644
index 0000000000..ddbd997488
--- /dev/null
+++ b/test_modelform_factory.py
@@ -0,0 +1,72 @@
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+    django.setup()
+
+from django import forms
+from django.db import models
+
+# Test model
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    age = models.IntegerField()
+
+    class Meta:
+        app_label = 'test_app'
+        managed = False
+
+# Test formfield_callback
+def all_required(field, **kwargs):
+    formfield = field.formfield(**kwargs)
+    formfield.required = True
+    return formfield
+
+# Test form with formfield_callback
+class BaseForm(forms.ModelForm):
+    formfield_callback = all_required
+
+    class Meta:
+        model = TestModel
+        fields = ['name', 'age']
+        formfield_callback = all_required
+
+# Run the test
+def test_formfield_callback_in_factory_form():
+    # Create the factory form
+    FactoryForm = forms.modelform_factory(TestModel, form=BaseForm)
+
+    # Create instances of both forms
+    base_form = BaseForm()
+    factory_form = FactoryForm()
+
+    # Check if the fields are required in both forms
+    base_name_required = base_form.fields['name'].required
+    factory_name_required = factory_form.fields['name'].required
+
+    print(f"BaseForm name field required: {base_name_required}")
+    print(f"FactoryForm name field required: {factory_name_required}")
+
+    # Both fields should be required if the formfield_callback is working correctly
+    assert base_name_required == True, "BaseForm name field is not required"
+    assert factory_name_required == True, "FactoryForm name field is not required"
+
+    print("Test passed!")
+
+if __name__ == '__main__':
+    test_formfield_callback_in_factory_form()
\ No newline at end of file
