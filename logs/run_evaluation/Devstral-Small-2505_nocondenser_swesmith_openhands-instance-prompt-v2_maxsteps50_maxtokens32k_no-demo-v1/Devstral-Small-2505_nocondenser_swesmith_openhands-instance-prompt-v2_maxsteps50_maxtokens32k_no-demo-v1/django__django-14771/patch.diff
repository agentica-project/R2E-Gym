diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py
index cc65c043ab..65b41eb4b2 100644
--- a/django/utils/autoreload.py
+++ b/django/utils/autoreload.py
@@ -220,6 +220,15 @@ def get_child_arguments():
     py_script = Path(sys.argv[0])
 
     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]
+
+    # Include -X options if they exist
+    if hasattr(sys, '_xoptions') and sys._xoptions:
+        for key, value in sys._xoptions.items():
+            if value is True:
+                args.append(f'-X{key}')
+            else:
+                args.append(f'-X{key}={value}')
+
     # __spec__ is set when the server was started with the `-m` option,
     # see https://docs.python.org/3/reference/import.html#main-spec
     # __spec__ may not exist, e.g. when running in a Conda env.
diff --git a/test_autoreload_xoptions.py b/test_autoreload_xoptions.py
new file mode 100644
index 0000000000..daa725f658
--- /dev/null
+++ b/test_autoreload_xoptions.py
@@ -0,0 +1,85 @@
+import os
+import sys
+import time
+import tempfile
+import threading
+from pathlib import Path
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+        ],
+        TEMPLATES=[
+            {
+                'BACKEND': 'django.template.backends.django.DjangoTemplates',
+                'DIRS': [],
+                'APP_DIRS': True,
+                'OPTIONS': {
+                    'context_processors': [],
+                },
+            },
+        ],
+    )
+    django.setup()
+
+# Create a temporary file to trigger reloading
+temp_dir = Path(tempfile.gettempdir())
+temp_file = temp_dir / "django_autoreload_test.txt"
+
+# Write the file
+with open(temp_file, "w") as f:
+    f.write("Initial content")
+
+# Function to check if -X options are passed
+def check_xoptions():
+    print(f"Parent process _xoptions: {getattr(sys, '_xoptions', {})}")
+    return getattr(sys, '_xoptions', {})
+
+# Store the original xoptions
+original_xoptions = check_xoptions()
+print(f"Original xoptions: {original_xoptions}")
+
+# Import Django's autoreload module
+from django.utils import autoreload
+
+# Create a mock function that will be called by the reloader
+def mock_main():
+    # Check xoptions in the child process
+    child_xoptions = check_xoptions()
+    print(f"Child process _xoptions: {child_xoptions}")
+
+    # Verify if the xoptions match
+    if original_xoptions == child_xoptions:
+        print("SUCCESS: Xoptions correctly passed to child process")
+    else:
+        print(f"FAILURE: Xoptions mismatch - Parent: {original_xoptions}, Child: {child_xoptions}")
+
+    # Exit successfully
+    sys.exit(0)
+
+# Start the reloader in a separate thread
+def start_reloader():
+    time.sleep(1)  # Wait for the main thread to start
+    # Modify the file to trigger a reload
+    with open(temp_file, "w") as f:
+        f.write("Modified content to trigger reload")
+    print("File modified to trigger reload")
+
+# Start the reloader thread
+reloader_thread = threading.Thread(target=start_reloader)
+reloader_thread.daemon = True
+reloader_thread.start()
+
+# Run with reloader
+try:
+    autoreload.run_with_reloader(mock_main)
+except SystemExit:
+    pass
+finally:
+    # Clean up
+    if temp_file.exists():
+        os.unlink(temp_file)
\ No newline at end of file
diff --git a/test_django_autoreload.py b/test_django_autoreload.py
new file mode 100644
index 0000000000..0d893c9378
--- /dev/null
+++ b/test_django_autoreload.py
@@ -0,0 +1,74 @@
+import os
+import sys
+import time
+import tempfile
+from pathlib import Path
+
+# Create a temporary file to trigger reloading
+temp_dir = Path(tempfile.gettempdir())
+temp_file = temp_dir / "django_autoreload_test.txt"
+
+# Write the file
+with open(temp_file, "w") as f:
+    f.write("Initial content")
+
+# Function to check if -X options are passed
+def check_xoptions():
+    if hasattr(sys, '_xoptions'):
+        return sys._xoptions
+    return {}
+
+# Store the original xoptions
+original_xoptions = check_xoptions()
+print(f"Original xoptions: {original_xoptions}")
+
+# Create a simple script to test autoreload
+test_script = """
+import sys
+import os
+import time
+
+# Function to check if -X options are passed
+def check_xoptions():
+    if hasattr(sys, '_xoptions'):
+        return sys._xoptions
+    return {}
+
+# Print the _xoptions in the child process
+child_xoptions = check_xoptions()
+print(f"Child process _xoptions: {child_xoptions}")
+
+# Exit successfully
+sys.exit(0)
+"""
+
+with open("/tmp/test_autoreload_child.py", "w") as f:
+    f.write(test_script)
+
+# Now let's test the autoreload module
+from django.utils import autoreload
+
+# Monkey patch the restart_with_reloader function to use our test script
+original_restart = autoreload.restart_with_reloader
+
+def patched_restart():
+    # Instead of actually restarting, just run our test script
+    import subprocess
+    subprocess.run([sys.executable, "/tmp/test_autoreload_child.py"])
+
+# Apply the monkey patch
+autoreload.restart_with_reloader = patched_restart
+
+# Now trigger a reload by modifying the file
+time.sleep(1)  # Wait a moment
+with open(temp_file, "w") as f:
+    f.write("Modified content to trigger reload")
+print("File modified to trigger reload")
+
+# This should call our patched function which runs the child script
+autoreload.run_with_reloader(lambda: time.sleep(10))
+
+# Clean up
+if temp_file.exists():
+    os.unlink(temp_file)
+os.unlink("/tmp/test_autoreload_child.py")
\ No newline at end of file
diff --git a/test_get_child_args.py b/test_get_child_args.py
new file mode 100644
index 0000000000..730013959f
--- /dev/null
+++ b/test_get_child_args.py
@@ -0,0 +1,31 @@
+import os
+import sys
+from django.utils.autoreload import get_child_arguments
+
+# Print the current _xoptions
+print(f"Current _xoptions: {getattr(sys, '_xoptions', {})}")
+
+# Get the child arguments
+args = get_child_arguments()
+
+# Check if -X options are included
+x_options_in_args = [arg for arg in args if arg.startswith('-X')]
+print(f"Child arguments: {args}")
+print(f"X options in args: {x_options_in_args}")
+
+# Verify if _xoptions are correctly passed
+if hasattr(sys, '_xoptions') and sys._xoptions:
+    expected_options = []
+    for key, value in sys._xoptions.items():
+        if value is True:
+            expected_options.append(f"-X{key}")
+        else:
+            expected_options.append(f"-X{key}={value}")
+    print(f"Expected options: {expected_options}")
+
+    if set(expected_options).issubset(set(x_options_in_args)):
+        print("SUCCESS: All -X options are correctly passed to child process")
+    else:
+        print("FAILURE: Some -X options are missing")
+else:
+    print("No _xoptions to test")
\ No newline at end of file
diff --git a/test_simple_xoptions.py b/test_simple_xoptions.py
new file mode 100644
index 0000000000..f8d0df5853
--- /dev/null
+++ b/test_simple_xoptions.py
@@ -0,0 +1,43 @@
+import os
+import sys
+import subprocess
+import tempfile
+
+# Create a temporary file to check encoding
+with tempfile.NamedTemporaryFile(delete=False) as f:
+    f.write(b"Test content")
+    temp_file = f.name
+
+# Function to check file encoding
+def check_encoding(filename):
+    with open(filename, mode="r") as stream:
+        return stream.encoding
+
+# Test with -X utf8 option
+print("\n=== Testing with -X utf8 option")
+env = os.environ.copy()
+env["PYTHONPATH"] = "/testbed"
+
+# Create a script that will be run by the autoreload
+test_script = """
+import sys
+import os
+
+# Print the _xoptions
+if hasattr(sys, '_xoptions'):
+    print('Child process _xoptions: ' + str(sys._xoptions))
+else:
+    print("Child process: No _xoptions found")
+"""
+
+with open("/tmp/test_child.py", "w") as f:
+    f.write(test_script)
+
+# Run the parent process with -X utf8
+cmd = [sys.executable, "-X", "utf8", "-c", "import sys; print('Parent process _xoptions: ' + str(getattr(sys, '_xoptions', {}))); import subprocess; subprocess.run([sys.executable, '/tmp/test_child.py'])"]
+result = subprocess.run(cmd, env=env)
+print(f"Return code: {result.returncode}")
+
+# Clean up
+os.unlink(temp_file)
+os.unlink("/tmp/test_child.py")
\ No newline at end of file
diff --git a/test_xoptions.py b/test_xoptions.py
new file mode 100644
index 0000000000..29e7b8d9ef
--- /dev/null
+++ b/test_xoptions.py
@@ -0,0 +1,12 @@
+import os
+import sys
+
+# Print the current encoding
+print(f"Current encoding: {sys.getdefaultencoding()}")
+print(f"File encoding: {open(__file__).encoding}")
+
+# Check if -X options are passed to the subprocess
+if hasattr(sys, '_xoptions'):
+    print(f"Xoptions: {sys._xoptions}")
+else:
+    print("No _xoptions found")
\ No newline at end of file
