diff --git a/django/db/models/query.py b/django/db/models/query.py
index 794e0faae7..92349cd0c5 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -1209,7 +1209,8 @@ class QuerySet:
         if ignore_conflicts and not connections[self.db].features.supports_ignore_conflicts:
             raise NotSupportedError('This database backend does not support ignoring conflicts.')
         ops = connections[self.db].ops
-        batch_size = (batch_size or max(ops.bulk_batch_size(fields, objs), 1))
+        max_batch_size = max(ops.bulk_batch_size(fields, objs), 1)
+        batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size
         inserted_rows = []
         bulk_return = connections[self.db].features.can_return_rows_from_bulk_insert
         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:
diff --git a/test_bulk_create.py b/test_bulk_create.py
new file mode 100644
index 0000000000..8e89ce70ee
--- /dev/null
+++ b/test_bulk_create.py
@@ -0,0 +1,69 @@
+import os
+import sys
+import django
+from django.db import models, connection
+
+# Set up Django with minimal settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+
+# Create a minimal settings module
+django.conf.settings.configure(
+    SECRET_KEY='fake-key',
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    }
+)
+django.setup()
+
+# Create a simple model for testing
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    value = models.IntegerField()
+
+    class Meta:
+        app_label = 'test_app'
+
+def test_bulk_create_batch_size():
+    # Get the maximum batch size from the database operations
+    max_batch_size = connection.ops.bulk_batch_size([], [])
+
+    # Create test objects
+    objects = [TestModel(name=f'Test {i}', value=i) for i in range(100)]
+
+    # Test with a batch_size larger than max_batch_size
+    large_batch_size = 100  # Use a positive value larger than max_batch_size
+
+    # This should use min(large_batch_size, max_batch_size) after the fix
+    # Currently, it uses large_batch_size
+    print(f"Max batch size from DB: {max_batch_size}")
+    print(f"User-specified batch size: {large_batch_size}")
+
+    # We can't actually run the bulk_create because we don't have a real database
+    # But we can check the logic that would be used
+    from django.db.models.query import QuerySet
+
+    # Get the batch size that would be used
+    qs = QuerySet(model=TestModel)
+    ops = connection.ops
+
+    # Current behavior with the fix
+    max_batch_size_calculated = max(ops.bulk_batch_size([], []), 1)
+    current_batch_size = min(large_batch_size, max_batch_size_calculated) if large_batch_size else max_batch_size_calculated
+    print(f"Current batch size calculation with fix: {current_batch_size}")
+
+    # Expected behavior
+    expected_batch_size = min(large_batch_size, max(max_batch_size, 1)) if large_batch_size else max(max_batch_size, 1)
+    print(f"Expected batch size: {expected_batch_size}")
+
+    # Verify the fix
+    assert current_batch_size == expected_batch_size, "The fix is not working correctly"
+    print("Test completed - fix verified")
+
+if __name__ == "__main__":
+    test_bulk_create_batch_size()
\ No newline at end of file
