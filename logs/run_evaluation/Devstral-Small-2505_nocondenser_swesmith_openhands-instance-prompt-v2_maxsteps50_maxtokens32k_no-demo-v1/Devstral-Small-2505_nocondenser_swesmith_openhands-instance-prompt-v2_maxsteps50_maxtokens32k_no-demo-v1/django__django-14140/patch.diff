diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..3862b1aaed
--- /dev/null
+++ b/comprehensive_test.py
@@ -0,0 +1,74 @@
+#!/usr/bin/env python
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+    django.setup()
+
+from django.db.models import Q, Exists, F, Value
+from django.contrib.auth import get_user_model
+from django.db.models import OuterRef
+
+def test_deconstruction(q_obj, description):
+    """Test the deconstruction of a Q object and print the results."""
+    try:
+        path, args, kwargs = q_obj.deconstruct()
+        print(f"{description} deconstructs to: ({path}, {args}, {kwargs})")
+        # Try to reconstruct the Q object
+        reconstructed = Q(*args, **kwargs)
+        # Verify that the reconstructed object is equal to the original
+        assert q_obj == reconstructed, f"Reconstructed Q object doesn't match original: {reconstructed} != {q_obj}"
+        print("✓ Reconstruction successful and equal to original")
+        return True
+    except Exception as e:
+        print(f"✗ Error deconstructing {description}: {type(e).__name__} - {e}")
+        return False
+
+# Test case 1: Simple Q object with one keyword argument
+q1 = Q(x=1)
+test_deconstruction(q1, "Q(x=1)")
+
+# Test case 2: Q object with multiple keyword arguments
+q2 = Q(x=1, y=2)
+test_deconstruction(q2, "Q(x=1, y=2)")
+
+# Test case 3: Q object with a single non-subscriptable child (Exists)
+user_model = get_user_model()
+q3 = Q(Exists(user_model.objects.filter(username='jim')))
+test_deconstruction(q3, "Q(Exists(...))")
+
+# Test case 4: Q object with a single non-subscriptable child (F expression)
+q4 = Q(field__gt=F('value'))
+test_deconstruction(q4, "Q(field__gt=F('value'))")
+
+# Test case 5: Q object with a single non-subscriptable child (Value)
+q5 = Q(field__exact=Value('test'))
+test_deconstruction(q5, "Q(field__exact=Value('test'))")
+
+# Test case 6: Nested Q objects
+q6 = Q(Q(x=1) & Q(y=2))
+test_deconstruction(q6, "Q(Q(x=1) & Q(y=2))")
+
+# Test case 7: OR condition
+q7 = Q(x=1) | Q(y=2)
+test_deconstruction(q7, "Q(x=1) | Q(y=2)")
+
+# Test case 8: Negated Q object
+q8 = ~Q(x=1)
+test_deconstruction(q8, "~Q(x=1)")
+
+print("\nAll tests completed.")
\ No newline at end of file
diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index ae0f886107..a4ca0b5abd 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -87,7 +87,11 @@ class Q(tree.Node):
         args, kwargs = (), {}
         if len(self.children) == 1 and not isinstance(self.children[0], Q):
             child = self.children[0]
-            kwargs = {child[0]: child[1]}
+            # Check if the child is a tuple with two elements before trying to access its elements
+            if isinstance(child, tuple) and len(child) == 2:
+                kwargs = {child[0]: child[1]}
+            else:
+                args = (child,)
         else:
             args = tuple(self.children)
             if self.connector != self.default:
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..093c28a9ec
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,41 @@
+#!/usr/bin/env python
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+    django.setup()
+
+from django.db.models import Q, Exists
+from django.contrib.auth import get_user_model
+
+# Test case 1: Q object with a single subscriptable child (should work)
+q1 = Q(x=1)
+path1, args1, kwargs1 = q1.deconstruct()
+print("Q(x=1).deconstruct() =", (path1, args1, kwargs1))
+
+# Test case 2: Q object with multiple children (should work)
+q2 = Q(x=1, y=2)
+path2, args2, kwargs2 = q2.deconstruct()
+print("Q(x=1, y=2).deconstruct() =", (path2, args2, kwargs2))
+
+# Test case 3: Q object with a single non-subscriptable child (should fail)
+try:
+    q3 = Q(Exists(get_user_model().objects.filter(username='jim')))
+    path3, args3, kwargs3 = q3.deconstruct()
+    print("Q(Exists(...)).deconstruct() =", (path3, args3, kwargs3))
+except Exception as e:
+    print("Error with Q(Exists(...)):", type(e).__name__, e)
\ No newline at end of file
