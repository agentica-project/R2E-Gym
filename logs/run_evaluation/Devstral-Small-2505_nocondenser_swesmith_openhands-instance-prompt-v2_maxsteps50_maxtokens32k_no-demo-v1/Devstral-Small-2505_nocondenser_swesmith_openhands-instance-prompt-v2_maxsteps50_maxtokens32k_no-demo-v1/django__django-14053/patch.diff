diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py
index 494890cc23..620aa130e1 100644
--- a/django/contrib/staticfiles/storage.py
+++ b/django/contrib/staticfiles/storage.py
@@ -226,17 +226,25 @@ class HashedFilesMixin:
             path for path in paths
             if matches_patterns(path, self._patterns)
         ]
+
+        # Track which files have already been yielded
+        yielded_files = set()
+
         # Do a single pass first. Post-process all files once, then repeat for
         # adjustable files.
         for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):
-            yield name, hashed_name, processed
+            if name not in yielded_files:
+                yield name, hashed_name, processed
+                yielded_files.add(name)
 
         paths = {path: paths[path] for path in adjustable_paths}
 
         for i in range(self.max_post_process_passes):
             substitutions = False
             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):
-                yield name, hashed_name, processed
+                if name not in yielded_files:
+                    yield name, hashed_name, processed
+                    yielded_files.add(name)
                 substitutions = substitutions or subst
 
             if not substitutions:
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..bad7ccf7fe
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,56 @@
+import os
+import sys
+from django.conf import settings
+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage
+from django.core.files.storage import FileSystemStorage
+
+# Configure Django settings
+settings.configure(
+    STATIC_ROOT=os.path.join(os.getcwd(), 'static_root'),
+    STATIC_URL='/static/',
+    STATICFILES_STORAGE='django.contrib.staticfiles.storage.ManifestStaticFilesStorage',
+    STATICFILES_DIRS=[os.path.join(os.getcwd(), 'static')],
+)
+
+# Create a simple static file structure
+os.makedirs('static/css', exist_ok=True)
+os.makedirs('static_root', exist_ok=True)
+
+# Create a CSS file with a URL reference
+with open('static/css/base.css', 'w') as f:
+    f.write("body { color: blue; }")
+
+# Create a CSS file that references another file
+with open('static/css/dashboard.css', 'w') as f:
+    f.write("""@import url("base.css");
+           .dashboard { background: gray; }""")
+
+# Initialize the storage
+storage = ManifestStaticFilesStorage()
+
+# Create a dictionary of files to process
+found_files = {
+    'css/base.css': (FileSystemStorage(location='static'), 'css/base.css'),
+    'css/dashboard.css': (FileSystemStorage(location='static'), 'css/dashboard.css'),
+}
+
+# Process the files and collect the results
+processed_files = {}
+for original_path, processed_path, processed in storage.post_process(found_files):
+    if not isinstance(processed, Exception):
+        print(f"Processed: {original_path} -> {processed_path}")
+        if original_path not in processed_files:
+            processed_files[original_path] = []
+        processed_files[original_path].append(processed_path)
+
+# Print the results
+print("\nSummary:")
+for original, paths in processed_files.items():
+    print(f"{original} was processed {len(paths)} times")
+    if len(paths) > 1:
+        print(f"  First path: {paths[0]}")
+        print(f"  Last path: {paths[-1]}")
+        if len(set(paths)) > 1:
+            print("  WARNING: Different hashed paths generated!")
+    else:
+        print(f"  Path: {paths[0]}")
\ No newline at end of file
diff --git a/static/css/base.css b/static/css/base.css
new file mode 100644
index 0000000000..63a425c6a5
--- /dev/null
+++ b/static/css/base.css
@@ -0,0 +1 @@
+body { color: blue; }
\ No newline at end of file
diff --git a/static/css/dashboard.css b/static/css/dashboard.css
new file mode 100644
index 0000000000..ef130ea4a6
--- /dev/null
+++ b/static/css/dashboard.css
@@ -0,0 +1,2 @@
+@import url("base.css");
+           .dashboard { background: gray; }
\ No newline at end of file
diff --git a/static_root/css/base.8559e101a8b6.css b/static_root/css/base.8559e101a8b6.css
new file mode 100644
index 0000000000..63a425c6a5
--- /dev/null
+++ b/static_root/css/base.8559e101a8b6.css
@@ -0,0 +1 @@
+body { color: blue; }
\ No newline at end of file
diff --git a/static_root/css/dashboard.eda5357d3363.css b/static_root/css/dashboard.eda5357d3363.css
new file mode 100644
index 0000000000..7771e3884a
--- /dev/null
+++ b/static_root/css/dashboard.eda5357d3363.css
@@ -0,0 +1,2 @@
+@import url("base.8559e101a8b6.css");
+           .dashboard { background: gray; }
\ No newline at end of file
diff --git a/static_root/staticfiles.json b/static_root/staticfiles.json
new file mode 100644
index 0000000000..c9b6a5ffe7
--- /dev/null
+++ b/static_root/staticfiles.json
@@ -0,0 +1 @@
+{"paths": {"css/base.css": "css/base.8559e101a8b6.css", "css/dashboard.css": "css/dashboard.eda5357d3363.css"}, "version": "1.0"}
\ No newline at end of file
