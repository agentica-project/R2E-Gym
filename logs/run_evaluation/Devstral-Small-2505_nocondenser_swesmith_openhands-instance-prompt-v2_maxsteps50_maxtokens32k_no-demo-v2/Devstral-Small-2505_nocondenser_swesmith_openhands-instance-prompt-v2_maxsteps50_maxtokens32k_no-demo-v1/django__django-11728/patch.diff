diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py
index 1ce4594501..739583a183 100644
--- a/django/contrib/admindocs/utils.py
+++ b/django/contrib/admindocs/utils.py
@@ -170,7 +170,8 @@ def replace_named_groups(pattern):
             # If brackets are balanced, the end of the string for the current
             # named capture group pattern has been reached.
             if unmatched_open_brackets == 0:
-                group_pattern_and_name.append((pattern[start:end + idx], group_name))
+                # Include the closing parenthesis in the group pattern
+                group_pattern_and_name.append((pattern[start:end + idx + 1], group_name))
                 break
 
             # Check for unescaped `(` and `)`. They mark the start and end of a
diff --git a/django/contrib/admindocs/views.py b/django/contrib/admindocs/views.py
index 0474c38fd4..46f7fe8843 100644
--- a/django/contrib/admindocs/views.py
+++ b/django/contrib/admindocs/views.py
@@ -405,10 +405,21 @@ def simplify_regex(pattern):
     example, turn "^(?P<sport_slug>\w+)/athletes/(?P<athlete_slug>\w+)/$"
     into "/<sport_slug>/athletes/<athlete_slug>/".
     """
+    # Add a trailing slash if it doesn't have one to ensure all named groups are replaced
+    has_trailing_slash = pattern.endswith('/')
+    if not has_trailing_slash:
+        pattern = pattern + '/'
+
     pattern = replace_named_groups(pattern)
     pattern = replace_unnamed_groups(pattern)
+
     # clean up any outstanding regex-y characters.
     pattern = pattern.replace('^', '').replace('$', '').replace('?', '')
+
+    # Remove the trailing slash we added if the original pattern didn't have one
+    if not has_trailing_slash:
+        pattern = pattern.rstrip('/')
+
     if not pattern.startswith('/'):
         pattern = '/' + pattern
     return pattern
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..a9deaf54ba
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,36 @@
+#!/usr/bin/env python
+from django.contrib.admindocs.utils import replace_named_groups
+from django.contrib.admindocs.views import simplify_regex
+
+def test_with_trailing_slash():
+    pattern = r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\w+)/'
+    simplified = simplify_regex(pattern)
+    print(f"Pattern with trailing slash: {pattern}")
+    print(f"Simplified: {simplified}")
+    # Expected: /entries/<pk>/relationships/<related_field>/
+
+def test_without_trailing_slash():
+    pattern = r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\w+)'
+    simplified = simplify_regex(pattern)
+    print(f"Pattern without trailing slash: {pattern}")
+    print(f"Simplified: {simplified}")
+    # Expected: /entries/<pk>/relationships/<related_field>
+    # Actual: /entries/<pk>/relationships/(?P<related_field>\w+)
+
+def test_replace_named_groups_directly():
+    pattern1 = r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\w+)/'
+    result1 = replace_named_groups(pattern1)
+    print(f"Pattern with trailing slash after replace_named_groups: {result1}")
+
+    pattern2 = r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\w+)'
+    result2 = replace_named_groups(pattern2)
+    print(f"Pattern without trailing slash after replace_named_groups: {result2}")
+
+if __name__ == "__main__":
+    print("Testing simplify_regex and replace_named_groups functions:")
+    print("-" * 50)
+    test_with_trailing_slash()
+    print("-" * 50)
+    test_without_trailing_slash()
+    print("-" * 50)
+    test_replace_named_groups_directly()
\ No newline at end of file
