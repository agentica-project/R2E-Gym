diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py
index ed98ecb48c..9c8912c41c 100644
--- a/django/contrib/contenttypes/fields.py
+++ b/django/contrib/contenttypes/fields.py
@@ -202,8 +202,19 @@ class GenericForeignKey(FieldCacheMixin):
             else:
                 model = self.get_content_type(id=ct_id,
                                               using=obj._state.db).model_class()
-                return (model._meta.pk.get_prep_value(getattr(obj, self.fk_field)),
-                        model)
+                fk_value = getattr(obj, self.fk_field)
+                # Convert the fk_value to the same type as the model's primary key
+                pk_field = model._meta.pk
+                if pk_field.get_internal_type() == 'UUIDField':
+                    # For UUID fields, ensure we're comparing the same types
+                    from uuid import UUID
+                    try:
+                        # Try to convert to UUID if it's a string
+                        if isinstance(fk_value, str):
+                            fk_value = UUID(fk_value)
+                    except (ValueError, TypeError):
+                        pass
+                return (pk_field.get_prep_value(fk_value), model)
 
         return (
             ret_val,
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..7ab8f6bbcb
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,85 @@
+import uuid
+from django.contrib.contenttypes.fields import GenericForeignKey
+from django.contrib.contenttypes.models import ContentType
+from django.db import models
+from django.test import TestCase, override_settings
+
+# Create models to reproduce the issue
+class Foo(models.Model):
+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
+    name = models.CharField(max_length=100)
+
+class Bar(models.Model):
+    foo_content_type = models.ForeignKey(
+        ContentType, related_name='actor',
+        on_delete=models.CASCADE, db_index=True
+    )
+    foo_object_id = models.CharField(max_length=255, db_index=True)
+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')
+
+@override_settings(DEBUG=True)
+class PrefetchUUIDGFKTest(TestCase):
+    def test_prefetch_related_with_uuid_gfk(self):
+        # Create a Foo instance
+        foo = Foo.objects.create(name='Test Foo')
+
+        # Create a Bar instance pointing to the Foo instance
+        bar = Bar.objects.create(
+            foo_content_type=ContentType.objects.get_for_model(Foo),
+            foo_object_id=str(foo.pk)
+        )
+
+        # Try to prefetch the related Foo object
+        bars = Bar.objects.all().prefetch_related('foo')
+
+        # Check if the foo attribute is properly populated
+        for bar in bars:
+            print(f"Bar foo attribute: {bar.foo}")
+            self.assertIsNotNone(bar.foo, "The foo attribute should not be None after prefetch_related")
+
+if __name__ == "__main__":
+    import django
+    from django.conf import settings
+
+    if not settings.configured:
+        settings.configure(
+            DEBUG=True,
+            DATABASES={
+                'default': {
+                    'ENGINE': 'django.db.backends.sqlite3',
+                    'NAME': ':memory:',
+                }
+            },
+            INSTALLED_APPS=[
+                'django.contrib.contenttypes',
+                'django.contrib.auth',
+            ],
+            ROOT_URLCONF='',
+            SECRET_KEY='fake-key',
+            MIDDLEWARE_CLASSES=(),
+        )
+    django.setup()
+
+    # Create the tables
+    from django.db import connection
+    cursor = connection.cursor()
+    cursor.execute('''
+    CREATE TABLE IF NOT EXISTS foo (
+        id CHAR(36) PRIMARY KEY,
+        name VARCHAR(100)
+    )
+    ''')
+    cursor.execute('''
+    CREATE TABLE IF NOT EXISTS bar (
+        id INTEGER PRIMARY KEY AUTOINCREMENT,
+        foo_content_type INTEGER,
+        foo_object_id CHAR(36),
+        FOREIGN KEY (foo_content_type) REFERENCES django_content_type (id)
+    )
+    ''')
+
+    # Run the test
+    test = PrefetchUUIDGFKTest()
+    test.setUp()
+    test.test_prefetch_related_with_uuid_gfk()
+    print("Test completed successfully!")
\ No newline at end of file
diff --git a/run_test.py b/run_test.py
new file mode 100644
index 0000000000..ef83875e35
--- /dev/null
+++ b/run_test.py
@@ -0,0 +1,46 @@
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'tests.prefetch_related',
+        ],
+        ROOT_URLCONF='',
+        SECRET_KEY='fake-key',
+        MIDDLEWARE_CLASSES=(),
+        TEMPLATES=[
+            {
+                'BACKEND': 'django.template.backends.django.DjangoTemplates',
+                'DIRS': [],
+                'APP_DIRS': True,
+                'OPTIONS': {
+                    'context_processors': [
+                        'django.template.context_processors.debug',
+                        'django.template.context_processors.request',
+                        'django.contrib.auth.context_processors.auth',
+                        'django.contrib.messages.context_processors.messages',
+                    ],
+                },
+            },
+        ],
+    )
+    django.setup()
+
+# Run the tests
+from django.test.runner import DiscoverRunner
+runner = DiscoverRunner(verbosity=2)
+failures = runner.run_tests(['tests.prefetch_related.test_gfk_uuid_fix'])
+sys.exit(bool(failures))
\ No newline at end of file
diff --git a/tests/prefetch_related/test_gfk_uuid.py b/tests/prefetch_related/test_gfk_uuid.py
new file mode 100644
index 0000000000..52d7666134
--- /dev/null
+++ b/tests/prefetch_related/test_gfk_uuid.py
@@ -0,0 +1,36 @@
+import uuid
+from django.contrib.contenttypes.fields import GenericForeignKey
+from django.contrib.contenttypes.models import ContentType
+from django.db import models
+from django.test import TestCase
+
+class Foo(models.Model):
+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
+    name = models.CharField(max_length=100)
+
+class Bar(models.Model):
+    foo_content_type = models.ForeignKey(
+        ContentType, related_name='actor',
+        on_delete=models.CASCADE, db_index=True
+    )
+    foo_object_id = models.CharField(max_length=255, db_index=True)
+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')
+
+class UUIDGFKPrefetchTest(TestCase):
+    def test_prefetch_related_with_uuid_gfk(self):
+        # Create a Foo instance
+        foo = Foo.objects.create(name='Test Foo')
+
+        # Create a Bar instance pointing to the Foo instance
+        bar = Bar.objects.create(
+            foo_content_type=ContentType.objects.get_for_model(Foo),
+            foo_object_id=str(foo.pk)
+        )
+
+        # Try to prefetch the related Foo object
+        bars = Bar.objects.all().prefetch_related('foo')
+
+        # Check if the foo attribute is properly populated
+        for bar in bars:
+            self.assertIsNotNone(bar.foo, "The foo attribute should not be None after prefetch_related")
+            self.assertEqual(bar.foo.name, 'Test Foo')
\ No newline at end of file
diff --git a/tests/prefetch_related/test_gfk_uuid_fix.py b/tests/prefetch_related/test_gfk_uuid_fix.py
new file mode 100644
index 0000000000..6d1e520382
--- /dev/null
+++ b/tests/prefetch_related/test_gfk_uuid_fix.py
@@ -0,0 +1,37 @@
+import uuid
+from django.contrib.contenttypes.fields import GenericForeignKey
+from django.contrib.contenttypes.models import ContentType
+from django.db import models
+from django.test import TestCase
+
+class Foo(models.Model):
+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
+    name = models.CharField(max_length=100)
+
+class Bar(models.Model):
+    foo_content_type = models.ForeignKey(
+        ContentType, related_name='actor',
+        on_delete=models.CASCADE, db_index=True
+    )
+    foo_object_id = models.CharField(max_length=255, db_index=True)
+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')
+
+class UUIDGFKPrefetchTest(TestCase):
+    def test_prefetch_related_with_uuid_gfk(self):
+        # Create a Foo instance
+        foo = Foo.objects.create(name='Test Foo')
+
+        # Create a Bar instance pointing to the Foo instance
+        bar = Bar.objects.create(
+            foo_content_type=ContentType.objects.get_for_model(Foo),
+            foo_object_id=str(foo.pk)
+        )
+
+        # Try to prefetch the related Foo object
+        bars = Bar.objects.all().prefetch_related('foo')
+
+        # Check if the foo attribute is properly populated
+        for bar in bars:
+            self.assertIsNotNone(bar.foo, "The foo attribute should not be None after prefetch_related")
+            self.assertEqual(bar.foo.name, 'Test Foo')
+            self.assertEqual(bar.foo.pk, foo.pk)
\ No newline at end of file
