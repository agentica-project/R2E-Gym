diff --git a/django/forms/models.py b/django/forms/models.py
index d157c291ef..5edbbd376f 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -83,7 +83,7 @@ def model_to_dict(instance, fields=None, exclude=None):
     for f in chain(opts.concrete_fields, opts.private_fields, opts.many_to_many):
         if not getattr(f, 'editable', False):
             continue
-        if fields and f.name not in fields:
+        if fields is not None and f.name not in fields:
             continue
         if exclude and f.name in exclude:
             continue
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..ded6469c10
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,59 @@
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+    django.setup()
+
+from django.db import models
+from django.forms.models import model_to_dict
+
+# Create a simple model class for testing
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    age = models.IntegerField()
+
+    class Meta:
+        # We don't need to create an actual table
+        app_label = 'reproduce_issue'
+        managed = False
+
+# Create a test instance
+instance = TestModel()
+instance.name = "Test Name"
+instance.age = 30
+instance.pk = 1  # Add a primary key
+
+# Test with fields=None (default behavior)
+default_result = model_to_dict(instance)
+print("Default behavior (fields=None):")
+print(default_result)
+
+# Test with fields=[] (should return empty dict)
+empty_fields_result = model_to_dict(instance, fields=[])
+print("\nWith fields=[] (should return empty dict):")
+print(empty_fields_result)
+
+# Test with specific fields
+specific_fields_result = model_to_dict(instance, fields=['name'])
+print("\nWith specific fields:")
+print(specific_fields_result)
+
+# Assertions to verify the fix
+assert default_result == {'id': 1, 'name': 'Test Name', 'age': 30}, "Default behavior is incorrect"
+assert empty_fields_result == {}, "Empty fields should return an empty dict"
+assert specific_fields_result == {'name': 'Test Name'}, "Specific fields behavior is incorrect"
+
+print("\nAll assertions passed! The fix is working correctly.")
\ No newline at end of file
diff --git a/run_tests.py b/run_tests.py
new file mode 100644
index 0000000000..ad1cfaf293
--- /dev/null
+++ b/run_tests.py
@@ -0,0 +1,39 @@
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'tests.model_forms',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        SECRET_KEY='not-very-secret',
+    )
+    django.setup()
+
+from django.test.utils import get_runner
+from django.test.runner import DiscoverRunner
+
+def run_tests():
+    TestRunner = get_runner(settings)
+    test_runner = TestRunner(verbosity=2, interactive=True)
+    failures = test_runner.run_tests(['tests.model_forms'])
+    return failures
+
+if __name__ == '__main__':
+    failures = run_tests()
+    if failures:
+        print(f"{failures} tests failed.")
+        exit(1)
+    else:
+        print("All tests passed!")
+        exit(0)
\ No newline at end of file
diff --git a/test_model_to_dict.py b/test_model_to_dict.py
new file mode 100644
index 0000000000..38ec8b5db2
--- /dev/null
+++ b/test_model_to_dict.py
@@ -0,0 +1,56 @@
+import os
+import django
+from django.conf import settings
+from django.test import TestCase
+from django.db import models
+from django.forms.models import model_to_dict
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        SECRET_KEY='not-very-secret',
+    )
+    django.setup()
+
+# Create a simple model class for testing
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    age = models.IntegerField()
+
+    class Meta:
+        app_label = 'test_model_to_dict'
+        managed = False
+
+class ModelToDictTest(TestCase):
+    def test_empty_fields(self):
+        """Test that model_to_dict returns an empty dict when fields=[]."""
+        instance = TestModel()
+        instance.name = "Test Name"
+        instance.age = 30
+        instance.pk = 1  # Add a primary key
+
+        # Test with fields=None (default behavior)
+        default_result = model_to_dict(instance)
+        self.assertEqual(default_result, {'id': 1, 'name': 'Test Name', 'age': 30})
+
+        # Test with fields=[] (should return empty dict)
+        empty_fields_result = model_to_dict(instance, fields=[])
+        self.assertEqual(empty_fields_result, {})
+
+        # Test with specific fields
+        specific_fields_result = model_to_dict(instance, fields=['name'])
+        self.assertEqual(specific_fields_result, {'name': 'Test Name'})
+
+if __name__ == '__main__':
+    import unittest
+    unittest.main()
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..ef67d6da55
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,52 @@
+import os
+
+BASE_DIR = os.path.dirname(os.path.abspath(__file__))
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'tests.model_forms',
+]
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+SECRET_KEY = 'not-very-secret'
+
+MIDDLEWARE = []
+
+ROOT_URLCONF = 'tests.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'tests.wsgi.application'
+
+AUTH_PASSWORD_VALIDATORS = []
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_L10N = True
+
+USE_TZ = True
\ No newline at end of file
