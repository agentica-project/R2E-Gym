diff --git a/django/core/management/base.py b/django/core/management/base.py
index 0c3a981290..118dc38a5c 100644
--- a/django/core/management/base.py
+++ b/django/core/management/base.py
@@ -286,6 +286,10 @@ class BaseCommand:
             '--force-color', action='store_true',
             help='Force colorization of the command output.',
         )
+        parser.add_argument(
+            '--skip-checks', action='store_true',
+            help='Skip system checks.',
+        )
         self.add_arguments(parser)
         return parser
 
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..4126d3ad90
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,21 @@
+import os
+
+# Set up basic settings
+SECRET_KEY = 'fake-key-for-testing'
+INSTALLED_APPS = [
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+]
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+USE_I18N = True
+USE_L10N = True
+USE_TZ = True
+TIME_ZONE = 'UTC'
\ No newline at end of file
diff --git a/test_skip_checks.py b/test_skip_checks.py
new file mode 100644
index 0000000000..d1ca9b4592
--- /dev/null
+++ b/test_skip_checks.py
@@ -0,0 +1,72 @@
+#!/usr/bin/env python
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'django.contrib.sessions',
+            'django.contrib.messages',
+            'django.contrib.staticfiles',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+    django.setup()
+
+from django.core.management import call_command
+from django.core.management.base import CommandError
+
+def test_skip_checks():
+    print("Testing --skip-checks option...")
+
+    # First, try to run a command without --skip-checks
+    try:
+        call_command('migrate')
+        print("Command ran without --skip-checks")
+    except CommandError as e:
+        print(f"Command failed without --skip-checks: {e}")
+
+    # Then, try to run a command with skip_checks=True
+    try:
+        call_command('migrate', skip_checks=True)
+        print("Command ran with skip_checks=True")
+    except TypeError as e:
+        print(f"Command failed with skip_checks=True: {e}")
+        print("This should not happen if skip_checks is properly implemented")
+
+    # Check if the command-line help includes --skip-checks
+    import io
+    import sys
+    from django.core.management import ManagementUtility
+
+    # Capture stdout
+    old_stdout = sys.stdout
+    new_stdout = io.StringIO()
+    sys.stdout = new_stdout
+
+    try:
+        # This will print help to stdout
+        ManagementUtility(['manage.py', 'migrate', '--help']).execute()
+        help_text = new_stdout.getvalue()
+
+        if '--skip-checks' in help_text:
+            print("--skip-checks option is available in command-line help")
+        else:
+            print("--skip-checks option is NOT available in command-line help")
+    finally:
+        sys.stdout = old_stdout
+
+    print("Test completed.")
+
+if __name__ == "__main__":
+    test_skip_checks()
\ No newline at end of file
