diff --git a/django/urls/base.py b/django/urls/base.py
index 0e1c3d909c..1933893fea 100644
--- a/django/urls/base.py
+++ b/django/urls/base.py
@@ -92,7 +92,7 @@ reverse_lazy = lazy(reverse, str)
 
 def clear_url_caches():
     get_callable.cache_clear()
-    get_resolver.cache_clear()
+    _get_resolver.cache_clear()
     get_ns_resolver.cache_clear()
 
 
diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 247e3680c0..a2986cdbd9 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -64,10 +64,23 @@ class ResolverMatch:
 
 
 @functools.lru_cache(maxsize=None)
+def _get_resolver(urlconf):
+    """Internal implementation of get_resolver that actually creates the resolver."""
+    return URLResolver(RegexPattern(r'^/'), urlconf)
+
 def get_resolver(urlconf=None):
+    """
+    Return a URLResolver for the given URLconf module.
+
+    This is memoized, so that repeated calls with the same URLconf don't result in
+    multiple URLResolver instances being created.
+    """
+    # Look up settings.ROOT_URLCONF before the memoized function call to ensure
+    # that get_resolver(None) and get_resolver(settings.ROOT_URLCONF) return
+    # the same resolver.
     if urlconf is None:
         urlconf = settings.ROOT_URLCONF
-    return URLResolver(RegexPattern(r'^/'), urlconf)
+    return _get_resolver(urlconf)
 
 
 @functools.lru_cache(maxsize=None)
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..8b6687be67
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,119 @@
+import sys
+import time
+from django.conf import settings
+from django.urls import reverse, get_resolver, clear_url_caches
+from django.urls import path
+
+# Import the views module
+import reproduce_issue.views
+from reproduce_issue.views import *
+
+# Configure settings
+settings.configure(
+    DEBUG=True,
+    ROOT_URLCONF='reproduce_issue.urls',
+    SECRET_KEY='dummy',
+)
+
+# Create a simple URL configuration
+urlpatterns = [
+    # Add some routes to make _populate more expensive
+    # In a real application, this would be more complex
+    path('home/', home, name='home'),
+    path('about/', about, name='about'),
+    path('contact/', contact, name='contact'),
+    path('blog/<int:id>/', blog_post, name='blog_post'),
+    path('blog/<slug:title>/', blog_slug, name='blog_slug'),
+    path('user/<str:username>/', user_profile, name='user_profile'),
+    path('products/<category>/<int:id>/', product_detail, name='product_detail'),
+    path('search/', search, name='search'),
+    path('help/', help_page, name='help'),
+    path('terms/', terms, name='terms'),
+    path('privacy/', privacy, name='privacy'),
+    path('faq/', faq, name='faq'),
+    path('login/', login_view, name='login'),
+    path('logout/', logout_view, name='logout'),
+    path('register/', register, name='register'),
+    path('profile/', profile, name='profile'),
+    path('settings/', settings, name='settings'),
+    path('dashboard/', dashboard, name='dashboard'),
+    path('admin/', admin, name='admin'),
+]
+
+def include(arg):
+    return []
+
+# Function to simulate URLResolver._populate work
+def simulate_populate_work():
+    # Simulate the work done in URLResolver._populate
+    # by creating a large dictionary
+    routes = {}
+    for i in range(1000):
+        routes[f'route_{i}'] = {
+            'pattern': f'^{i}/',
+            'name': f'name_{i}',
+            'callback': f'view_{i}',
+            'converters': {'int': r'[0-9]+', 'str': r'[^/]+', 'slug': r'[a-z0-9-]+'},
+        }
+    return routes
+
+# Measure the time taken for URLResolver._populate to run
+def measure_populate_time():
+    start_time = time.time()
+    simulate_populate_work()
+    end_time = time.time()
+    return end_time - start_time
+
+# Test the issue
+def test_issue():
+    print("Testing the issue with multiple URLResolver instances...")
+
+    # Clear any existing caches
+    clear_url_caches()
+
+    # Measure the time taken for URLResolver._populate to run
+    populate_time = measure_populate_time()
+    print(f"Time taken for URLResolver._populate to run: {populate_time:.6f} seconds")
+
+    # First call to get_resolver (before set_urlconf)
+    print("\nFirst call to get_resolver (before set_urlconf)")
+    resolver1 = get_resolver()
+    print(f"Resolver 1 ID: {id(resolver1)}")
+
+    # Simulate a request by calling set_urlconf
+    print("\nSimulating request by calling set_urlconf")
+    from django.urls.base import set_urlconf
+    set_urlconf('reproduce_issue.urls')
+
+    # Second call to get_resolver (after set_urlconf)
+    print("\nSecond call to get_resolver (after set_urlconf)")
+    resolver2 = get_resolver()
+    print(f"Resolver 2 ID: {id(resolver2)}")
+
+    # Check if we have two different resolvers
+    if id(resolver1) != id(resolver2):
+        print("\nISSUE CONFIRMED: Two different URLResolver instances were created!")
+        print(f"Resolver 1: {resolver1}")
+        print(f"Resolver 2: {resolver2}")
+    else:
+        print("\nNo issue: Same URLResolver instance was used.")
+
+    # Call reverse to see if it creates a new resolver
+    print("\nCalling reverse to check if it creates a new resolver")
+    try:
+        url = reverse('home')
+        print(f"reverse('home') returned: {url}")
+
+        # Get the resolver used by reverse
+        resolver3 = get_resolver()
+        print(f"Resolver 3 ID: {id(resolver3)}")
+
+        if id(resolver2) != id(resolver3):
+            print("\nISSUE CONFIRMED: reverse created a new URLResolver instance!")
+        else:
+            print("\nNo issue: reverse used the existing URLResolver instance.")
+    except Exception as e:
+        print(f"Error calling reverse: {e}")
+
+if __name__ == "__main__":
+    test_issue()
\ No newline at end of file
diff --git a/reproduce_issue/__init__.py b/reproduce_issue/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/reproduce_issue/urls.py b/reproduce_issue/urls.py
new file mode 100644
index 0000000000..005d518287
--- /dev/null
+++ b/reproduce_issue/urls.py
@@ -0,0 +1,11 @@
+from django.urls import path
+from . import views
+
+urlpatterns = [
+    path('home/', views.home, name='home'),
+    path('about/', views.about, name='about'),
+    path('contact/', views.contact, name='contact'),
+]
+
+def include(arg):
+    return []
\ No newline at end of file
diff --git a/reproduce_issue/views.py b/reproduce_issue/views.py
new file mode 100644
index 0000000000..86b7a6f46b
--- /dev/null
+++ b/reproduce_issue/views.py
@@ -0,0 +1,59 @@
+from django.http import HttpResponse
+
+def home(request):
+    return HttpResponse("Home")
+
+def about(request):
+    return HttpResponse("About")
+
+def contact(request):
+    return HttpResponse("Contact")
+
+# Add dummy views for the test script
+def blog_post(request, id):
+    return HttpResponse(f"Blog post {id}")
+
+def blog_slug(request, title):
+    return HttpResponse(f"Blog post '{title}'")
+
+def user_profile(request, username):
+    return HttpResponse(f"User: {username}")
+
+def product_detail(request, category, id):
+    return HttpResponse(f"Product {id} in category {category}")
+
+def search(request):
+    return HttpResponse("Search")
+
+def help_page(request):
+    return HttpResponse("Help")
+
+def terms(request):
+    return HttpResponse("Terms")
+
+def privacy(request):
+    return HttpResponse("Privacy")
+
+def faq(request):
+    return HttpResponse("FAQ")
+
+def login_view(request):
+    return HttpResponse("Login")
+
+def logout_view(request):
+    return HttpResponse("Logout")
+
+def register(request):
+    return HttpResponse("Register")
+
+def profile(request):
+    return HttpResponse("Profile")
+
+def settings(request):
+    return HttpResponse("Settings")
+
+def dashboard(request):
+    return HttpResponse("Dashboard")
+
+def admin(request):
+    return HttpResponse("Admin")
\ No newline at end of file
diff --git a/test_resolver.py b/test_resolver.py
new file mode 100644
index 0000000000..6ec5a2bc7b
--- /dev/null
+++ b/test_resolver.py
@@ -0,0 +1,42 @@
+import time
+from django.conf import settings
+from django.urls import get_resolver, clear_url_caches
+from django.urls.base import set_urlconf, get_urlconf
+
+# Configure settings
+settings.configure(
+    DEBUG=True,
+    ROOT_URLCONF='django.conf.urls',  # Set a real URLconf
+    SECRET_KEY='dummy',
+)
+
+# Clear any existing caches
+clear_url_caches()
+
+# Print the current ROOT_URLCONF
+print(f"ROOT_URLCONF: {settings.ROOT_URLCONF}")
+
+# First call to get_resolver with None (simulating before get_urlconf is set)
+print("\nFirst call to get_resolver with None")
+resolver1 = get_resolver(None)
+print(f"Resolver 1 ID: {id(resolver1)}")
+
+# Simulate a request by calling set_urlconf
+print("\nSimulating request by calling set_urlconf")
+set_urlconf('django.conf.urls')
+
+# Check the current urlconf after set_urlconf
+print(f"get_urlconf() after set_urlconf: {get_urlconf()}")
+
+# Second call to get_resolver with the result of get_urlconf (after set_urlconf)
+print("\nSecond call to get_resolver with get_urlconf()")
+resolver2 = get_resolver(get_urlconf())
+print(f"Resolver 2 ID: {id(resolver2)}")
+
+# Check if we have two different resolvers
+if id(resolver1) != id(resolver2):
+    print("\nISSUE CONFIRMED: Two different URLResolver instances were created!")
+    print(f"Resolver 1: {resolver1}")
+    print(f"Resolver 2: {resolver2}")
+else:
+    print("\nNo issue: Same URLResolver instance was used.")
\ No newline at end of file
