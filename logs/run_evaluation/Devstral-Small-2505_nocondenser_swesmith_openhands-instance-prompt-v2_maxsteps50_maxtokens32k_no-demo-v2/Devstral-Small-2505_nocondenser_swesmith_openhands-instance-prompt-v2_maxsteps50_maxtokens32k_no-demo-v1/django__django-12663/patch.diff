diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index caa03665ea..77589cb09d 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -804,6 +804,11 @@ class Field(RegisterLookupMixin):
         """Perform preliminary non-db specific value checks and conversions."""
         if isinstance(value, Promise):
             value = value._proxy____cast()
+        elif hasattr(value, '_wrapped') and value._wrapped is not empty:
+            # For SimpleLazyObject, evaluate it and return the wrapped value
+            if value._wrapped is empty:
+                value._setup()
+            value = value._wrapped
         return value
 
     def get_db_prep_value(self, value, connection, prepared=False):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..f8d0e58384
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,62 @@
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            '__main__',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        }
+    )
+    django.setup()
+
+from django.contrib.auth.models import User
+from django.db import models, connection
+from django.db.models import OuterRef, Subquery, IntegerField
+from django.utils.functional import SimpleLazyObject
+
+# Create models
+class A(models.Model):
+    pass
+
+class B(models.Model):
+    a = models.ForeignKey(A, on_delete=models.CASCADE)
+
+class C(models.Model):
+    owner = models.ForeignKey(User, on_delete=models.CASCADE)
+
+# Test case
+def test_bug():
+    # Create a user first
+    user_obj = User.objects.create(username="testuser", password="password")
+
+    # Create a subquery that annotates B objects with the owner from C
+    owner_user = (
+        B.objects.filter(a=OuterRef("pk"))
+        .annotate(owner_user=Subquery(C.objects.values("owner")))
+        .values("owner_user")
+    )
+
+    # Create a SimpleLazyObject containing a User object
+    user = SimpleLazyObject(lambda: user_obj)
+
+    # Try to filter A objects where the annotated owner_user equals the SimpleLazyObject
+    try:
+        A.objects.annotate(owner_user=Subquery(owner_user)).filter(
+            owner_user=user
+        )
+        print("Test passed - no error")
+    except TypeError as e:
+        print(f"Test failed with error: {e}")
+
+if __name__ == "__main__":
+    test_bug()
\ No newline at end of file
diff --git a/simple_test.py b/simple_test.py
new file mode 100644
index 0000000000..d74a2db83a
--- /dev/null
+++ b/simple_test.py
@@ -0,0 +1,27 @@
+import django
+from django.conf import settings
+from django.db.models.fields import IntegerField
+from django.utils.functional import SimpleLazyObject, Promise
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure()
+    django.setup()
+
+# Create a test function to reproduce the issue
+def test_simple_lazy_object():
+    # Create a SimpleLazyObject that returns an integer
+    lazy_int = SimpleLazyObject(lambda: 42)
+
+    # Create an IntegerField
+    field = IntegerField()
+
+    # Try to use get_prep_value with the SimpleLazyObject
+    try:
+        result = field.get_prep_value(lazy_int)
+        print(f"Success! Result: {result}")
+    except TypeError as e:
+        print(f"Failed with error: {e}")
+
+if __name__ == "__main__":
+    test_simple_lazy_object()
\ No newline at end of file
