diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py
index 30616c0172..b1d625db94 100644
--- a/django/db/migrations/autodetector.py
+++ b/django/db/migrations/autodetector.py
@@ -352,6 +352,21 @@ class MigrationAutodetector:
                             if self.check_dependency(op2, dep):
                                 dependency_graph[op].add(op2)
 
+            # Add special dependency for field moves from parent to child model
+            # to ensure RemoveField happens before CreateModel
+            for op in ops:
+                if isinstance(op, operations.CreateModel):
+                    # Check if this model has any fields that might have been moved from a parent
+                    model_name = op.name_lower
+                    for field_name, field in op.fields:
+                        # Check if there's a RemoveField operation for this field in the parent model
+                        for op2 in ops:
+                            if (isinstance(op2, operations.RemoveField) and
+                                op2.model_name_lower != model_name and
+                                op2.name_lower == field_name):
+                                # Add dependency to ensure RemoveField happens first
+                                dependency_graph[op].add(op2)
+
             # we use a stable sort for deterministic tests & general behavior
             self.generated_operations[app_label] = stable_topological_sort(ops, dependency_graph)
 
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..d90bc36743
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,57 @@
+import os
+import sys
+import shutil
+import tempfile
+import subprocess
+
+# Create a temporary directory for the test project
+temp_dir = tempfile.mkdtemp()
+os.chdir(temp_dir)
+
+# Create a Django project
+subprocess.run([sys.executable, "manage.py", "startproject", "testproject", "testproject"], check=True, env=dict(os.environ, DJANGO_SETTINGS_MODULE="testproject.settings"))
+
+# Create a Django app
+os.chdir("testproject")
+subprocess.run([sys.executable, "manage.py", "startapp", "testapp"], check=True, env=dict(os.environ, DJANGO_SETTINGS_MODULE="testproject.settings"))
+
+# Create initial model with field in parent class
+with open("testapp/models.py", "w") as f:
+    f.write("""
+from django.db import models
+
+class Readable(models.Model):
+    title = models.CharField(max_length=200)
+""")
+
+# Create initial migration
+subprocess.run([sys.executable, "manage.py", "makemigrations", "testapp"], check=True, env=dict(os.environ, DJANGO_SETTINGS_MODULE="testproject.settings"))
+
+# Apply initial migration
+subprocess.run([sys.executable, "manage.py", "migrate"], check=True, env=dict(os.environ, DJANGO_SETTINGS_MODULE="testproject.settings"))
+
+# Change model to move field to child class
+with open("testapp/models.py", "w") as f:
+    f.write("""
+from django.db import models
+
+class Readable(models.Model):
+    pass
+
+class Book(Readable):
+    title = models.CharField(max_length=200)
+""")
+
+# Create migration for the change
+subprocess.run([sys.executable, "manage.py", "makemigrations", "testapp"], check=True, env=dict(os.environ, DJANGO_SETTINGS_MODULE="testproject.settings"))
+
+# Try to apply the migration (this should fail with the current implementation)
+try:
+    subprocess.run([sys.executable, "manage.py", "migrate"], check=True, env=dict(os.environ, DJANGO_SETTINGS_MODULE="testproject.settings"))
+    print("Migration succeeded - issue is fixed!")
+except subprocess.CalledProcessError:
+    print("Migration failed - issue still exists")
+
+# Clean up
+os.chdir("/testbed")
+shutil.rmtree(temp_dir)
\ No newline at end of file
diff --git a/test_autodetector.py b/test_autodetector.py
new file mode 100644
index 0000000000..f4e6f97932
--- /dev/null
+++ b/test_autodetector.py
@@ -0,0 +1,89 @@
+import os
+import sys
+import tempfile
+import shutil
+from django.db import models
+from django.db.migrations.autodetector import MigrationAutodetector
+from django.db.migrations.state import ProjectState
+from django.apps import apps
+
+# Create a temporary directory for the test
+temp_dir = tempfile.mkdtemp()
+os.chdir(temp_dir)
+
+# Create a test app directory
+app_dir = os.path.join(temp_dir, 'testapp')
+os.makedirs(app_dir)
+with open(os.path.join(app_dir, '__init__.py'), 'w') as f:
+    f.write('')
+
+# Create initial models.py
+with open(os.path.join(app_dir, 'models.py'), 'w') as f:
+    f.write('''
+from django.db import models
+
+class Readable(models.Model):
+    title = models.CharField(max_length=200)
+''')
+
+# Register the app with Django
+class TestAppConfig:
+    name = 'testapp'
+    verbose_name = 'Test App'
+    path = app_dir
+
+apps.all_models['testapp'] = {
+    'Readable': apps.get_model('auth.User')._meta
+}
+
+# Create initial state
+initial_state = ProjectState(apps)
+
+# Create new models.py with field moved to child class
+with open(os.path.join(app_dir, 'models.py'), 'w') as f:
+    f.write('''
+from django.db import models
+
+class Readable(models.Model):
+    pass
+
+class Book(Readable):
+    title = models.CharField(max_length=200)
+''')
+
+# Register the new models with Django
+class ReadableModel(models.Model):
+    class Meta:
+        app_label = 'testapp'
+        db_table = 'testapp_readable'
+
+class BookModel(ReadableModel):
+    title = models.CharField(max_length=200)
+
+    class Meta:
+        app_label = 'testapp'
+        db_table = 'testapp_book'
+
+apps.all_models['testapp'] = {
+    'Readable': ReadableModel._meta,
+    'Book': BookModel._meta
+}
+
+# Create new state
+new_state = ProjectState(apps)
+
+# Create autodetector
+detector = MigrationAutodetector(initial_state, new_state)
+
+# Get the changes
+changes = detector.changes(None)
+
+# Print the operations to see the order
+for app_label, operations in changes.items():
+    print(f"Operations for {app_label}:")
+    for op in operations:
+        print(f"  {op.__class__.__name__}: {op}")
+
+# Clean up
+os.chdir('/testbed')
+shutil.rmtree(temp_dir)
\ No newline at end of file
diff --git a/test_migration_issue.py b/test_migration_issue.py
new file mode 100644
index 0000000000..39cdc6a3f7
--- /dev/null
+++ b/test_migration_issue.py
@@ -0,0 +1,153 @@
+import os
+import sys
+import shutil
+import tempfile
+import unittest
+from django.apps import apps
+from django.db import connection, migrations, models
+from django.db.migrations.executor import MigrationExecutor
+from django.db.migrations.recorder import MigrationRecorder
+from django.test import TransactionTestCase
+from django.utils import six
+
+class MigrationTest(TransactionTestCase):
+    available_apps = ['testapp']
+
+    def setUp(self):
+        # Create a test app
+        self.app_path = os.path.join(tempfile.gettempdir(), 'testapp')
+        os.makedirs(self.app_path, exist_ok=True)
+
+        # Create __init__.py
+        with open(os.path.join(self.app_path, '__init__.py'), 'w') as f:
+            f.write('')
+
+        # Create migrations directory
+        migrations_path = os.path.join(self.app_path, 'migrations')
+        os.makedirs(migrations_path, exist_ok=True)
+
+        # Create __init__.py for migrations
+        with open(os.path.join(migrations_path, '__init__.py'), 'w') as f:
+            f.write('')
+
+        # Create initial model
+        self.create_initial_model()
+
+    def tearDown(self):
+        # Clean up
+        shutil.rmtree(self.app_path, ignore_errors=True)
+
+    def create_initial_model(self):
+        # Create initial model file
+        with open(os.path.join(self.app_path, 'models.py'), 'w') as f:
+            f.write("""
+from django.db import models
+
+class Readable(models.Model):
+    title = models.CharField(max_length=200)
+""")
+
+        # Create initial migration
+        migration_dir = os.path.join(self.app_path, 'migrations')
+        migration_file = os.path.join(migration_dir, '0001_initial.py')
+
+        with open(migration_file, 'w') as f:
+            f.write("""
+from django.db import migrations, models
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Readable',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('title', models.CharField(max_length=200)),
+            ],
+        ),
+    ]
+""")
+
+    def test_migration_order(self):
+        """Test that moving a field from parent to child model works correctly."""
+        # Apply initial migration
+        self._apply_migrations(['0001_initial'])
+
+        # Create new migration that moves field to child class
+        self._create_migration_for_field_move()
+
+        # Try to apply the migration
+        try:
+            self._apply_migrations(['0002_move_field_to_child'])
+            print("Migration succeeded - issue is fixed!")
+        except Exception as e:
+            print(f"Migration failed - issue still exists: {e}")
+
+    def _create_migration_for_field_move(self):
+        """Create a migration that moves a field from parent to child model."""
+        migration_dir = os.path.join(self.app_path, 'migrations')
+        migration_file = os.path.join(migration_dir, '0002_move_field_to_child.py')
+
+        with open(os.path.join(self.app_path, 'models.py'), 'w') as f:
+            f.write("""
+from django.db import models
+
+class Readable(models.Model):
+    pass
+
+class Book(Readable):
+    title = models.CharField(max_length=200)
+""")
+
+        with open(migration_file, 'w') as f:
+            f.write("""
+from django.db import migrations, models
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('testapp', '0001_initial'),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Book',
+            fields=[
+            ],
+            options={
+                'abstract': False,
+            },
+            bases=('testapp.readable',),
+        ),
+        migrations.RemoveField(
+            model_name='readable',
+            name='title',
+        ),
+        migrations.AddField(
+            model_name='book',
+            name='title',
+            field=models.CharField(default='', max_length=200),
+            preserve_default=False,
+        ),
+    ]
+""")
+
+    def _apply_migrations(self, migrations):
+        """Apply a list of migrations."""
+        executor = MigrationExecutor(connection)
+        recorder = MigrationRecorder(connection)
+
+        # Get the migration plan
+        migration_qs = recorder.applied_migrations.all()
+        migration_qs = migration_qs.filter(
+            app='testapp',
+            name__in=missions
+        )
+
+        # Execute the migrations
+        executor.migrate(migration_qs)
\ No newline at end of file
diff --git a/test_simple.py b/test_simple.py
new file mode 100644
index 0000000000..0eef3125b2
--- /dev/null
+++ b/test_simple.py
@@ -0,0 +1,83 @@
+import os
+import sys
+import tempfile
+import shutil
+from django.db import models
+from django.db.migrations.autodetector import MigrationAutodetector
+from django.db.migrations.state import ProjectState
+from django.apps import apps
+from django.core.management import call_command
+from io import StringIO
+
+# Create a temporary directory for the test
+temp_dir = tempfile.mkdtemp()
+os.chdir(temp_dir)
+
+# Create a Django project
+os.system(f"{sys.executable} -m django startproject testproject")
+
+# Create a Django app
+os.chdir("testproject")
+os.system(f"{sys.executable} manage.py startapp testapp")
+
+# Add testapp to INSTALLED_APPS
+with open("testproject/settings.py", "r") as f:
+    settings_content = f.read()
+
+with open("testproject/settings.py", "w") as f:
+    # Add testapp to INSTALLED_APPS
+    settings_content = settings_content.replace(
+        "INSTALLED_APPS = [",
+        "INSTALLED_APPS = [\n    'testapp',"
+    )
+    f.write(settings_content)
+
+# Create initial model with field in parent class
+with open("testapp/models.py", "w") as f:
+    f.write("""
+from django.db import models
+
+class Readable(models.Model):
+    title = models.CharField(max_length=200)
+""")
+
+# Create initial migration
+os.system(f"{sys.executable} manage.py makemigrations testapp")
+
+# Apply initial migration
+os.system(f"{sys.executable} manage.py migrate")
+
+# Change model to move field to child class
+with open("testapp/models.py", "w") as f:
+    f.write("""
+from django.db import models
+
+class Readable(models.Model):
+    pass
+
+class Book(Readable):
+    title = models.CharField(max_length=200)
+""")
+
+# Create migration for the change
+os.system(f"{sys.executable} manage.py makemigrations testapp")
+
+# Show the migration file
+migration_dir = os.path.join("testapp", "migrations")
+migration_files = [f for f in os.listdir(migration_dir) if f.endswith(".py") and f != "__init__.py"]
+migration_files.sort()
+latest_migration = migration_files[-1]
+with open(os.path.join(migration_dir, latest_migration), "r") as f:
+    print(f"Generated migration: {latest_migration}")
+    print(f.read())
+
+# Try to apply the migration
+try:
+    os.system(f"{sys.executable} manage.py migrate")
+    print("Migration succeeded - issue is fixed!")
+except Exception as e:
+    print(f"Migration failed - issue still exists: {e}")
+
+# Clean up
+os.chdir("/testbed")
+shutil.rmtree(temp_dir)
\ No newline at end of file
diff --git a/tests/migrations/test_field_move.py b/tests/migrations/test_field_move.py
new file mode 100644
index 0000000000..27c232133c
--- /dev/null
+++ b/tests/migrations/test_field_move.py
@@ -0,0 +1,140 @@
+import os
+import shutil
+import tempfile
+
+from django.db import connection, migrations, models
+from django.db.migrations.executor import MigrationExecutor
+from django.db.migrations.migration import Migration
+from django.test import TestCase, override_settings
+from django.utils.functional import cached_property
+
+class TestFieldMove(TestCase):
+    """Test moving a field from a parent model to a child model."""
+
+    @override_settings(INSTALLED_APPS=['tests.migrations.test_field_move'])
+    def test_field_move(self):
+        """Test that moving a field from parent to child model works correctly."""
+        # Create a temporary directory for the test app
+        self.temp_dir = tempfile.mkdtemp()
+        self.addCleanup(lambda: shutil.rmtree(self.temp_dir))
+
+        # Create the app directory structure
+        app_dir = os.path.join(self.temp_dir, 'testapp')
+        os.makedirs(app_dir)
+        migrations_dir = os.path.join(app_dir, 'migrations')
+        os.makedirs(migrations_dir)
+
+        # Create __init__.py files
+        with open(os.path.join(app_dir, '__init__.py'), 'w') as f:
+            f.write('')
+        with open(os.path.join(migrations_dir, '__init__.py'), 'w') as f:
+            f.write('')
+
+        # Create initial models.py
+        with open(os.path.join(app_dir, 'models.py'), 'w') as f:
+            f.write('''
+from django.db import models
+
+class Readable(models.Model):
+    title = models.CharField(max_length=200)
+''')
+
+        # Create initial migration
+        with open(os.path.join(migrations_dir, '0001_initial.py'), 'w') as f:
+            f.write('''
+from django.db import migrations, models
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Readable',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('title', models.CharField(max_length=200)),
+            ],
+        ),
+    ]
+''')
+
+        # Add the app to INSTALLED_APPS
+        self.app_config = self._create_app_config(app_dir)
+
+        # Apply the initial migration
+        self._apply_migration('0001_initial')
+
+        # Create the migration that moves the field
+        with open(os.path.join(app_dir, 'models.py'), 'w') as f:
+            f.write('''
+from django.db import models
+
+class Readable(models.Model):
+    pass
+
+class Book(Readable):
+    title = models.CharField(max_length=200)
+''')
+
+        with open(os.path.join(migrations_dir, '0002_move_field.py'), 'w') as f:
+            f.write('''
+from django.db import migrations, models
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('testapp', '0001_initial'),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Book',
+            fields=[
+            ],
+            options={
+                'abstract': False,
+            },
+            bases=('testapp.readable',),
+        ),
+        migrations.RemoveField(
+            model_name='readable',
+            name='title',
+        ),
+        migrations.AddField(
+            model_name='book',
+            name='title',
+            field=models.CharField(default='', max_length=200),
+            preserve_default=False,
+        ),
+    ]
+''')
+
+        # Try to apply the migration
+        try:
+            self._apply_migration('0002_move_field')
+            print("Migration succeeded - issue is fixed!")
+        except Exception as e:
+            print(f"Migration failed - issue still exists: {e}")
+
+    def _create_app_config(self, app_dir):
+        """Create and return an app config for the test app."""
+        class TestAppConfig:
+            name = 'testapp'
+            verbose_name = 'Test App'
+            path = app_dir
+
+            @cached_property
+            def models_module(self):
+                from django.apps import apps
+                return apps.module_from_app(self)
+
+        return TestAppConfig()
+
+    def _apply_migration(self, migration_name):
+        """Apply a migration by name."""
+        executor = MigrationExecutor(connection)
+        executor.migrate(['testapp', migration_name])
\ No newline at end of file
