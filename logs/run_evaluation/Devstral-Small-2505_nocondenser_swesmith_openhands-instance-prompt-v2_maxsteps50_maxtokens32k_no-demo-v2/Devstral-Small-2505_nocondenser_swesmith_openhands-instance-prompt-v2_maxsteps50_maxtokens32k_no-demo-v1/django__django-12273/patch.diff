diff --git a/manage.py b/manage.py
new file mode 100644
index 0000000000..505af9eb94
--- /dev/null
+++ b/manage.py
@@ -0,0 +1,15 @@
+#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == '__main__':
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testbed.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..aa7fb86ce6
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,59 @@
+import os
+import sys
+import uuid
+from django.conf import settings
+from django.test.utils import setup_test_environment
+from django.db import models
+from django.test import TestCase
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+        ],
+    )
+
+# Create our models
+class Item(models.Model):
+    uid = models.AutoField(primary_key=True, editable=False)
+    f = models.BooleanField(default=False)
+
+    def reset(self):
+        self.uid = None
+        self.f = False
+
+class Derived(Item):
+    pass
+
+# Run the test
+class SaveTestCase(TestCase):
+    def setUp(self):
+        self.derived = Derived.objects.create(f=True)  # create the first object
+        item = Item.objects.get(pk=self.derived.pk)
+        obj1 = item.derived
+        obj1.reset()
+        obj1.save()  # the first object should be overwritten
+
+    def test_f_true(self):
+        obj = Item.objects.get(pk=self.derived.pk)
+        print(f"Test result: obj.f = {obj.f}")
+        self.assertTrue(obj.f)
+
+if __name__ == "__main__":
+    setup_test_environment()
+    from django.db import connection
+    connection.prepare_database()
+    test_case = SaveTestCase()
+    test_case.setUp()
+    try:
+        test_case.test_f_true()
+        print("Test passed!")
+    except AssertionError:
+        print("Test failed!")
\ No newline at end of file
diff --git a/test_app/__init__.py b/test_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_app/admin.py b/test_app/admin.py
new file mode 100644
index 0000000000..518bd1ca04
--- /dev/null
+++ b/test_app/admin.py
@@ -0,0 +1,5 @@
+from django.contrib import admin
+from .models import Item, Derived
+
+admin.site.register(Item)
+admin.site.register(Derived)
\ No newline at end of file
diff --git a/test_app/apps.py b/test_app/apps.py
new file mode 100644
index 0000000000..ae6f331d8b
--- /dev/null
+++ b/test_app/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class TestAppConfig(AppConfig):
+    name = 'test_app'
\ No newline at end of file
diff --git a/test_app/models.py b/test_app/models.py
new file mode 100644
index 0000000000..a36bd5b0f5
--- /dev/null
+++ b/test_app/models.py
@@ -0,0 +1,14 @@
+import uuid
+from django.db import models
+
+class Item(models.Model):
+    # uid = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
+    uid = models.AutoField(primary_key=True, editable=False)
+    f = models.BooleanField(default=False)
+
+    def reset(self):
+        self.uid = None
+        self.f = False
+
+class Derived(Item):
+    pass
\ No newline at end of file
diff --git a/test_app/tests.py b/test_app/tests.py
new file mode 100644
index 0000000000..9a2cdb00c4
--- /dev/null
+++ b/test_app/tests.py
@@ -0,0 +1,14 @@
+from django.test import TestCase
+from .models import Item, Derived
+
+class SaveTestCase(TestCase):
+    def setUp(self):
+        self.derived = Derived.objects.create(f=True)  # create the first object
+        item = Item.objects.get(pk=self.derived.pk)
+        obj1 = item.derived
+        obj1.reset()
+        obj1.save()  # the first object should be overwritten
+
+    def test_f_true(self):
+        obj = Item.objects.get(pk=self.derived.pk)
+        self.assertTrue(obj.f)
\ No newline at end of file
diff --git a/testbed/settings.py b/testbed/settings.py
new file mode 100644
index 0000000000..57039f9faa
--- /dev/null
+++ b/testbed/settings.py
@@ -0,0 +1,107 @@
+"""
+Django settings for testbed project.
+"""
+
+import os
+
+# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
+BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = 'fake-key'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+# Application definition
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'test_app',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'testbed.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'testbed.wsgi.application'
+
+# Database
+# https://docs.djangoproject.com/en/2.1/ref/settings/#databases
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }
+}
+
+# Password validation
+# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+# Internationalization
+# https://docs.djangoproject.com/en/2.1/topics/i18n/
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_L10N = True
+
+USE_TZ = True
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/2.1/howto/static-files/
+
+STATIC_URL = '/static/'
\ No newline at end of file
diff --git a/testbed/urls.py b/testbed/urls.py
new file mode 100644
index 0000000000..6b669efaa2
--- /dev/null
+++ b/testbed/urls.py
@@ -0,0 +1,6 @@
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
\ No newline at end of file
diff --git a/testbed/wsgi.py b/testbed/wsgi.py
new file mode 100644
index 0000000000..0f8dfeccca
--- /dev/null
+++ b/testbed/wsgi.py
@@ -0,0 +1,15 @@
+"""
+WSGI config for testbed project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/2.1/howto/deployment/wsgi/
+"""
+
+import os
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testbed.settings')
+
+application = get_wsgi_application()
\ No newline at end of file
