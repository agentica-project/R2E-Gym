diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index ee45bb941e..f932ffcf07 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -763,8 +763,11 @@ class Field(RegisterLookupMixin):
             if not getattr(cls, self.attname, None):
                 setattr(cls, self.attname, self.descriptor_class(self))
         if self.choices is not None:
-            setattr(cls, 'get_%s_display' % self.name,
-                    partialmethod(cls._get_FIELD_display, field=self))
+            display_method_name = 'get_%s_display' % self.name
+            # Only add the display method if one doesn't already exist
+            if not hasattr(cls, display_method_name):
+                setattr(cls, display_method_name,
+                        partialmethod(cls._get_FIELD_display, field=self))
 
     def get_filter_kwargs_for_object(self, obj):
         """
diff --git a/test_get_display.py b/test_get_display.py
new file mode 100644
index 0000000000..6134b121fc
--- /dev/null
+++ b/test_get_display.py
@@ -0,0 +1,32 @@
+import os
+import sys
+import django
+from django.db import models
+from django.utils.translation import ugettext_lazy as _
+
+# Set up Django
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_sqlite')
+django.setup()
+
+class FooBar(models.Model):
+    foo_bar = models.CharField(_("foo"), choices=[(1, 'foo'), (2, 'bar')], max_length=1)
+
+    def __str__(self):
+        return self.get_foo_bar_display()
+
+    def get_foo_bar_display(self):
+        return "something"
+
+# Test the behavior
+def test_get_display():
+    # Create an instance
+    fb = FooBar(foo_bar=1)
+
+    # Print the result of get_foo_bar_display
+    print("Result of get_foo_bar_display:", fb.get_foo_bar_display())
+
+    # Print the result of __str__
+    print("Result of __str__:", str(fb))
+
+if __name__ == "__main__":
+    test_get_display()
\ No newline at end of file
diff --git a/test_get_display_default.py b/test_get_display_default.py
new file mode 100644
index 0000000000..ff623df172
--- /dev/null
+++ b/test_get_display_default.py
@@ -0,0 +1,29 @@
+import os
+import sys
+import django
+from django.db import models
+from django.utils.translation import ugettext_lazy as _
+
+# Set up Django
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_sqlite')
+django.setup()
+
+class DefaultDisplay(models.Model):
+    foo_bar = models.CharField(_("foo"), choices=[(1, 'foo'), (2, 'bar')], max_length=1)
+
+    def __str__(self):
+        return self.get_foo_bar_display()
+
+# Test the behavior
+def test_get_display_default():
+    # Create an instance
+    fb = DefaultDisplay(foo_bar=1)
+
+    # Print the result of get_foo_bar_display
+    print("Result of get_foo_bar_display:", fb.get_foo_bar_display())
+
+    # Print the result of __str__
+    print("Result of __str__:", str(fb))
+
+if __name__ == "__main__":
+    test_get_display_default()
\ No newline at end of file
diff --git a/test_sqlite.py b/test_sqlite.py
new file mode 100644
index 0000000000..c1bf63ccc0
--- /dev/null
+++ b/test_sqlite.py
@@ -0,0 +1,46 @@
+import os
+import django
+
+BASE_DIR = os.path.dirname(os.path.abspath(__file__))
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = 'fake-key'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+# Application definition
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    '__main__',
+]
+
+# Database
+# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }
+}
+
+# Internationalization
+# https://docs.djangoproject.com/en/2.2/topics/i18n/
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_L10N = True
+
+USE_TZ = True
\ No newline at end of file
