diff --git a/astropy/coordinates/builtin_frames/__init__.py b/astropy/coordinates/builtin_frames/__init__.py
index 6fd688c285..a90c555574 100644
--- a/astropy/coordinates/builtin_frames/__init__.py
+++ b/astropy/coordinates/builtin_frames/__init__.py
@@ -50,6 +50,7 @@ from . import cirs_observed_transforms
 from . import icrs_observed_transforms
 from . import intermediate_rotation_transforms
 from . import ecliptic_transforms
+from . import itrs_observed_transforms
 
 # Import this after importing other frames, since this requires various
 # transformtions to set up the LSR frames
@@ -125,7 +126,7 @@ def make_transform_graph_docs(transform_graph):
             <li style='list-style: none;'>
                 <p style="font-size: 12px;line-height: 24px;font-weight: normal;color: #848484;padding: 0;margin: 0;">
                     <b>{cls.__name__}:</b>
-                    <span style="font-size: 24px; color: {color};"><b>➝</b></span>
+                    <span style="font-size: 24px; color: {color};"><b>‚ûù</b></span>
                 </p>
             </li>
         """
diff --git a/astropy/coordinates/builtin_frames/itrs_observed_transforms.py b/astropy/coordinates/builtin_frames/itrs_observed_transforms.py
new file mode 100644
index 0000000000..5c3e7a59f9
--- /dev/null
+++ b/astropy/coordinates/builtin_frames/itrs_observed_transforms.py
@@ -0,0 +1,125 @@
+# Licensed under a 3-clause BSD style license - see LICENSE.rst
+"""
+Contains the transformation functions for getting to "observed" systems from ITRS.
+This implementation stays entirely within the ITRS and merely converts between
+ITRS, AltAz, and HADec coordinates using rotation matrices.
+"""
+import numpy as np
+
+from astropy import units as u
+from astropy.coordinates.matrix_utilities import rotation_matrix, matrix_transpose
+from astropy.coordinates.baseframe import frame_transform_graph
+from astropy.coordinates.transformations import FunctionTransformWithFiniteDifference
+
+from .altaz import AltAz
+from .hadec import HADec
+from .itrs import ITRS
+from .utils import PIOVER2
+
+def itrs_to_observed_mat(observed_frame):
+    """
+    Create a rotation matrix to transform from ITRS to an observed frame.
+
+    Parameters
+    ----------
+    observed_frame : `~astropy.coordinates.AltAz` or `~astropy.coordinates.HADec`
+        The observed frame to transform to.
+
+    Returns
+    -------
+    matrix : 3x3 numpy array
+        The rotation matrix to transform from ITRS to the observed frame.
+    """
+    lon, lat, height = observed_frame.location.to_geodetic('WGS84')
+    elong = lon.to_value(u.radian)
+
+    if isinstance(observed_frame, AltAz):
+        # form ITRS to AltAz matrix
+        elat = lat.to_value(u.radian)
+        # AltAz frame is left handed
+        minus_x = np.eye(3)
+        minus_x[0][0] = -1.0
+        mat = (minus_x
+               @ rotation_matrix(PIOVER2 - elat, 'y', unit=u.radian)
+               @ rotation_matrix(elong, 'z', unit=u.radian))
+
+    else:
+        # form ITRS to HADec matrix
+        # HADec frame is left handed
+        minus_y = np.eye(3)
+        minus_y[1][1] = -1.0
+        mat = (minus_y
+               @ rotation_matrix(elong, 'z', unit=u.radian))
+    return mat
+
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, AltAz)
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, HADec)
+def itrs_to_observed(itrs_coo, observed_frame):
+    """
+    Transform from ITRS to an observed frame (AltAz or HADec).
+
+    Parameters
+    ----------
+    itrs_coo : `~astropy.coordinates.ITRS` object
+        The ITRS coordinate to transform.
+    observed_frame : `~astropy.coordinates.AltAz` or `~astropy.coordinates.HADec`
+        The observed frame to transform to.
+
+    Returns
+    -------
+    observed_coo : `~astropy.coordinates.AltAz` or `~astropy.coordinates.HADec`
+        The transformed coordinate in the observed frame.
+    """
+    # Trying to synchronize the obstimes here makes no sense. In fact,
+    # it's a real gotcha as doing an ITRS->ITRS transform references
+    # ITRS coordinates, which should be tied to the Earth, to the SSB.
+    # Instead, we treat ITRS coordinates as time invariant here.
+
+    # Get the observer's ITRS position
+    observer_itrs = observed_frame.location.get_itrs()
+
+    # form the Topocentric ITRS position
+    # Ensure we're working with the same units
+    if hasattr(itrs_coo.cartesian, 'unit'):
+        observer_cart = observer_itrs.cartesian.to(itrs_coo.cartesian.unit)
+    else:
+        observer_cart = observer_itrs.cartesian
+
+    topocentric_itrs_repr = itrs_coo.cartesian - observer_cart
+    rep = topocentric_itrs_repr.transform(itrs_to_observed_mat(observed_frame))
+    return observed_frame.realize_frame(rep)
+
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, ITRS)
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, HADec, ITRS)
+def observed_to_itrs(observed_coo, itrs_frame):
+    """
+    Transform from an observed frame (AltAz or HADec) to ITRS.
+
+    Parameters
+    ----------
+    observed_coo : `~astropy.coordinates.AltAz` or `~astropy.coordinates.HADec`
+        The observed coordinate to transform.
+    itrs_frame : `~astropy.coordinates.ITRS`
+        The ITRS frame to transform to.
+
+    Returns
+    -------
+    itrs_coo : `~astropy.coordinates.ITRS`
+        The transformed coordinate in the ITRS frame.
+    """
+    # form the Topocentric ITRS position
+    topocentric_itrs_repr = observed_coo.cartesian.transform(matrix_transpose(
+                            itrs_to_observed_mat(observed_coo)))
+
+    # Get the observer's ITRS position
+    observer_itrs = observed_coo.location.get_itrs()
+
+    # form the Geocentric ITRS position
+    # Ensure we're working with the same units
+    if hasattr(topocentric_itrs_repr, 'unit'):
+        observer_cart = observer_itrs.cartesian.to(topocentric_itrs_repr.unit)
+    else:
+        observer_cart = observer_itrs.cartesian
+
+    rep = topocentric_itrs_repr + observer_cart
+    return itrs_frame.realize_frame(rep)
\ No newline at end of file
diff --git a/pyproject.toml b/pyproject.toml
index 7a3b85fc92..83f08ed124 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,5 +1,5 @@
 [build-system]
-requires = ["setuptools",
+requires = ["setuptools==68.0.0",
             "setuptools_scm>=6.2",
             "wheel",
             "cython==0.29.30",
diff --git a/test_itrs_observed.py b/test_itrs_observed.py
new file mode 100644
index 0000000000..e468852af1
--- /dev/null
+++ b/test_itrs_observed.py
@@ -0,0 +1,35 @@
+import numpy as np
+from astropy import units as u
+from astropy.time import Time
+from astropy.coordinates import EarthLocation, ITRS, AltAz, HADec, CartesianRepresentation
+
+# Set up test parameters
+t = Time('J2010')
+obj = EarthLocation(-1*u.deg, 52*u.deg, height=10.*u.km)
+home = EarthLocation(-1*u.deg, 52*u.deg, height=0.*u.km)
+
+# Create an ITRS coordinate for the object
+itrs_obj = obj.get_itrs(t)
+
+# Transform to AltAz
+altaz = itrs_obj.transform_to(AltAz(obstime=t, location=home))
+print(f"ITRS to AltAz - Altitude: {altaz.alt}")
+print(f"ITRS to AltAz - Azimuth: {altaz.az}")
+
+# Transform to HADec
+hadec = itrs_obj.transform_to(HADec(obstime=t, location=home))
+print(f"ITRS to HADec - HA: {hadec.ha}")
+print(f"ITRS to HADec - Dec: {hadec.dec}")
+
+# Let's test the straight overhead case from test_straight_overhead
+print("\nTesting straight overhead case:")
+# An object that appears straight overhead - FOR A GEOCENTRIC OBSERVER.
+cirs_geo = obj.get_itrs(t)
+# now get the Geocentric ITRS position of observatory
+obsrepr = home.get_itrs(t).cartesian
+# topocentric ITRS position of a straight overhead object
+cirs_repr = cirs_geo.cartesian - obsrepr
+# create a AltAz object that appears straight overhead for a TOPOCENTRIC OBSERVER
+topocentric_altaz_frame = AltAz(obstime=t, location=home)
+altaz_topo = topocentric_altaz_frame.realize_frame(cirs_repr.transform_to(AltAz))
+print(f"AltAz altitude for straight overhead: {altaz_topo.alt}")
\ No newline at end of file
