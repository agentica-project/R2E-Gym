+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Untracked files:
  (use "git add <file>..." to include in what will be committed)
	astropy/coordinates/builtin_frames/__init__.py.orig
	pyproject.toml.orig
	pyproject.toml.rej

nothing added to commit but untracked files present (use "git add" to track)
+ git show
commit 6500928dc0e57be8f06d1162eacc3ba5e2eff692
Merge: 8a52f9a9ff 0fd16203e2
Author: Tom Aldcroft <taldcroft@gmail.com>
Date:   Wed Jul 27 10:44:33 2022 -0400

    Merge pull request #13502 from taldcroft/better-iers-docs
    
    Improve IERS docs and add a top-level entry

+ git -c core.fileMode=false diff 6500928dc0e57be8f06d1162eacc3ba5e2eff692
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e '.[test]' --verbose
Using pip 25.1 from /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pip (python 3.9)
Obtaining file:///testbed
  Installing build dependencies: started
  Running command pip subprocess to install build dependencies
  Using pip 25.1 from /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pip (python 3.9)
  Collecting setuptools
    Obtaining dependency information for setuptools from https://files.pythonhosted.org/packages/58/29/93c53c098d301132196c3238c312825324740851d77a8500a2462c0fd888/setuptools-80.8.0-py3-none-any.whl.metadata
    Downloading setuptools-80.8.0-py3-none-any.whl.metadata (6.6 kB)
  Collecting setuptools_scm>=6.2
    Obtaining dependency information for setuptools_scm>=6.2 from https://files.pythonhosted.org/packages/ab/ac/8f96ba9b4cfe3e4ea201f23f4f97165862395e9331a424ed325ae37024a8/setuptools_scm-8.3.1-py3-none-any.whl.metadata
    Using cached setuptools_scm-8.3.1-py3-none-any.whl.metadata (7.0 kB)
  Collecting wheel
    Obtaining dependency information for wheel from https://files.pythonhosted.org/packages/0b/2c/87f3254fd8ffd29e4c02732eee68a83a1d3c346ae39bc6822dcbcb697f2b/wheel-0.45.1-py3-none-any.whl.metadata
    Using cached wheel-0.45.1-py3-none-any.whl.metadata (2.3 kB)
  Collecting cython==0.29.30
    Obtaining dependency information for cython==0.29.30 from https://files.pythonhosted.org/packages/a7/c6/3af0df983ba8500831fdae19a515be6e532da7683ab98e031d803e6a8d03/Cython-0.29.30-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl.metadata
    Using cached Cython-0.29.30-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl.metadata (2.8 kB)
  Collecting oldest-supported-numpy
    Obtaining dependency information for oldest-supported-numpy from https://files.pythonhosted.org/packages/dc/5c/e3c84cfdd488701aa074b22cf5bd227fb15d26e1d55a66d9088c39afa123/oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata
    Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl.metadata (9.8 kB)
  Collecting extension-helpers
    Obtaining dependency information for extension-helpers from https://files.pythonhosted.org/packages/b3/0e/22599eac9e50f4274e78e47cef7e760d7a1bb2f0d0fdfb0bb5b0d2da263a/extension_helpers-1.2.0-py3-none-any.whl.metadata
    Using cached extension_helpers-1.2.0-py3-none-any.whl.metadata (2.2 kB)
  Collecting packaging>=20 (from setuptools_scm>=6.2)
    Obtaining dependency information for packaging>=20 from https://files.pythonhosted.org/packages/20/12/38679034af332785aac8774540895e234f4d07f7545804097de4b666afd8/packaging-25.0-py3-none-any.whl.metadata
    Using cached packaging-25.0-py3-none-any.whl.metadata (3.3 kB)
  Collecting tomli>=1 (from setuptools_scm>=6.2)
    Obtaining dependency information for tomli>=1 from https://files.pythonhosted.org/packages/6e/c2/61d3e0f47e2b74ef40a68b9e6ad5984f6241a942f7cd3bbfbdbd03861ea9/tomli-2.2.1-py3-none-any.whl.metadata
    Using cached tomli-2.2.1-py3-none-any.whl.metadata (10 kB)
  Collecting typing-extensions (from setuptools_scm>=6.2)
    Obtaining dependency information for typing-extensions from https://files.pythonhosted.org/packages/8b/54/b1ae86c0973cc6f0210b53d508ca3641fb6d0c56823f288d108bc7ab3cc8/typing_extensions-4.13.2-py3-none-any.whl.metadata
    Using cached typing_extensions-4.13.2-py3-none-any.whl.metadata (3.0 kB)
  Collecting importlib-metadata>=4.6 (from setuptools_scm>=6.2)
    Obtaining dependency information for importlib-metadata>=4.6 from https://files.pythonhosted.org/packages/20/b0/36bd937216ec521246249be3bf9855081de4c5e06a0c9b4219dbeda50373/importlib_metadata-8.7.0-py3-none-any.whl.metadata
    Using cached importlib_metadata-8.7.0-py3-none-any.whl.metadata (4.8 kB)
    Link requires a different Python (3.9.21 not in: '>=3.10'): https://files.pythonhosted.org/packages/d1/0f/8d2b5ebb01dc49d20ae0a282d6baff7202b7bf0df8acdd4a6abeffe98070/numpy-2.1.0rc1.tar.gz (from https://pypi.org/simple/numpy/) (requires-python:>=3.10)
    Link requires a different Python (3.9.21 not in: '>=3.10'): https://files.pythonhosted.org/packages/54/a4/f8188c4f3e07f7737683588210c073478abcb542048cf4ab6fedad0b458a/numpy-2.1.0.tar.gz (from https://pypi.org/simple/numpy/) (requires-python:>=3.10)
    Link requires a different Python (3.9.21 not in: '>=3.10'): https://files.pythonhosted.org/packages/59/5f/9003bb3e632f2b58f5e3a3378902dcc73c5518070736c6740fe52454e8e1/numpy-2.1.1.tar.gz (from https://pypi.org/simple/numpy/) (requires-python:>=3.10)
    Link requires a different Python (3.9.21 not in: '>=3.10'): https://files.pythonhosted.org/packages/4b/d1/8a730ea07f4a37d94f9172f4ce1d81064b7a64766b460378be278952de75/numpy-2.1.2.tar.gz (from https://pypi.org/simple/numpy/) (requires-python:>=3.10)
    Link requires a different Python (3.9.21 not in: '>=3.10'): https://files.pythonhosted.org/packages/25/ca/1166b75c21abd1da445b97bf1fa2f14f423c6cfb4fc7c4ef31dccf9f6a94/numpy-2.1.3.tar.gz (from https://pypi.org/simple/numpy/) (requires-python:>=3.10)
    Link requires a different Python (3.9.21 not in: '>=3.10'): https://files.pythonhosted.org/packages/d1/eb/9c688381b252f711cadf3ec38b3eceb0b946ff5a161a3adc520c886fed43/numpy-2.2.0rc1.tar.gz (from https://pypi.org/simple/numpy/) (requires-python:>=3.10)
    Link requires a different Python (3.9.21 not in: '>=3.10'): https://files.pythonhosted.org/packages/47/1b/1d565e0f6e156e1522ab564176b8b29d71e13d8caf003a08768df3d5cec5/numpy-2.2.0.tar.gz (from https://pypi.org/simple/numpy/) (requires-python:>=3.10)
    Link requires a different Python (3.9.21 not in: '>=3.10'): https://files.pythonhosted.org/packages/f2/a5/fdbf6a7871703df6160b5cf3dd774074b086d278172285c52c2758b76305/numpy-2.2.1.tar.gz (from https://pypi.org/simple/numpy/) (requires-python:>=3.10)
    Link requires a different Python (3.9.21 not in: '>=3.10'): https://files.pythonhosted.org/packages/ec/d0/c12ddfd3a02274be06ffc71f3efc6d0e457b0409c4481596881e748cb264/numpy-2.2.2.tar.gz (from https://pypi.org/simple/numpy/) (requires-python:>=3.10)
    Link requires a different Python (3.9.21 not in: '>=3.10'): https://files.pythonhosted.org/packages/fb/90/8956572f5c4ae52201fdec7ba2044b2c882832dcec7d5d0922c9e9acf2de/numpy-2.2.3.tar.gz (from https://pypi.org/simple/numpy/) (requires-python:>=3.10)
    Link requires a different Python (3.9.21 not in: '>=3.10'): https://files.pythonhosted.org/packages/e1/78/31103410a57bc2c2b93a3597340a8119588571f6a4539067546cb9a0bfac/numpy-2.2.4.tar.gz (from https://pypi.org/simple/numpy/) (requires-python:>=3.10)
    Link requires a different Python (3.9.21 not in: '>=3.10'): https://files.pythonhosted.org/packages/dc/b2/ce4b867d8cd9c0ee84938ae1e6a6f7926ebf928c9090d036fc3c6a04f946/numpy-2.2.5.tar.gz (from https://pypi.org/simple/numpy/) (requires-python:>=3.10)
    Link requires a different Python (3.9.21 not in: '>=3.10'): https://files.pythonhosted.org/packages/76/21/7d2a95e4bba9dc13d043ee156a356c0a8f0c6309dff6b21b4d71a073b8a8/numpy-2.2.6.tar.gz (from https://pypi.org/simple/numpy/) (requires-python:>=3.10)
  Collecting numpy==1.19.3 (from oldest-supported-numpy)
    Obtaining dependency information for numpy==1.19.3 from https://files.pythonhosted.org/packages/c3/8d/2ae53d96a92a66b8daa3dfb2dd6cf4bfcb8e3d4148bdd713c8fc7de83141/numpy-1.19.3-cp39-cp39-manylinux2010_x86_64.whl.metadata
    Using cached numpy-1.19.3-cp39-cp39-manylinux2010_x86_64.whl.metadata (2.0 kB)
  Collecting zipp>=3.20 (from importlib-metadata>=4.6->setuptools_scm>=6.2)
    Obtaining dependency information for zipp>=3.20 from https://files.pythonhosted.org/packages/b7/1a/7e4798e9339adc931158c9d69ecc34f5e6791489d469f5e50ec15e35f458/zipp-3.21.0-py3-none-any.whl.metadata
    Using cached zipp-3.21.0-py3-none-any.whl.metadata (3.7 kB)
  Using cached Cython-0.29.30-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl (2.0 MB)
  Downloading setuptools-80.8.0-py3-none-any.whl (1.2 MB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 1.2/1.2 MB 3.4 MB/s eta 0:00:00
  Using cached setuptools_scm-8.3.1-py3-none-any.whl (43 kB)
  Using cached wheel-0.45.1-py3-none-any.whl (72 kB)
  Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl (4.9 kB)
  Using cached numpy-1.19.3-cp39-cp39-manylinux2010_x86_64.whl (14.9 MB)
  Using cached extension_helpers-1.2.0-py3-none-any.whl (23 kB)
  Using cached importlib_metadata-8.7.0-py3-none-any.whl (27 kB)
  Using cached packaging-25.0-py3-none-any.whl (66 kB)
  Using cached tomli-2.2.1-py3-none-any.whl (14 kB)
  Using cached zipp-3.21.0-py3-none-any.whl (9.6 kB)
  Using cached typing_extensions-4.13.2-py3-none-any.whl (45 kB)
  Installing collected packages: zipp, wheel, typing-extensions, tomli, setuptools, packaging, numpy, cython, oldest-supported-numpy, importlib-metadata, extension-helpers, setuptools_scm
    Creating /tmp/pip-build-env-9f1a5nit/overlay/bin
    changing mode of /tmp/pip-build-env-9f1a5nit/overlay/bin/wheel to 755
    changing mode of /tmp/pip-build-env-9f1a5nit/overlay/bin/f2py to 755
    changing mode of /tmp/pip-build-env-9f1a5nit/overlay/bin/f2py3 to 755
    changing mode of /tmp/pip-build-env-9f1a5nit/overlay/bin/f2py3.9 to 755
    changing mode of /tmp/pip-build-env-9f1a5nit/overlay/bin/cygdb to 755
    changing mode of /tmp/pip-build-env-9f1a5nit/overlay/bin/cython to 755
    changing mode of /tmp/pip-build-env-9f1a5nit/overlay/bin/cythonize to 755

  Successfully installed cython-0.29.30 extension-helpers-1.2.0 importlib-metadata-8.7.0 numpy-1.19.3 oldest-supported-numpy-2023.12.21 packaging-25.0 setuptools-80.8.0 setuptools_scm-8.3.1 tomli-2.2.1 typing-extensions-4.13.2 wheel-0.45.1 zipp-3.21.0
  WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Running command Checking if build backend supports build_editable
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Running command Getting requirements to build editable
  Traceback (most recent call last):
    File "/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py", line 389, in <module>
      main()
    File "/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py", line 373, in main
      json_out["return_val"] = hook(**hook_input["kwargs"])
    File "/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py", line 157, in get_requires_for_build_editable
      return hook(config_settings)
    File "/tmp/pip-build-env-9f1a5nit/overlay/lib/python3.9/site-packages/setuptools/build_meta.py", line 473, in get_requires_for_build_editable
      return self.get_requires_for_build_wheel(config_settings)
    File "/tmp/pip-build-env-9f1a5nit/overlay/lib/python3.9/site-packages/setuptools/build_meta.py", line 331, in get_requires_for_build_wheel
      return self._get_build_requires(config_settings, requirements=[])
    File "/tmp/pip-build-env-9f1a5nit/overlay/lib/python3.9/site-packages/setuptools/build_meta.py", line 301, in _get_build_requires
      self.run_setup()
    File "/tmp/pip-build-env-9f1a5nit/overlay/lib/python3.9/site-packages/setuptools/build_meta.py", line 317, in run_setup
      exec(code, locals())
    File "<string>", line 68, in <module>
    File "/tmp/pip-build-env-9f1a5nit/overlay/lib/python3.9/site-packages/extension_helpers/_setup_helpers.py", line 63, in get_extensions
      for setuppkg in iter_setup_packages(srcdir, packages):
    File "/tmp/pip-build-env-9f1a5nit/overlay/lib/python3.9/site-packages/extension_helpers/_setup_helpers.py", line 159, in iter_setup_packages
      module = import_file(setup_package, name=packagename + ".setup_package")
    File "/tmp/pip-build-env-9f1a5nit/overlay/lib/python3.9/site-packages/extension_helpers/_utils.py", line 138, in import_file
      loader.exec_module(mod)
    File "<frozen importlib._bootstrap_external>", line 850, in exec_module
    File "<frozen importlib._bootstrap>", line 228, in _call_with_frames_removed
    File "astropy/wcs/setup_package.py", line 12, in <module>
      from setuptools.dep_util import newer_group
  ModuleNotFoundError: No module named 'setuptools.dep_util'
  error: subprocess-exited-with-error
  
  × Getting requirements to build editable did not run successfully.
  │ exit code: 1
  ╰─> See above for output.
  
  note: This error originates from a subprocess, and is likely not a problem with pip.
  full command: /opt/miniconda3/envs/testbed/bin/python /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py get_requires_for_build_editable /tmp/tmpcypveubq
  cwd: /testbed
  Getting requirements to build editable: finished with status 'error'
error: subprocess-exited-with-error

× Getting requirements to build editable did not run successfully.
│ exit code: 1
╰─> See above for output.

note: This error originates from a subprocess, and is likely not a problem with pip.
+ git checkout 6500928dc0e57be8f06d1162eacc3ba5e2eff692 astropy/coordinates/tests/test_intermediate_transformations.py
Updated 0 paths from 059e0f861b
+ git apply -v -
Checking patch astropy/coordinates/tests/test_intermediate_transformations.py...
Applied patch astropy/coordinates/tests/test_intermediate_transformations.py cleanly.
+ : '>>>>> Start Test Output'
+ pytest -rA astropy/coordinates/tests/test_intermediate_transformations.py
<frozen importlib._bootstrap>:228: RuntimeWarning: numpy.ndarray size changed, may indicate binary incompatibility. Expected 80 from C header, got 96 from PyObject
============================= test session starts ==============================
platform linux -- Python 3.9.21, pytest-7.4.0, pluggy-1.3.0

Running tests with Astropy version 5.2.dev287+g6500928dc0.d20250525.
Running tests in astropy/coordinates/tests/test_intermediate_transformations.py.

Date: 2025-05-25T03:43:23

Platform: Linux-5.10.0-34-cloud-amd64-x86_64-with-glibc2.35

Executable: /opt/miniconda3/envs/testbed/bin/python

Full Python Version: 
3.9.21 (main, Dec 11 2024, 16:24:11) 
[GCC 11.2.0]

encodings: sys: utf-8, locale: UTF-8, filesystem: utf-8
byteorder: little
float info: dig: 15, mant_dig: 15

Package versions: 
Numpy: 1.25.2
Scipy: not available
Matplotlib: not available
h5py: not available
Pandas: not available
PyERFA: 2.0.0.3
Cython: not available
Scikit-image: not available
asdf: not available
pyarrow: not available

Using Astropy options: remote_data: none.

ARCH_ON_CI: undefined
IS_CRON: undefined

rootdir: /testbed
configfile: setup.cfg
plugins: filter-subpackage-0.1.2, openfiles-0.5.0, remotedata-0.4.0, xdist-3.3.1, mock-3.11.1, astropy-0.10.0, arraydiff-0.5.0, cov-4.1.0, astropy-header-0.2.2, doctestplus-1.0.0, hypothesis-6.46.7
collected 76 items

astropy/coordinates/tests/test_intermediate_transformations.py F......FF [ 11%]
..F......................................................ss..Fs....      [100%]

=================================== FAILURES ===================================
________________________________ test_icrs_cirs ________________________________

    def test_icrs_cirs():
        """
        Check a few cases of ICRS<->CIRS for consistency.
    
        Also includes the CIRS<->CIRS transforms at different times, as those go
        through ICRS
        """
        usph = golden_spiral_grid(200)
        dist = np.linspace(0., 1, len(usph)) * u.pc
        inod = ICRS(usph)
        iwd = ICRS(ra=usph.lon, dec=usph.lat, distance=dist)
    
        cframe1 = CIRS()
>       cirsnod = inod.transform_to(cframe1)  # uses the default time

astropy/coordinates/tests/test_intermediate_transformations.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
astropy/coordinates/baseframe.py:1202: in transform_to
    return trans(self, new_frame)
astropy/coordinates/transformations.py:1478: in __call__
    curr_coord = t(curr_coord, curr_toframe)
astropy/coordinates/transformations.py:1079: in __call__
    return supcall(fromcoord, toframe)
astropy/coordinates/builtin_frames/icrs_cirs_transforms.py:35: in icrs_to_cirs
    astrom = erfa_astrom.get().apco(cirs_frame)
astropy/coordinates/erfa_astrom.py:50: in apco
    xp, yp = get_polar_motion(obstime)
astropy/coordinates/builtin_frames/utils.py:47: in get_polar_motion
    xp, yp, status = iers_table.pm_xy(time, return_status=True)
astropy/utils/iers/iers.py:365: in pm_xy
    return self._interpolate(jd1, jd2, ['PM_x', 'PM_y'],
astropy/utils/iers/iers.py:392: in _interpolate
    mjd, utc = self.mjd_utc(jd1, jd2)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <IERS_B length=22066>
 year month  day    MJD      PM_x   ... e_UT1_UTC  e_LOD  e_dX_2000A e_dY_2000A
                ...  1.2e-05 6.7e-06    7.5e-05    7.6e-05
 2022     5    31 59730.0  0.149795 ...  1.17e-05 6.7e-06    7.5e-05    7.5e-05
jd1 = <Time object: scale='tt' format='jyear_str' value=J2000.000>, jd2 = 0.0

    def mjd_utc(self, jd1, jd2=0.):
        """Turn a time to MJD, returning integer and fractional parts.
    
        Parameters
        ----------
        jd1 : float, array, or `~astropy.time.Time`
            first part of two-part JD, or Time object
        jd2 : float or array, optional
            second part of two-part JD.
            Default is 0., ignored if jd1 is `~astropy.time.Time`.
    
        Returns
        -------
        mjd : float or array
            integer part of MJD
        utc : float or array
            fractional part of MJD
        """
        try:  # see if this is a Time object
            jd1, jd2 = jd1.utc.jd1, jd1.utc.jd2
        except Exception:
            pass
    
>       mjd = np.floor(jd1 - MJD_ZERO + jd2)
E       TypeError: unsupported operand type(s) for -: 'Time' and 'float'

astropy/utils/iers/iers.py:271: TypeError
___________________ test_itrs_topo_to_altaz_with_refraction ____________________

    def test_itrs_topo_to_altaz_with_refraction():
    
        loc = EarthLocation(lat=0*u.deg, lon=0*u.deg, height=0*u.m)
        usph = golden_spiral_grid(200)
        dist = np.linspace(1., 1000.0, len(usph)) * u.au
        icrs = ICRS(ra=usph.lon, dec=usph.lat, distance=dist)
        altaz_frame1 = AltAz(obstime = 'J2000', location=loc)
        altaz_frame2 = AltAz(obstime = 'J2000', location=loc, pressure=1000.0 * u.hPa,
                             relative_humidity=0.5)
        cirs_frame = CIRS(obstime = 'J2000', location=loc)
>       itrs_frame = ITRS(location=loc)

astropy/coordinates/tests/test_intermediate_transformations.py:207: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ITRS Frame (obstime=J2000.000)>, copy = True, representation_type = None
differential_type = None, args = ()
kwargs = {'location': <EarthLocation (6378137., 0., 0.) m>}, values = {}
fnm = 'obstime'
fdefault = <Time object: scale='tt' format='jyear_str' value=J2000.000>

    def __init__(self, *args, copy=True, representation_type=None,
                 differential_type=None, **kwargs):
        self._attr_names_with_defaults = []
    
        self._representation = self._infer_representation(representation_type, differential_type)
        self._data = self._infer_data(args, copy, kwargs)  # possibly None.
    
        # Set frame attributes, if any
    
        values = {}
        for fnm, fdefault in self.get_frame_attr_names().items():
            # Read-only frame attributes are defined as FrameAttribute
            # descriptors which are not settable, so set 'real' attributes as
            # the name prefaced with an underscore.
    
            if fnm in kwargs:
                value = kwargs.pop(fnm)
                setattr(self, '_' + fnm, value)
                # Validate attribute by getting it. If the instance has data,
                # this also checks its shape is OK. If not, we do it below.
                values[fnm] = getattr(self, fnm)
            else:
                setattr(self, '_' + fnm, fdefault)
                self._attr_names_with_defaults.append(fnm)
    
        if kwargs:
>           raise TypeError(
                f'Coordinate frame {self.__class__.__name__} got unexpected '
                f'keywords: {list(kwargs)}')
E           TypeError: Coordinate frame ITRS got unexpected keywords: ['location']

astropy/coordinates/baseframe.py:319: TypeError
___________________ test_itrs_topo_to_hadec_with_refraction ____________________

    def test_itrs_topo_to_hadec_with_refraction():
    
        loc = EarthLocation(lat=0*u.deg, lon=0*u.deg, height=0*u.m)
        usph = golden_spiral_grid(200)
        dist = np.linspace(1., 1000.0, len(usph)) * u.au
        icrs = ICRS(ra=usph.lon, dec=usph.lat, distance=dist)
        hadec_frame1 = HADec(obstime = 'J2000', location=loc)
        hadec_frame2 = HADec(obstime = 'J2000', location=loc, pressure=1000.0 * u.hPa,
                             relative_humidity=0.5)
        cirs_frame = CIRS(obstime = 'J2000', location=loc)
>       itrs_frame = ITRS(location=loc)

astropy/coordinates/tests/test_intermediate_transformations.py:262: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ITRS Frame (obstime=J2000.000)>, copy = True, representation_type = None
differential_type = None, args = ()
kwargs = {'location': <EarthLocation (6378137., 0., 0.) m>}, values = {}
fnm = 'obstime'
fdefault = <Time object: scale='tt' format='jyear_str' value=J2000.000>

    def __init__(self, *args, copy=True, representation_type=None,
                 differential_type=None, **kwargs):
        self._attr_names_with_defaults = []
    
        self._representation = self._infer_representation(representation_type, differential_type)
        self._data = self._infer_data(args, copy, kwargs)  # possibly None.
    
        # Set frame attributes, if any
    
        values = {}
        for fnm, fdefault in self.get_frame_attr_names().items():
            # Read-only frame attributes are defined as FrameAttribute
            # descriptors which are not settable, so set 'real' attributes as
            # the name prefaced with an underscore.
    
            if fnm in kwargs:
                value = kwargs.pop(fnm)
                setattr(self, '_' + fnm, value)
                # Validate attribute by getting it. If the instance has data,
                # this also checks its shape is OK. If not, we do it below.
                values[fnm] = getattr(self, fnm)
            else:
                setattr(self, '_' + fnm, fdefault)
                self._attr_names_with_defaults.append(fnm)
    
        if kwargs:
>           raise TypeError(
                f'Coordinate frame {self.__class__.__name__} got unexpected '
                f'keywords: {list(kwargs)}')
E           TypeError: Coordinate frame ITRS got unexpected keywords: ['location']

astropy/coordinates/baseframe.py:319: TypeError
_____________________________ test_cirs_itrs_topo ______________________________

    def test_cirs_itrs_topo():
        """
        Check basic CIRS<->ITRS topocentric transforms for round-tripping.
        """
        loc = EarthLocation(lat=0*u.deg, lon=0*u.deg, height=0*u.m)
        usph = golden_spiral_grid(200)
        cirs = CIRS(usph, obstime='J2000', location=loc)
        cirs6 = CIRS(usph, obstime='J2006', location=loc)
    
>       cirs2 = cirs.transform_to(ITRS(location=loc)).transform_to(cirs)

astropy/coordinates/tests/test_intermediate_transformations.py:359: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ITRS Frame (obstime=J2000.000)>, copy = True, representation_type = None
differential_type = None, args = ()
kwargs = {'location': <EarthLocation (6378137., 0., 0.) m>}, values = {}
fnm = 'obstime'
fdefault = <Time object: scale='tt' format='jyear_str' value=J2000.000>

    def __init__(self, *args, copy=True, representation_type=None,
                 differential_type=None, **kwargs):
        self._attr_names_with_defaults = []
    
        self._representation = self._infer_representation(representation_type, differential_type)
        self._data = self._infer_data(args, copy, kwargs)  # possibly None.
    
        # Set frame attributes, if any
    
        values = {}
        for fnm, fdefault in self.get_frame_attr_names().items():
            # Read-only frame attributes are defined as FrameAttribute
            # descriptors which are not settable, so set 'real' attributes as
            # the name prefaced with an underscore.
    
            if fnm in kwargs:
                value = kwargs.pop(fnm)
                setattr(self, '_' + fnm, value)
                # Validate attribute by getting it. If the instance has data,
                # this also checks its shape is OK. If not, we do it below.
                values[fnm] = getattr(self, fnm)
            else:
                setattr(self, '_' + fnm, fdefault)
                self._attr_names_with_defaults.append(fnm)
    
        if kwargs:
>           raise TypeError(
                f'Coordinate frame {self.__class__.__name__} got unexpected '
                f'keywords: {list(kwargs)}')
E           TypeError: Coordinate frame ITRS got unexpected keywords: ['location']

astropy/coordinates/baseframe.py:319: TypeError
_________________________ test_itrs_straight_overhead __________________________

    def test_itrs_straight_overhead():
        """
        With a precise ITRS<->Observed transformation this should give Alt=90 exactly
    
        """
        t = Time('J2010')
        obj = EarthLocation(-1*u.deg, 52*u.deg, height=10.*u.km)
        home = EarthLocation(-1*u.deg, 52*u.deg, height=0.*u.km)
    
        # An object that appears straight overhead - FOR A GEOCENTRIC OBSERVER.
        itrs_geo = obj.get_itrs(t).cartesian
    
        # now get the Geocentric ITRS position of observatory
        obsrepr = home.get_itrs(t).cartesian
    
        # topocentric ITRS position of a straight overhead object
        itrs_repr = itrs_geo - obsrepr
    
        # create a ITRS object that appears straight overhead for a TOPOCENTRIC OBSERVER
>       itrs_topo = ITRS(itrs_repr, obstime=t, location=home)

astropy/coordinates/tests/test_intermediate_transformations.py:957: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <ITRS Coordinate (obstime=J2010.000): (x, y, z) in km
    (6.15567707, -0.10744774, 7.88010754)>
copy = True, representation_type = None, differential_type = None
args = (<CartesianRepresentation (x, y, z) in km
    (6.15567707, -0.10744774, 7.88010754)>,)
kwargs = {'location': <EarthLocation (3934.36115314, -68.67452938, 5002.80334548) km>}
values = {'obstime': <Time object: scale='tt' format='jyear_str' value=J2010.000>}
fnm = 'obstime'
fdefault = <Time object: scale='tt' format='jyear_str' value=J2000.000>
value = <Time object: scale='tt' format='jyear_str' value=J2010.000>

    def __init__(self, *args, copy=True, representation_type=None,
                 differential_type=None, **kwargs):
        self._attr_names_with_defaults = []
    
        self._representation = self._infer_representation(representation_type, differential_type)
        self._data = self._infer_data(args, copy, kwargs)  # possibly None.
    
        # Set frame attributes, if any
    
        values = {}
        for fnm, fdefault in self.get_frame_attr_names().items():
            # Read-only frame attributes are defined as FrameAttribute
            # descriptors which are not settable, so set 'real' attributes as
            # the name prefaced with an underscore.
    
            if fnm in kwargs:
                value = kwargs.pop(fnm)
                setattr(self, '_' + fnm, value)
                # Validate attribute by getting it. If the instance has data,
                # this also checks its shape is OK. If not, we do it below.
                values[fnm] = getattr(self, fnm)
            else:
                setattr(self, '_' + fnm, fdefault)
                self._attr_names_with_defaults.append(fnm)
    
        if kwargs:
>           raise TypeError(
                f'Coordinate frame {self.__class__.__name__} got unexpected '
                f'keywords: {list(kwargs)}')
E           TypeError: Coordinate frame ITRS got unexpected keywords: ['location']

astropy/coordinates/baseframe.py:319: TypeError
==================================== PASSES ====================================
=========================== short test summary info ============================
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_icrs_gcrs[icoo0]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_icrs_gcrs[icoo1]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_icrs_gcrs_dist_diff[gframe0]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_icrs_gcrs_dist_diff[gframe1]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_to_altaz
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_to_hadec
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_itrs
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_itrs
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_cirs
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_altaz
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_hadec
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_precessed_geocentric
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_precessed_geocentric_different_obstime
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_altaz_sunish[testframe0]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_altaz_sunish[testframe1]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_altaz_sunish[testframe2]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_altaz_sunish[testframe3]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_altaz_sunish[testframe4]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_altaz_moonish[testframe0]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_altaz_moonish[testframe1]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_altaz_moonish[testframe2]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_altaz_moonish[testframe3]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_altaz_moonish[testframe4]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_altaz_bothroutes[testframe0]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_altaz_bothroutes[testframe1]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_altaz_bothroutes[testframe2]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_altaz_bothroutes[testframe3]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_altaz_bothroutes[testframe4]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_altaz_moonish[testframe0]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_altaz_moonish[testframe1]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_altaz_moonish[testframe2]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_altaz_moonish[testframe3]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_altaz_moonish[testframe4]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_altaz_nodist[testframe0]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_altaz_nodist[testframe1]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_altaz_nodist[testframe2]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_altaz_nodist[testframe3]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_altaz_nodist[testframe4]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_icrs_moonish[testframe0]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_icrs_moonish[testframe1]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_icrs_moonish[testframe2]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_icrs_moonish[testframe3]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_icrs_moonish[testframe4]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_icrs_moonish[testframe0]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_icrs_moonish[testframe1]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_icrs_moonish[testframe2]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_icrs_moonish[testframe3]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_icrs_moonish[testframe4]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_icrs_gcrscirs_sunish[testframe0]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_icrs_gcrscirs_sunish[testframe1]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_icrs_gcrscirs_sunish[testframe2]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_icrs_gcrscirs_sunish[testframe3]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_icrs_gcrscirs_sunish[testframe4]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_icrs_altaz_moonish[testframe0]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_icrs_altaz_moonish[testframe1]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_icrs_altaz_moonish[testframe2]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_icrs_altaz_moonish[testframe3]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_icrs_altaz_moonish[testframe4]
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_gcrs_self_transform_closeby
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_teme_itrf
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_precessedgeocentric_loopback
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_teme_loopback
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_tete_transforms
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_straight_overhead
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::test_aa_high_precision_nodata
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::TestGetLocationGCRS::test_get_gcrs_posvel
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::TestGetLocationGCRS::test_tete_quick
PASSED astropy/coordinates/tests/test_intermediate_transformations.py::TestGetLocationGCRS::test_cirs_quick
SKIPPED [1] ../opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pytest_remotedata/plugin.py:85: need --remote-data option to run
SKIPPED [1] astropy/coordinates/tests/test_intermediate_transformations.py:817: requires jplephem
SKIPPED [1] astropy/coordinates/tests/test_intermediate_transformations.py:980: requires jplephem >= 2.15
FAILED astropy/coordinates/tests/test_intermediate_transformations.py::test_icrs_cirs
FAILED astropy/coordinates/tests/test_intermediate_transformations.py::test_itrs_topo_to_altaz_with_refraction
FAILED astropy/coordinates/tests/test_intermediate_transformations.py::test_itrs_topo_to_hadec_with_refraction
FAILED astropy/coordinates/tests/test_intermediate_transformations.py::test_cirs_itrs_topo
FAILED astropy/coordinates/tests/test_intermediate_transformations.py::test_itrs_straight_overhead
=================== 5 failed, 68 passed, 3 skipped in 3.86s ====================
+ : '>>>>> End Test Output'
+ git checkout 6500928dc0e57be8f06d1162eacc3ba5e2eff692 astropy/coordinates/tests/test_intermediate_transformations.py
Updated 1 path from 059e0f861b
