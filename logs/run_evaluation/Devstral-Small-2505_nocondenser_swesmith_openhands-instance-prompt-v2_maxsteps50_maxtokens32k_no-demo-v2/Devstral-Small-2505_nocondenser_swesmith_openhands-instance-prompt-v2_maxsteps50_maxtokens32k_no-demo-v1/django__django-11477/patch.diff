diff --git a/django/urls/base.py b/django/urls/base.py
index 0e1c3d909c..67afa4d8b1 100644
--- a/django/urls/base.py
+++ b/django/urls/base.py
@@ -172,7 +172,9 @@ def translate_url(url, lang_code):
         to_be_reversed = "%s:%s" % (match.namespace, match.url_name) if match.namespace else match.url_name
         with override(lang_code):
             try:
-                url = reverse(to_be_reversed, args=match.args, kwargs=match.kwargs)
+                # Filter out kwargs with empty or None values for optional parameters
+                filtered_kwargs = {k: v for k, v in match.kwargs.items() if v is not None}
+                url = reverse(to_be_reversed, args=match.args, kwargs=filtered_kwargs)
             except NoReverseMatch:
                 pass
             else:
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..18286dba0d
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,62 @@
+#!/usr/bin/env python
+import sys
+import os
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, '/testbed')
+
+from django.urls import translate_url
+from django.urls.resolvers import URLPattern, URLResolver
+from django.urls import path, re_path, include
+from django.utils.translation import gettext_lazy as _
+from django.conf import settings
+
+# Set up a minimal Django environment
+if not settings.configured:
+    settings.configure(
+        SECRET_KEY='fake-key',
+        ROOT_URLCONF='django.conf.urls.defaults',
+        DEBUG=True,
+    )
+
+# Create a URL pattern with an optional named group
+def test_translate_url_with_optional_group():
+    # Create a simple URL pattern with an optional named group
+    urlpatterns = [
+        re_path(r'^test/(?P<optional_param>\d+)?/$', lambda r: None, name='test_url'),
+    ]
+
+    # Mock the resolve function to return our test pattern
+    from django.urls import base
+    original_resolve = base.resolve
+
+    class MockMatch:
+        def __init__(self, args, kwargs):
+            self.args = args
+            self.kwargs = kwargs
+            self.namespace = None
+            self.url_name = 'test_url'
+
+    def mock_resolve(path):
+        if path == '/test/':
+            return MockMatch([], {})
+        elif path == '/test/123/':
+            return MockMatch([], {'optional_param': '123'})
+        raise Exception("Path not found")
+
+    # Replace the resolve function
+    base.resolve = mock_resolve
+
+    # Test with the optional parameter present
+    result1 = translate_url('/test/123/', 'en')
+    print(f"URL with parameter: {result1}")
+
+    # Test with the optional parameter absent
+    result2 = translate_url('/test/', 'en')
+    print(f"URL without parameter: {result2}")
+
+    # Restore the original resolve function
+    base.resolve = original_resolve
+
+if __name__ == '__main__':
+    test_translate_url_with_optional_group()
\ No newline at end of file
diff --git a/run_tests.py b/run_tests.py
new file mode 100644
index 0000000000..2ea1220cd3
--- /dev/null
+++ b/run_tests.py
@@ -0,0 +1,49 @@
+#!/usr/bin/env python
+import sys
+import os
+import unittest
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, '/testbed')
+
+from django.conf import settings
+
+# Configure settings
+if not settings.configured:
+    settings.configure(
+        SECRET_KEY='fake-key',
+        USE_I18N=True,
+        LANGUAGE_CODE='en',
+        LANGUAGES=(
+            ('en', 'English'),
+            ('nl', 'Dutch'),
+        ),
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'tests.i18n.patterns',
+        ],
+        ROOT_URLCONF='tests.i18n.patterns.urls.default',
+    )
+
+from django.test.utils import setup_test_environment
+setup_test_environment()
+
+from django.urls import translate_url
+from django.urls.resolvers import URLPattern, URLResolver, Resolver404, NoReverseMatch
+from django.urls import path, re_path, include
+from django.utils.translation import gettext_lazy as _
+from django.utils.translation import override
+
+# Import and run the test
+from tests.i18n.patterns.tests import URLTranslationTests
+
+if __name__ == '__main__':
+    suite = unittest.TestLoader().loadTestsFromTestCase(URLTranslationTests)
+    result = unittest.TextTestRunner(verbosity=2).run(suite)
+    sys.exit(0 if result.wasSuccessful() else 1)
\ No newline at end of file
diff --git a/simple_reproduce.py b/simple_reproduce.py
new file mode 100644
index 0000000000..dd4028f2f0
--- /dev/null
+++ b/simple_reproduce.py
@@ -0,0 +1,77 @@
+#!/usr/bin/env python
+import sys
+import os
+import re
+from urllib.parse import urlsplit, urlunsplit
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, '/testbed')
+
+from django.conf import settings
+
+# Configure settings
+if not settings.configured:
+    settings.configure(
+        SECRET_KEY='fake-key',
+        USE_I18N=True,
+        LANGUAGE_CODE='en',
+        LANGUAGES=(
+            ('en', 'English'),
+            ('nl', 'Dutch'),
+        ),
+    )
+
+from django.urls import translate_url
+from django.urls.resolvers import URLPattern, URLResolver, Resolver404, NoReverseMatch
+from django.urls import path, re_path, include
+from django.utils.translation import gettext_lazy as _
+from django.utils.translation import override
+
+# Mock the resolve function
+def mock_resolve(path):
+    class MockMatch:
+        def __init__(self, args, kwargs, namespace=None, url_name=None):
+            self.args = args
+            self.kwargs = kwargs
+            self.namespace = namespace
+            self.url_name = url_name
+
+    if path == '/test/':
+        return MockMatch([], {}, None, 'test_url')
+    elif path == '/test/123/':
+        return MockMatch([], {'optional_param': '123'}, None, 'test_url')
+    raise Resolver404({'path': path})
+
+# Mock the reverse function
+def mock_reverse(viewname, args=None, kwargs=None):
+    if viewname == 'test_url':
+        if kwargs and 'optional_param' in kwargs:
+            return f'/test/{kwargs["optional_param"]}/'
+        else:
+            return '/test/'
+    raise NoReverseMatch(f"Reverse for '{viewname}' not found.")
+
+# Replace the original functions with our mocks
+from django.urls import base
+original_resolve = base.resolve
+original_reverse = base.reverse
+
+base.resolve = mock_resolve
+base.reverse = mock_reverse
+
+# Test the translate_url function
+def test_translate_url():
+    # Test with the optional parameter present
+    result1 = translate_url('/test/123/', 'en')
+    print(f"URL with parameter: {result1}")
+
+    # Test with the optional parameter absent
+    result2 = translate_url('/test/', 'en')
+    print(f"URL without parameter: {result2}")
+
+    # Restore the original functions
+    base.resolve = original_resolve
+    base.reverse = original_reverse
+
+if __name__ == '__main__':
+    test_translate_url()
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..6118e2b5b7
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,96 @@
+#!/usr/bin/env python
+import sys
+import os
+from urllib.parse import urlsplit, urlunsplit
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, '/testbed')
+
+# Create a simple test case for the translate_url function
+class MockMatch:
+    def __init__(self, args, kwargs, namespace=None, url_name=None):
+        self.args = args
+        self.kwargs = kwargs
+        self.namespace = namespace
+        self.url_name = url_name
+
+class MockResolver404(Exception):
+    pass
+
+class MockNoReverseMatch(Exception):
+    pass
+
+# Original function for comparison
+def original_translate_url(url, lang_code):
+    """
+    Given a URL (absolute or relative), try to get its translated version in
+    the `lang_code` language (either by i18n_patterns or by translated regex).
+    Return the original URL if no translated version is found.
+    """
+    parsed = urlsplit(url)
+    try:
+        match = mock_resolve(parsed.path)
+    except MockResolver404:
+        pass
+    else:
+        to_be_reversed = "%s:%s" % (match.namespace, match.url_name) if match.namespace else match.url_name
+        try:
+            url = mock_reverse(to_be_reversed, args=match.args, kwargs=match.kwargs)
+        except MockNoReverseMatch:
+            pass
+        else:
+            url = urlunsplit((parsed.scheme, parsed.netloc, url, parsed.query, parsed.fragment))
+    return url
+
+# Fixed function
+def fixed_translate_url(url, lang_code):
+    """
+    Given a URL (absolute or relative), try to get its translated version in
+    the `lang_code` language (either by i18n_patterns or by translated regex).
+    Return the original URL if no translated version is found.
+    """
+    parsed = urlsplit(url)
+    try:
+        match = mock_resolve(parsed.path)
+    except MockResolver404:
+        pass
+    else:
+        to_be_reversed = "%s:%s" % (match.namespace, match.url_name) if match.namespace else match.url_name
+        try:
+            # Filter out kwargs with empty or None values for optional parameters
+            filtered_kwargs = {k: v for k, v in match.kwargs.items() if v is not None}
+            url = mock_reverse(to_be_reversed, args=match.args, kwargs=filtered_kwargs)
+        except MockNoReverseMatch:
+            pass
+        else:
+            url = urlunsplit((parsed.scheme, parsed.netloc, url, parsed.query, parsed.fragment))
+    return url
+
+# Mock functions
+def mock_resolve(path):
+    if path == '/test/':
+        return MockMatch([], {}, None, 'test_url')
+    elif path == '/test/123/':
+        return MockMatch([], {'optional_param': '123'}, None, 'test_url')
+    raise MockResolver404()
+
+def mock_reverse(viewname, args=None, kwargs=None):
+    if viewname == 'test_url':
+        if kwargs and 'optional_param' in kwargs:
+            return f'/test/{kwargs["optional_param"]}/'
+        else:
+            return '/test/'
+    raise MockNoReverseMatch()
+
+# Test cases
+def run_tests():
+    print("Testing with optional parameter present:")
+    print(f"  Original: {original_translate_url('/test/123/', 'en')}")
+    print(f"  Fixed:    {fixed_translate_url('/test/123/', 'en')}")
+
+    print("\nTesting with optional parameter absent:")
+    print(f"  Original: {original_translate_url('/test/', 'en')}")
+    print(f"  Fixed:    {fixed_translate_url('/test/', 'en')}")
+
+if __name__ == '__main__':
+    run_tests()
\ No newline at end of file
diff --git a/verify_fix.py b/verify_fix.py
new file mode 100644
index 0000000000..dd4028f2f0
--- /dev/null
+++ b/verify_fix.py
@@ -0,0 +1,77 @@
+#!/usr/bin/env python
+import sys
+import os
+import re
+from urllib.parse import urlsplit, urlunsplit
+
+# Add the testbed directory to the Python path
+sys.path.insert(0, '/testbed')
+
+from django.conf import settings
+
+# Configure settings
+if not settings.configured:
+    settings.configure(
+        SECRET_KEY='fake-key',
+        USE_I18N=True,
+        LANGUAGE_CODE='en',
+        LANGUAGES=(
+            ('en', 'English'),
+            ('nl', 'Dutch'),
+        ),
+    )
+
+from django.urls import translate_url
+from django.urls.resolvers import URLPattern, URLResolver, Resolver404, NoReverseMatch
+from django.urls import path, re_path, include
+from django.utils.translation import gettext_lazy as _
+from django.utils.translation import override
+
+# Mock the resolve function
+def mock_resolve(path):
+    class MockMatch:
+        def __init__(self, args, kwargs, namespace=None, url_name=None):
+            self.args = args
+            self.kwargs = kwargs
+            self.namespace = namespace
+            self.url_name = url_name
+
+    if path == '/test/':
+        return MockMatch([], {}, None, 'test_url')
+    elif path == '/test/123/':
+        return MockMatch([], {'optional_param': '123'}, None, 'test_url')
+    raise Resolver404({'path': path})
+
+# Mock the reverse function
+def mock_reverse(viewname, args=None, kwargs=None):
+    if viewname == 'test_url':
+        if kwargs and 'optional_param' in kwargs:
+            return f'/test/{kwargs["optional_param"]}/'
+        else:
+            return '/test/'
+    raise NoReverseMatch(f"Reverse for '{viewname}' not found.")
+
+# Replace the original functions with our mocks
+from django.urls import base
+original_resolve = base.resolve
+original_reverse = base.reverse
+
+base.resolve = mock_resolve
+base.reverse = mock_reverse
+
+# Test the translate_url function
+def test_translate_url():
+    # Test with the optional parameter present
+    result1 = translate_url('/test/123/', 'en')
+    print(f"URL with parameter: {result1}")
+
+    # Test with the optional parameter absent
+    result2 = translate_url('/test/', 'en')
+    print(f"URL without parameter: {result2}")
+
+    # Restore the original functions
+    base.resolve = original_resolve
+    base.reverse = original_reverse
+
+if __name__ == '__main__':
+    test_translate_url()
\ No newline at end of file
