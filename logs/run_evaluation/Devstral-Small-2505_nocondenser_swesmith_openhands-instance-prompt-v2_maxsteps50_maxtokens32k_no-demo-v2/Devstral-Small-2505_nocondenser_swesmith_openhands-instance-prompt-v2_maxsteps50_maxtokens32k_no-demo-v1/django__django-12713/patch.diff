diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 69a5fbf389..b3c4020f39 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -250,15 +250,16 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
         db = kwargs.get('using')
 
         autocomplete_fields = self.get_autocomplete_fields(request)
-        if db_field.name in autocomplete_fields:
-            kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)
-        elif db_field.name in self.raw_id_fields:
-            kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)
-        elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:
-            kwargs['widget'] = widgets.FilteredSelectMultiple(
-                db_field.verbose_name,
-                db_field.name in self.filter_vertical
-            )
+        if 'widget' not in kwargs:
+            if db_field.name in autocomplete_fields:
+                kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)
+            elif db_field.name in self.raw_id_fields:
+                kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)
+            elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:
+                kwargs['widget'] = widgets.FilteredSelectMultiple(
+                    db_field.verbose_name,
+                    db_field.name in self.filter_vertical
+                )
 
         if 'queryset' not in kwargs:
             queryset = self.get_field_queryset(db, db_field, request)
diff --git a/test_widget_override.py b/test_widget_override.py
new file mode 100644
index 0000000000..1daf70e3b9
--- /dev/null
+++ b/test_widget_override.py
@@ -0,0 +1,80 @@
+import django
+from django import forms
+from django.db import models
+from django.contrib.admin import ModelAdmin, AdminSite
+from django.contrib.admin.options import BaseModelAdmin
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            '__main__',  # Add our models to INSTALLED_APPS
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+    )
+    django.setup()
+
+# Create a simple model with a ManyToManyField
+class Tag(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = '__main__'
+
+class Article(models.Model):
+    title = models.CharField(max_length=100)
+    tags = models.ManyToManyField(Tag, related_name='articles')
+
+    class Meta:
+        app_label = '__main__'
+
+# Create a custom widget
+class CustomSelectMultiple(forms.Widget):
+    def __init__(self, attrs=None):
+        super().__init__(attrs)
+        self.attrs.update({'class': 'custom-widget'})
+
+    def render(self, name, value, attrs=None, renderer=None):
+        return '<select class="custom-widget">This is a custom widget</select>'
+
+# Create a custom ModelAdmin that tries to override the widget
+class ArticleAdmin(ModelAdmin):
+    # Add the tags field to filter_horizontal to trigger the default widget selection
+    filter_horizontal = ['tags']
+
+# Test the widget override
+def test_widget_override():
+    # Create a custom admin site
+    site = AdminSite()
+
+    # Register the models with the admin site
+    site.register(Tag)
+    site.register(Article, ArticleAdmin)
+
+    # Get the admin instance
+    admin = site._registry[Article]
+
+    # Get the formfield for the ManyToManyField with a custom widget
+    formfield = admin.formfield_for_manytomany(Article._meta.get_field('tags'), None, widget=CustomSelectMultiple())
+
+    # Check if the widget was overridden
+    if isinstance(formfield.widget, CustomSelectMultiple):
+        print("SUCCESS: Widget was overridden correctly")
+    else:
+        print(f"FAILURE: Widget was not overridden. Got {formfield.widget.__class__.__name__} instead of CustomSelectMultiple")
+
+    # Print the widget's HTML to verify
+    print("\nWidget HTML:")
+    print(formfield.widget.render('tags', None))
+
+if __name__ == '__main__':
+    test_widget_override()
\ No newline at end of file
